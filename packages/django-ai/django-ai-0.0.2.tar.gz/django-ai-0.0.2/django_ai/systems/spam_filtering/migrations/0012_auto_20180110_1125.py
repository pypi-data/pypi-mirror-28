# -*- coding: utf-8 -*-
# Generated by Django 1.11.5 on 2018-01-10 17:25
from __future__ import unicode_literals

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('spam_filtering', '0011_auto_20171222_0758'),
    ]

    operations = [
        migrations.AlterField(
            model_name='spamfilter',
            name='bow_analyzer',
            field=models.CharField(choices=[('word', 'Word'), ('char', 'Character'), ('char_wb', 'Characters in Word-Boundaries')], default='word', help_text='Whether the feature should be made of word or character n-grams. Option ‘Chars in W-B’ creates character n-grams only from text inside word boundaries; n-grams at the edges of words are padded with space.', max_length=20, verbose_name='(BoW) Analyzer'),
        ),
        migrations.AlterField(
            model_name='spamfilter',
            name='bow_binary',
            field=models.BooleanField(default=False, help_text='If True, all non zero counts are set to 1. This is useful for discrete probabilistic models that model binary events rather than integer counts.', verbose_name='(BoW) Use Binary representation?'),
        ),
        migrations.AlterField(
            model_name='spamfilter',
            name='bow_decode_error',
            field=models.CharField(choices=[('strict', 'Strict'), ('ignore', 'Ignore'), ('replace', 'Replace')], default='strict', help_text='Instruction on what to do if a byte sequence is given to analyze that contains characters not of the given encoding. By default, it is ‘strict’, meaning that a UnicodeDecodeError will be raised. Other values are ‘ignore’ and ‘replace’.', max_length=20, verbose_name='(BoW) Decode Error'),
        ),
        migrations.AlterField(
            model_name='spamfilter',
            name='bow_enconding',
            field=models.CharField(default='utf-8', help_text='Encoding to be used to decode.', max_length=20, verbose_name='(BoW) Encoding'),
        ),
        migrations.AlterField(
            model_name='spamfilter',
            name='bow_is_enabled',
            field=models.BooleanField(default=True, help_text='Enable Bag of Words transformation', verbose_name='Enable Bag of Words representation?'),
        ),
        migrations.AlterField(
            model_name='spamfilter',
            name='bow_max_df',
            field=models.FloatField(default=1.0, help_text='When building the vocabulary ignore terms that have a document frequency strictly higher than the given threshold (corpus-specific stop words). If float, the parameter represents a proportion of documents, integer absolute counts. This parameter is ignored if vocabulary is not None.', verbose_name='(BoW) Maximum Document Frequency'),
        ),
        migrations.AlterField(
            model_name='spamfilter',
            name='bow_max_features',
            field=models.IntegerField(blank=True, default=None, help_text='If not None, build a vocabulary that only consider the top max_features ordered by term frequency across the corpus.  This parameter is ignored if vocabulary is not None.', null=True, verbose_name='(BoW) Maximum Features'),
        ),
        migrations.AlterField(
            model_name='spamfilter',
            name='bow_min_df',
            field=models.FloatField(default=1, help_text='When building the vocabulary ignore terms that have a document frequency strictly lower than the given threshold. This value is also called cut-off in the literature. If float, the parameter represents a proportion of documents, integer absolute counts. This parameter is ignored if vocabulary is not None.', verbose_name='(BoW) Minimum Document Frequency'),
        ),
        migrations.AlterField(
            model_name='spamfilter',
            name='bow_ngram_range_max',
            field=models.SmallIntegerField(default=1, help_text='The upper boundary of the range of n-values for different n-grams to be extracted. All values of n such that min_n <= n <= max_n will be used.', verbose_name='(BoW) n-gram Range - Max'),
        ),
        migrations.AlterField(
            model_name='spamfilter',
            name='bow_ngram_range_min',
            field=models.SmallIntegerField(default=1, help_text='The lower boundary of the range of n-values for different n-grams to be extracted. All values of n such that min_n <= n <= max_n will be used.', verbose_name='(BoW) n-gram Range - Min'),
        ),
        migrations.AlterField(
            model_name='spamfilter',
            name='bow_stop_words',
            field=models.TextField(blank=True, default=None, help_text='If ‘english’, a built-in stop word list for English is used. If a comma-separated string, that list is assumed to contain stop words, all of which will be removed from the resulting tokens. Only applies if analyzer == ´word´. If None, no stop words will be used. max_df can be set to a value in the range [0.7, 1.0) to automatically detect and filter stop words based on intra corpus document frequency of terms.', null=True, verbose_name='(BoW) Stop Words'),
        ),
        migrations.AlterField(
            model_name='spamfilter',
            name='bow_strip_accents',
            field=models.CharField(blank=True, choices=[('ascii', 'ASCII'), ('unicode', 'Unicode')], default=None, help_text='Remove accents during the preprocessing step. ‘ascii’ is a fast method that only works on characters that have an direct ASCII mapping. ‘unicode’ is a slightly slower method that works on any characters. None (default) does nothing.', max_length=20, null=True, verbose_name='(BoW) Strip Accents'),
        ),
        migrations.AlterField(
            model_name='spamfilter',
            name='bow_use_tf_idf',
            field=models.BooleanField(default=True, help_text='Use the TF-IDF transformation?', verbose_name='(BoW) Use the TF-IDF transformation?'),
        ),
        migrations.AlterField(
            model_name='spamfilter',
            name='bow_vocabulary',
            field=models.TextField(blank=True, default=None, help_text='A Mapping (e.g., a dict) where keys are terms and values are indices in the feature matrix. If not given, a vocabulary is determined from the input documents. Indices in the mapping should not be repeated and should not have any gap between 0 and the largest index.', null=True, verbose_name='(BoW) Vocabulary'),
        ),
        migrations.AlterField(
            model_name='spamfilter',
            name='sm_type',
            field=models.SmallIntegerField(blank=True, choices=[(0, 'General'), (1, 'Classification'), (2, 'Regression')], default=0, null=True, verbose_name='Statistical Technique Type'),
        ),
    ]
