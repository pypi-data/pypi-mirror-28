# -*- coding: utf-8 -*-
# Generated by Django 1.11.5 on 2018-01-10 17:25
from __future__ import unicode_literals

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('supervised_learning', '0007_svc_is_inferred'),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='svc',
            options={'verbose_name': 'Support Vector Machine for Classification', 'verbose_name_plural': 'Support Vector Machines for Classification'},
        ),
        migrations.AddField(
            model_name='svc',
            name='cv_folds',
            field=models.SmallIntegerField(blank=True, help_text='Quantity of Folds to be used in Cross Validation', null=True, verbose_name='Cross Validation Folds'),
        ),
        migrations.AddField(
            model_name='svc',
            name='cv_is_enabled',
            field=models.BooleanField(default=True, help_text='Enable Cross Validation', verbose_name='Cross Validation is Enabled?'),
        ),
        migrations.AddField(
            model_name='svc',
            name='cv_metric',
            field=models.CharField(blank=True, help_text='Metric to be evaluated in Cross Validation', max_length=20, null=True, verbose_name='Cross Validation Metric'),
        ),
        migrations.AddField(
            model_name='svc',
            name='pretraining',
            field=models.CharField(blank=True, help_text='Django Model containing the pre-training dataset in the"app_label.model" format, i.e. "examples.SFPTEnron"', max_length=100, null=True, verbose_name='Pre-Training dataset'),
        ),
        migrations.AlterField(
            model_name='svc',
            name='estimate_probability',
            field=models.BooleanField(default=False, help_text='Whether to enable probability estimates. This will slow model fitting.', verbose_name='Estimate Probability?'),
        ),
        migrations.AlterField(
            model_name='svc',
            name='kernel',
            field=models.CharField(blank=True, choices=[('linear', 'Linear'), ('poly', 'Polynomial'), ('rbf', 'RBF'), ('linear', 'Linear'), ('sigmoid', 'Sigmoid'), ('precomputed', 'Precomputed')], help_text='Kernel to be used in the SVM. If none is given, RBF will be used.', max_length=50, null=True, verbose_name='SVM Kernel'),
        ),
        migrations.AlterField(
            model_name='svc',
            name='kernel_coefficient',
            field=models.FloatField(blank=True, help_text='Kernel coefficient for RBF, Polynomial and Sigmoid. Leave blank "for automatic" (1/n_features will be used)', null=True, verbose_name='Kernel coefficient'),
        ),
        migrations.AlterField(
            model_name='svc',
            name='kernel_independent_term',
            field=models.FloatField(blank=True, default=0.0, help_text='Independent term in kernel function. It is only significant in Polynomial and Sigmoid kernels.', null=True, verbose_name='Kernel Independent Term'),
        ),
        migrations.AlterField(
            model_name='svc',
            name='kernel_poly_degree',
            field=models.IntegerField(blank=True, default=3, help_text='Degree of the Polynomial Kernel function. Ignored by all other Kernels.', null=True, verbose_name='Polynomial Kernel degree'),
        ),
        migrations.AlterField(
            model_name='svc',
            name='penalty_parameter',
            field=models.FloatField(blank=True, default=1.0, help_text='Penalty parameter (C) of the error term.', null=True, verbose_name='Penalty Parameter'),
        ),
        migrations.AlterField(
            model_name='svc',
            name='sm_type',
            field=models.SmallIntegerField(blank=True, choices=[(0, 'General'), (1, 'Classification'), (2, 'Regression')], default=0, null=True, verbose_name='Statistical Technique Type'),
        ),
        migrations.AlterField(
            model_name='svc',
            name='tolerance',
            field=models.FloatField(blank=True, default='1e-3', help_text='Tolerance for stopping criterion.', null=True, verbose_name='Tolerance'),
        ),
        migrations.AlterField(
            model_name='svc',
            name='use_shrinking',
            field=models.BooleanField(default=True, help_text='Whether to use the shrinking heuristic.', verbose_name='Use Shrinking Heuristic?'),
        ),
        migrations.AlterField(
            model_name='svc',
            name='verbose',
            field=models.BooleanField(default=False, help_text='Enable verbose output. Note that this setting takes advantage of a per-process runtime setting in libsvm that, if enabled, may not work properly in a multithreaded context.', verbose_name='Be Verbose?'),
        ),
    ]
