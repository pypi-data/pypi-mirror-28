
from mrcrowbar import models as mrc
from mrcrowbar.lib.images import base as img


# taken from yodesk.exe at offset 0x550EF (.data:0x4572F0), len 0x400
YODA_PALETTE_RAW =  b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
                    b'\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x8b\x00\xc3\xcfK\x00\x8b\xa3\x1b\x00Ww\x00\x00\x8b\xa3\x1b\x00\xc3\xcfK\x00'\
                    b'\xfb\xfb\xfb\x00\xeb\xe7\xe7\x00\xdb\xd3\xd3\x00\xcb\xc3\xc3\x00\xbb\xb3\xb3\x00\xab\xa3\xa3\x00\x9b\x8f\x8f\x00\x8b\x7f\x7f\x00'\
                    b'{oo\x00g[[\x00WKK\x00G;;\x003++\x00#\x1b\x1b\x00\x13\x0f\x0f\x00\x00\x00\x00\x00'\
                    b'\x00\xc7C\x00\x00\xb7C\x00\x00\xab?\x00\x00\x9f?\x00\x00\x93?\x00\x00\x87;\x00\x00{7\x00\x00o3\x00'\
                    b"\x00c3\x00\x00S+\x00\x00G'\x00\x00;#\x00\x00/\x1b\x00\x00#\x13\x00\x00\x17\x0f\x00\x00\x0b\x07\x00"\
                    b'K{\xbb\x00Cs\xb3\x00Ck\xab\x00;c\xa3\x00;c\x9b\x003[\x93\x003[\x8b\x00+S\x83\x00'\
                    b'+Ks\x00#Kk\x00#C_\x00\x1b;S\x00\x1b7G\x00\x1b3C\x00\x13+;\x00\x0b#+\x00'\
                    b'\xd7\xff\xff\x00\xbb\xef\xef\x00\xa3\xdf\xdf\x00\x8b\xcf\xcf\x00w\xc3\xc3\x00c\xb3\xb3\x00S\xa3\xa3\x00C\x93\x93\x00'\
                    b"3\x87\x87\x00'ww\x00\x1bgg\x00\x13[[\x00\x0bKK\x00\x07;;\x00\x00++\x00\x00\x1f\x1f\x00"\
                    b'\xdb\xeb\xfb\x00\xd3\xe3\xfb\x00\xc3\xdb\xfb\x00\xbb\xd3\xfb\x00\xb3\xcb\xfb\x00\xa3\xc3\xfb\x00\x9b\xbb\xfb\x00\x8f\xb7\xfb\x00'\
                    b'\x83\xb3\xf7\x00s\xa7\xfb\x00c\x9b\xfb\x00[\x93\xf3\x00[\x8b\xeb\x00S\x8b\xdb\x00S\x83\xd3\x00K{\xcb\x00'\
                    b'\x9b\xc7\xff\x00\x8f\xb7\xf7\x00\x87\xb3\xef\x00\x7f\xa7\xf3\x00s\x9f\xef\x00S\x83\xcf\x00;k\xb3\x00/[\xa3\x00'\
                    b"#O\x93\x00\x1bC\x83\x00\x13;w\x00\x0b/g\x00\x07'W\x00\x00\x1bG\x00\x00\x137\x00\x00\x0f+\x00"\
                    b'\xfb\xfb\xe7\x00\xf3\xf3\xd3\x00\xeb\xe7\xc7\x00\xe3\xdf\xb7\x00\xdb\xd7\xa7\x00\xd3\xcf\x97\x00\xcb\xc7\x8b\x00\xc3\xbb\x7f\x00'\
                    b'\xbb\xb3s\x00\xaf\xa7c\x00\x9b\x93G\x00\x87{3\x00og\x1f\x00[S\x0f\x00GC\x00\x0073\x00\x00'\
                    b'\xff\xf7\xf7\x00\xef\xdf\xdf\x00\xdf\xc7\xc7\x00\xcf\xb3\xb3\x00\xbf\x9f\x9f\x00\xb3\x8b\x8b\x00\xa3{{\x00\x93kk\x00'\
                    b"\x83WW\x00sKK\x00g;;\x00W//\x00G''\x007\x1b\x1b\x00'\x13\x13\x00\x1b\x0b\x0b\x00"\
                    b'\xf7\xb37\x00\xe7\x93\x07\x00\xfbS\x0b\x00\xfb\x00\x00\x00\xcb\x00\x00\x00\x9f\x00\x00\x00o\x00\x00\x00C\x00\x00\x00'\
                    b'\xbf\xbb\xfb\x00\x8f\x8b\xfb\x00_[\xfb\x00\x93\xbb\xff\x00_\x97\xf7\x00;{\xef\x00#c\xc3\x00\x13S\xb3\x00'\
                    b'\x00\x00\xff\x00\x00\x00\xef\x00\x00\x00\xe3\x00\x00\x00\xd3\x00\x00\x00\xc3\x00\x00\x00\xb7\x00\x00\x00\xa7\x00\x00\x00\x9b\x00'\
                    b'\x00\x00\x8b\x00\x00\x00\x7f\x00\x00\x00o\x00\x00\x00c\x00\x00\x00S\x00\x00\x00G\x00\x00\x007\x00\x00\x00+\x00'\
                    b'\x00\xff\xff\x00\x00\xe3\xf7\x00\x00\xcf\xf3\x00\x00\xb7\xef\x00\x00\xa3\xeb\x00\x00\x8b\xe7\x00\x00w\xdf\x00\x00c\xdb\x00'\
                    b'\x00O\xd7\x00\x00?\xd3\x00\x00/\xcf\x00\x97\xff\xff\x00\x83\xdf\xef\x00s\xc3\xdf\x00_\xa7\xcf\x00S\x8b\xc3\x00'\
                    b'++\x00\x00##\x00\x00\x1b\x1b\x00\x00\x13\x13\x00\x00\xff\x0b\x00\x00\xff\x00K\x00\xff\x00\xa3\x00\xff\x00\xff\x00'\
                    b'\x00\xff\x00\x00\x00K\x00\x00\xff\xff\x00\x00\xff3/\x00\x00\x00\xff\x00\x00\x1f\x97\x00\xdf\x00\xff\x00s\x00w\x00'\
                    b"k{\xc3\x00WW\xab\x00WG\x93\x00S7\x7f\x00O'g\x00G\x1bO\x00;\x13;\x00'ww\x00"\
                    b"#ss\x00\x1foo\x00\x1bkk\x00\x1bgg\x00\x1bkk\x00\x1foo\x00#ss\x00'ww\x00"\
                    b'\xff\xff\xef\x00\xf7\xf7\xdb\x00\xf3\xef\xcb\x00\xef\xeb\xbb\x00\xf3\xef\xcb\x00\xe7\x93\x07\x00\xe7\x97\x0f\x00\xeb\x9f\x17\x00'\
                    b"\xef\xa3#\x00\xf3\xab+\x00\xf7\xb37\x00\xef\xa7'\x00\xeb\x9f\x1b\x00\xe7\x97\x0f\x00\x0b\xcb\xfb\x00\x0b\xa3\xfb\x00"\
                    b'\x0bs\xfb\x00\x0bK\xfb\x00\x0b#\xfb\x00\x0bs\xfb\x00\x00\x13\x93\x00\x00\x0b\xd3\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
                    b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\x00'
YODA_PALETTE = img.from_palette_bytes( YODA_PALETTE_RAW, stride=4, order=(2, 1, 0) )
YODA_PALETTE[0] = img.Transparent()

class VERS( mrc.Block ):
    data = mrc.Bytes( 0x00, count=4 )


class STUP( mrc.Block ):
    pass


class SNDS( mrc.Block ):
    unknown1 =  mrc.Int16_LE( 0x00 )
    files =     mrc.CStringNStream( 0x02, mrc.UInt16_LE )


# 1, 1, 1, 0 - player sprites
# 1, 1, 2, 0 - enemy sprites
# 1, 1, 4, 0 - NPC sprites

# 2, 0, 0, 0 - walkable tiles
# 2, 0, 1, 0 - walkable tiles - special
# 4, 0, 0, 0 - obstacle tiles
# 5, 0, 0, 0 - obstacle overlay tiles

# 13, 0, 0, 0 - movable rocks
# 16, 0, 0, 0 - ???
# 17, 0, 0, 0 - overlayable scenery

# 32, 0, 2, 0 - map: spaceport
# 32, 0, 4, 0 - map: puzzle
# 32, 0, 8, 0 - map: puzzle filled
# 32, 0, 16, 0 - map: door
# 32, 0, 32, 0 - map: door filled
# 32, 0, 64, 0 - map: north wall
# 32, 0, 128, 0 - map: south wall
# 32, 0, 0, 1 - map: west wall
# 32, 0, 0, 2 - map: east wall
# 32, 0, 0, 4 - map: north wall open
# 32, 0, 0, 8 - map: south wall open
# 32, 0, 0, 16 - map: west wall open
# 32, 0, 0, 32 - map: east wall open
# 32, 0, 0, 64 - map: goal
# 32, 0, 0, 128 - map: location

# 65, 0, 1, 0 - blaster
# 65, 0, 2, 0 - rifle + detonator
# 65, 0, 4, 0 - lightsabers
# 65, 0, 8, 0 - force

# 129, 0, 1, 0 - keys
# 129, 0, 2, 0 - tools
# 129, 0, 4, 0 - macguffins
# 129, 0, 8, 0 - macguffins
# 129, 0, 16, 0 - locator
# 129, 0, 64. 0 - health


class TileData( mrc.Block ):
    unknown1 =  mrc.Bytes( 0x00, length=4 )
    data =      mrc.Bytes( 0x04, length=0x400 )

    def __init__( self, *args, **kwargs ):
        super().__init__( *args, **kwargs )
        self.image = img.IndexedImage(
                        self,
                        width=32,
                        height=32,
                        source=mrc.Ref( 'data' ),
                        palette=YODA_PALETTE,
                    )


class TILE( mrc.Block ):
    tiles =     mrc.BlockStream( TileData, 0x00 )


class ZONE( mrc.Block ):
    pass


class DAWFile( mrc.Block ):
    pass


class IndyLoader( mrc.Loader ):
    """Loader for the game Indiana Jones and His Desktop Adventures (Win32, 1996)."""
    _SEP = mrc.Loader._SEP

    _INDY_FILE_CLASS_MAP = {
        _SEP+'DESKTOP.DAW$': DAWFile,
    }

    def __init__( self ):
        super().__init__( self._INDY_FILE_CLASS_MAP )


class YodaLoader( mrc.Loader ):
    """Loader for the game Yoda Stories (Win32, 1997)."""
    _SEP = mrc.Loader._SEP

    _YODA_FILE_CLASS_MAP = {
        _SEP+'YODESK.DTA$': DAWFile,
    }

    def __init__( self ):
        super().__init__( self._YODA_FILE_CLASS_MAP )
