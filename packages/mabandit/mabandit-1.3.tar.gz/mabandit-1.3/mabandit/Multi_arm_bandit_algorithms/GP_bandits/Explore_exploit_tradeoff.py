import tensorflow as tf
from mabandit.Machine_learning.Gaussian_process import Gaussian_process
import numpy as np
from scipy.optimize import minimize

def Explore_exploit_tradeoff(X, Y, upper_bound, lower_bound, tradeoff_factor, datatype = tf.float64, noise = None, return_aqs = False, max_iter = 30):
    G = Gaussian_process(datatype=datatype)
    if noise == None:
        G.fit_noiseless(X, Y)
    else:
        G.fit_noisy(X, Y, noise)

    def function(x):
        g_ = G.predict(x)
        return -(g_[0] + np.sqrt(g_[1])*tradeoff_factor)

    minima = minimize(function, (lower_bound+upper_bound)/2,
                    bounds=[(lower_bound, upper_bound)],
                    options={'maxiter':max_iter, 'disp':False})['x'][0]

    if return_aqs == False:
        return minima
    else:
        x_ = np.linspace(lower_bound, upper_bound, 50)
        y_ = [0]*len(x_)
        for i in range(len(x_)):
            a = G.predict(x_[i])
            y_[i] = (a[0] + tradeoff_factor*np.sqrt(a[1]))[0]

        a = G.predict(minima)
        minima_point = a[0] + tradeoff_factor*np.sqrt(a[1])
        return minima, y_, minima_point
