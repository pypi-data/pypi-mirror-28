# coding: utf-8

"""
    

     This is pyrebrickable, a python CLI wrapper around the Rebrickable API<br> <br> It supports the v3 API through it's openAPI specification.<br> https://rebrickable.com/api/v3/swagger/?format=openapi<br> Models for Part, Set, etc. have been manually added to provide meaningful results from HTTP responses<br> <br> Some endpoints might not work, don't hesitate to file an issue<br>   # noqa: E501

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from rebrickable.models.set import Set  # noqa: F401,E501


class SetListSet(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'include_spares': 'bool',
        'list_id': 'int',
        'quantity': 'int',
        'set': 'Set'
    }

    attribute_map = {
        'include_spares': 'include_spares',
        'list_id': 'list_id',
        'quantity': 'quantity',
        'set': 'set'
    }

    def __init__(self, include_spares=None, list_id=None, quantity=None, set=None):  # noqa: E501
        """SetListSet - a model defined in Swagger"""  # noqa: E501

        self._include_spares = None
        self._list_id = None
        self._quantity = None
        self._set = None
        self.discriminator = None

        if include_spares is not None:
            self.include_spares = include_spares
        if list_id is not None:
            self.list_id = list_id
        if quantity is not None:
            self.quantity = quantity
        if set is not None:
            self.set = set

    @property
    def include_spares(self):
        """Gets the include_spares of this SetListSet.  # noqa: E501


        :return: The include_spares of this SetListSet.  # noqa: E501
        :rtype: bool
        """
        return self._include_spares

    @include_spares.setter
    def include_spares(self, include_spares):
        """Sets the include_spares of this SetListSet.


        :param include_spares: The include_spares of this SetListSet.  # noqa: E501
        :type: bool
        """

        self._include_spares = include_spares

    @property
    def list_id(self):
        """Gets the list_id of this SetListSet.  # noqa: E501


        :return: The list_id of this SetListSet.  # noqa: E501
        :rtype: int
        """
        return self._list_id

    @list_id.setter
    def list_id(self, list_id):
        """Sets the list_id of this SetListSet.


        :param list_id: The list_id of this SetListSet.  # noqa: E501
        :type: int
        """

        self._list_id = list_id

    @property
    def quantity(self):
        """Gets the quantity of this SetListSet.  # noqa: E501


        :return: The quantity of this SetListSet.  # noqa: E501
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this SetListSet.


        :param quantity: The quantity of this SetListSet.  # noqa: E501
        :type: int
        """

        self._quantity = quantity

    @property
    def set(self):
        """Gets the set of this SetListSet.  # noqa: E501


        :return: The set of this SetListSet.  # noqa: E501
        :rtype: Set
        """
        return self._set

    @set.setter
    def set(self, set):
        """Sets the set of this SetListSet.


        :param set: The set of this SetListSet.  # noqa: E501
        :type: Set
        """

        self._set = set

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SetListSet):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
