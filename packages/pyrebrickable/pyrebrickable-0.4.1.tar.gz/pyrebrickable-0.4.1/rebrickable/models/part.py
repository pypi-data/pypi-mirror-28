# coding: utf-8

"""
    

     This is pyrebrickable, a python CLI wrapper around the Rebrickable API<br> <br> It supports the v3 API through it's openAPI specification.<br> https://rebrickable.com/api/v3/swagger/?format=openapi<br> Models for Part, Set, etc. have been manually added to provide meaningful results from HTTP responses<br> <br> Some endpoints might not work, don't hesitate to file an issue<br>   # noqa: E501

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Part(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'part_cat_id': 'int',
        'part_img_url': 'str',
        'part_num': 'str',
        'part_url': 'str'
    }

    attribute_map = {
        'name': 'name',
        'part_cat_id': 'part_cat_id',
        'part_img_url': 'part_img_url',
        'part_num': 'part_num',
        'part_url': 'part_url'
    }

    def __init__(self, name=None, part_cat_id=None, part_img_url=None, part_num=None, part_url=None):  # noqa: E501
        """Part - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._part_cat_id = None
        self._part_img_url = None
        self._part_num = None
        self._part_url = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if part_cat_id is not None:
            self.part_cat_id = part_cat_id
        if part_img_url is not None:
            self.part_img_url = part_img_url
        if part_num is not None:
            self.part_num = part_num
        if part_url is not None:
            self.part_url = part_url

    @property
    def name(self):
        """Gets the name of this Part.  # noqa: E501


        :return: The name of this Part.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Part.


        :param name: The name of this Part.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def part_cat_id(self):
        """Gets the part_cat_id of this Part.  # noqa: E501


        :return: The part_cat_id of this Part.  # noqa: E501
        :rtype: int
        """
        return self._part_cat_id

    @part_cat_id.setter
    def part_cat_id(self, part_cat_id):
        """Sets the part_cat_id of this Part.


        :param part_cat_id: The part_cat_id of this Part.  # noqa: E501
        :type: int
        """

        self._part_cat_id = part_cat_id

    @property
    def part_img_url(self):
        """Gets the part_img_url of this Part.  # noqa: E501


        :return: The part_img_url of this Part.  # noqa: E501
        :rtype: str
        """
        return self._part_img_url

    @part_img_url.setter
    def part_img_url(self, part_img_url):
        """Sets the part_img_url of this Part.


        :param part_img_url: The part_img_url of this Part.  # noqa: E501
        :type: str
        """

        self._part_img_url = part_img_url

    @property
    def part_num(self):
        """Gets the part_num of this Part.  # noqa: E501


        :return: The part_num of this Part.  # noqa: E501
        :rtype: str
        """
        return self._part_num

    @part_num.setter
    def part_num(self, part_num):
        """Sets the part_num of this Part.


        :param part_num: The part_num of this Part.  # noqa: E501
        :type: str
        """

        self._part_num = part_num

    @property
    def part_url(self):
        """Gets the part_url of this Part.  # noqa: E501


        :return: The part_url of this Part.  # noqa: E501
        :rtype: str
        """
        return self._part_url

    @part_url.setter
    def part_url(self, part_url):
        """Sets the part_url of this Part.


        :param part_url: The part_url of this Part.  # noqa: E501
        :type: str
        """

        self._part_url = part_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Part):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
