file: Module 
	body: list 
		element: Expr 
			value: Str 
				s: str = 
time module

No:

- Platform specific functions
- sleep. In js currently not possible in browsers
         except via busy loops, we don't do that.
- struct_time CLASS. we work only via the tuple interface of it.
- handling of weird stuff.
    e.g.: In Europe/Simferopool (Ukraine) the UTC offset before 1924 was +2.67

Spec for all below (must have open to read this module):

> https://docs.python.org/3.5/library/time.html


Jul 2016, Gunther Klessinger, Axiros GmbH

		element: Expr 
			value: Call 
				func: Name 
					id: str = __pragma__
					ctx: Load 
				args: list 
					element: Str 
						s: str = nokwargs
				keywords: list 
		element: ImportFrom 
			module: str = org.transcrypt.stubs.browser
			names: list 
				element: alias 
					name: str = __new__
					asname: NoneType = None
			level: int = 0
		element: Assign 
			targets: list 
				element: Name 
					id: str = __date
					ctx: Store 
			value: Call 
				func: Name 
					id: str = __new__
					ctx: Load 
				args: list 
					element: Call 
						func: Name 
							id: str = Date
							ctx: Load 
						args: list 
							element: Num 
								n: int = 0
						keywords: list 
				keywords: list 
		element: Assign 
			targets: list 
				element: Name 
					id: str = __now
					ctx: Store 
			value: Call 
				func: Name 
					id: str = __new__
					ctx: Load 
				args: list 
					element: Call 
						func: Name 
							id: str = Date
							ctx: Load 
						args: list 
						keywords: list 
				keywords: list 
		element: Assign 
			targets: list 
				element: Name 
					id: str = __weekdays
					ctx: Store 
			value: List 
				elts: list 
				ctx: Load 
		element: Assign 
			targets: list 
				element: Name 
					id: str = __weekdays_long
					ctx: Store 
			value: List 
				elts: list 
				ctx: Load 
		element: Assign 
			targets: list 
				element: Name 
					id: str = __d
					ctx: Store 
			value: Call 
				func: Name 
					id: str = __new__
					ctx: Load 
				args: list 
					element: Call 
						func: Name 
							id: str = Date
							ctx: Load 
						args: list 
							element: Num 
								n: int = 1467662339080
						keywords: list 
				keywords: list 
		element: For 
			target: Name 
				id: str = i
				ctx: Store 
			iter: Call 
				func: Name 
					id: str = range
					ctx: Load 
				args: list 
					element: Num 
						n: int = 7
				keywords: list 
			body: list 
				element: For 
					target: Tuple 
						elts: list 
							element: Name 
								id: str = l
								ctx: Store 
							element: Name 
								id: str = s
								ctx: Store 
						ctx: Store 
					iter: Tuple 
						elts: list 
							element: Tuple 
								elts: list 
									element: Name 
										id: str = __weekdays
										ctx: Load 
									element: Str 
										s: str = short
								ctx: Load 
							element: Tuple 
								elts: list 
									element: Name 
										id: str = __weekdays_long
										ctx: Load 
									element: Str 
										s: str = long
								ctx: Load 
						ctx: Load 
					body: list 
						element: Expr 
							value: Call 
								func: Attribute 
									value: Name 
										id: str = l
										ctx: Load 
									attr: str = append
									ctx: Load 
								args: list 
									element: Call 
										func: Attribute 
											value: Call 
												func: Attribute 
													value: Name 
														id: str = __d
														ctx: Load 
													attr: str = toLocaleString
													ctx: Load 
												args: list 
													element: Attribute 
														value: Attribute 
															value: Name 
																id: str = window
																ctx: Load 
															attr: str = navigator
															ctx: Load 
														attr: str = language
														ctx: Load 
													element: Dict 
														keys: list 
															element: Str 
																s: str = weekday
														values: list 
															element: Name 
																id: str = s
																ctx: Load 
												keywords: list 
											attr: str = lower
											ctx: Load 
										args: list 
										keywords: list 
								keywords: list 
					orelse: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = __d
								ctx: Load 
							attr: str = setDate
							ctx: Load 
						args: list 
							element: BinOp 
								left: Call 
									func: Attribute 
										value: Name 
											id: str = __d
											ctx: Load 
										attr: str = getDate
										ctx: Load 
									args: list 
									keywords: list 
								op: Add 
								right: Num 
									n: int = 1
						keywords: list 
			orelse: list 
		element: Assign 
			targets: list 
				element: Name 
					id: str = __months
					ctx: Store 
			value: List 
				elts: list 
				ctx: Load 
		element: Assign 
			targets: list 
				element: Name 
					id: str = __months_long
					ctx: Store 
			value: List 
				elts: list 
				ctx: Load 
		element: Assign 
			targets: list 
				element: Name 
					id: str = __d
					ctx: Store 
			value: Call 
				func: Name 
					id: str = __new__
					ctx: Load 
				args: list 
					element: Call 
						func: Name 
							id: str = Date
							ctx: Load 
						args: list 
							element: Num 
								n: float = 946681200000.0
						keywords: list 
				keywords: list 
		element: For 
			target: Name 
				id: str = i
				ctx: Store 
			iter: Call 
				func: Name 
					id: str = range
					ctx: Load 
				args: list 
					element: Num 
						n: int = 12
				keywords: list 
			body: list 
				element: For 
					target: Tuple 
						elts: list 
							element: Name 
								id: str = l
								ctx: Store 
							element: Name 
								id: str = s
								ctx: Store 
						ctx: Store 
					iter: Tuple 
						elts: list 
							element: Tuple 
								elts: list 
									element: Name 
										id: str = __months
										ctx: Load 
									element: Str 
										s: str = short
								ctx: Load 
							element: Tuple 
								elts: list 
									element: Name 
										id: str = __months_long
										ctx: Load 
									element: Str 
										s: str = long
								ctx: Load 
						ctx: Load 
					body: list 
						element: Expr 
							value: Call 
								func: Attribute 
									value: Name 
										id: str = l
										ctx: Load 
									attr: str = append
									ctx: Load 
								args: list 
									element: Call 
										func: Attribute 
											value: Call 
												func: Attribute 
													value: Name 
														id: str = __d
														ctx: Load 
													attr: str = toLocaleString
													ctx: Load 
												args: list 
													element: Attribute 
														value: Attribute 
															value: Name 
																id: str = window
																ctx: Load 
															attr: str = navigator
															ctx: Load 
														attr: str = language
														ctx: Load 
													element: Dict 
														keys: list 
															element: Str 
																s: str = month
														values: list 
															element: Name 
																id: str = s
																ctx: Load 
												keywords: list 
											attr: str = lower
											ctx: Load 
										args: list 
										keywords: list 
								keywords: list 
					orelse: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = __d
								ctx: Load 
							attr: str = setMonth
							ctx: Load 
						args: list 
							element: BinOp 
								left: Call 
									func: Attribute 
										value: Name 
											id: str = __d
											ctx: Load 
										attr: str = getMonth
										ctx: Load 
									args: list 
									keywords: list 
								op: Add 
								right: Num 
									n: int = 1
						keywords: list 
			orelse: list 
		element: Assign 
			targets: list 
				element: Name 
					id: str = __lu
					ctx: Store 
			value: Dict 
				keys: list 
					element: Str 
						s: str = Y
					element: Str 
						s: str = m
					element: Str 
						s: str = d
					element: Str 
						s: str = H
					element: Str 
						s: str = M
					element: Str 
						s: str = S
				values: list 
					element: Num 
						n: int = 0
					element: Num 
						n: int = 1
					element: Num 
						n: int = 2
					element: Num 
						n: int = 3
					element: Num 
						n: int = 4
					element: Num 
						n: int = 5
		element: FunctionDef 
			name: str = _lsplit
			args: arguments 
				args: list 
					element: arg 
						arg: str = s
						annotation: NoneType = None
					element: arg 
						arg: str = sep
						annotation: NoneType = None
					element: arg 
						arg: str = maxsplit
						annotation: NoneType = None
				vararg: NoneType = None
				kwonlyargs: list 
				kw_defaults: list 
				kwarg: NoneType = None
				defaults: list 
			body: list 
				element: Expr 
					value: Str 
						s: str =  not yet in TS 
				element: If 
					test: Compare 
						left: Name 
							id: str = maxsplit
							ctx: Load 
						ops: list 
							element: Eq 
						comparators: list 
							element: Num 
								n: int = 0
					body: list 
						element: Return 
							value: List 
								elts: list 
									element: Name 
										id: str = s
										ctx: Load 
								ctx: Load 
					orelse: list 
				element: Assign 
					targets: list 
						element: Name 
							id: str = split
							ctx: Store 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = s
								ctx: Load 
							attr: str = split
							ctx: Load 
						args: list 
							element: Name 
								id: str = sep
								ctx: Load 
						keywords: list 
				element: If 
					test: UnaryOp 
						op: Not 
						operand: Name 
							id: str = maxsplit
							ctx: Load 
					body: list 
						element: Return 
							value: Name 
								id: str = split
								ctx: Load 
					orelse: list 
				element: Assign 
					targets: list 
						element: Name 
							id: str = ret
							ctx: Store 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = split
								ctx: Load 
							attr: str = slice
							ctx: Load 
						args: list 
							element: Num 
								n: int = 0
							element: Name 
								id: str = maxsplit
								ctx: Load 
							element: Num 
								n: int = 1
						keywords: list 
				element: If 
					test: Compare 
						left: Call 
							func: Name 
								id: str = len
								ctx: Load 
							args: list 
								element: Name 
									id: str = ret
									ctx: Load 
							keywords: list 
						ops: list 
							element: Eq 
						comparators: list 
							element: Call 
								func: Name 
									id: str = len
									ctx: Load 
								args: list 
									element: Name 
										id: str = split
										ctx: Load 
								keywords: list 
					body: list 
						element: Return 
							value: Name 
								id: str = ret
								ctx: Load 
					orelse: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = ret
								ctx: Load 
							attr: str = append
							ctx: Load 
						args: list 
							element: Call 
								func: Attribute 
									value: Name 
										id: str = sep
										ctx: Load 
									attr: str = join
									ctx: Load 
								args: list 
									element: Subscript 
										value: Name 
											id: str = split
											ctx: Load 
										slice: Slice 
											lower: Name 
												id: str = maxsplit
												ctx: Load 
											upper: NoneType = None
											step: NoneType = None
										ctx: Load 
								keywords: list 
						keywords: list 
				element: Return 
					value: Name 
						id: str = ret
						ctx: Load 
			decorator_list: list 
			returns: NoneType = None
		element: FunctionDef 
			name: str = _local_time_tuple
			args: arguments 
				args: list 
					element: arg 
						arg: str = jd
						annotation: NoneType = None
				vararg: NoneType = None
				kwonlyargs: list 
				kw_defaults: list 
				kwarg: NoneType = None
				defaults: list 
			body: list 
				element: Expr 
					value: Str 
						s: str =  jd: javascript Date object, from unixtimestamp 
				element: Assign 
					targets: list 
						element: Name 
							id: str = res
							ctx: Store 
					value: Tuple 
						elts: list 
							element: Call 
								func: Attribute 
									value: Name 
										id: str = jd
										ctx: Load 
									attr: str = getFullYear
									ctx: Load 
								args: list 
								keywords: list 
							element: BinOp 
								left: Call 
									func: Attribute 
										value: Name 
											id: str = jd
											ctx: Load 
										attr: str = getMonth
										ctx: Load 
									args: list 
									keywords: list 
								op: Add 
								right: Num 
									n: int = 1
							element: Call 
								func: Attribute 
									value: Name 
										id: str = jd
										ctx: Load 
									attr: str = getDate
									ctx: Load 
								args: list 
								keywords: list 
							element: Call 
								func: Attribute 
									value: Name 
										id: str = jd
										ctx: Load 
									attr: str = getHours
									ctx: Load 
								args: list 
								keywords: list 
							element: Call 
								func: Attribute 
									value: Name 
										id: str = jd
										ctx: Load 
									attr: str = getMinutes
									ctx: Load 
								args: list 
								keywords: list 
							element: Call 
								func: Attribute 
									value: Name 
										id: str = jd
										ctx: Load 
									attr: str = getSeconds
									ctx: Load 
								args: list 
								keywords: list 
							element: IfExp 
								test: Compare 
									left: Call 
										func: Attribute 
											value: Name 
												id: str = jd
												ctx: Load 
											attr: str = getDay
											ctx: Load 
										args: list 
										keywords: list 
									ops: list 
										element: Gt 
									comparators: list 
										element: Num 
											n: int = 0
								body: BinOp 
									left: Call 
										func: Attribute 
											value: Name 
												id: str = jd
												ctx: Load 
											attr: str = getDay
											ctx: Load 
										args: list 
										keywords: list 
									op: Sub 
									right: Num 
										n: int = 1
								orelse: Num 
									n: int = 6
							element: Call 
								func: Name 
									id: str = _day_of_year
									ctx: Load 
								args: list 
									element: Name 
										id: str = jd
										ctx: Load 
									element: NameConstant 
										value: bool = True
								keywords: list 
							element: Call 
								func: Name 
									id: str = _daylight_in_effect
									ctx: Load 
								args: list 
									element: Name 
										id: str = jd
										ctx: Load 
								keywords: list 
							element: Call 
								func: Attribute 
									value: Name 
										id: str = jd
										ctx: Load 
									attr: str = getMilliseconds
									ctx: Load 
								args: list 
								keywords: list 
						ctx: Load 
				element: Return 
					value: Name 
						id: str = res
						ctx: Load 
			decorator_list: list 
			returns: NoneType = None
		element: FunctionDef 
			name: str = _utc_time_tuple
			args: arguments 
				args: list 
					element: arg 
						arg: str = jd
						annotation: NoneType = None
				vararg: NoneType = None
				kwonlyargs: list 
				kw_defaults: list 
				kwarg: NoneType = None
				defaults: list 
			body: list 
				element: Expr 
					value: Str 
						s: str =  jd: javascript Date object, from unixtimestamp 
				element: Assign 
					targets: list 
						element: Name 
							id: str = res
							ctx: Store 
					value: Tuple 
						elts: list 
							element: Call 
								func: Attribute 
									value: Name 
										id: str = jd
										ctx: Load 
									attr: str = getUTCFullYear
									ctx: Load 
								args: list 
								keywords: list 
							element: BinOp 
								left: Call 
									func: Attribute 
										value: Name 
											id: str = jd
											ctx: Load 
										attr: str = getUTCMonth
										ctx: Load 
									args: list 
									keywords: list 
								op: Add 
								right: Num 
									n: int = 1
							element: Call 
								func: Attribute 
									value: Name 
										id: str = jd
										ctx: Load 
									attr: str = getUTCDate
									ctx: Load 
								args: list 
								keywords: list 
							element: Call 
								func: Attribute 
									value: Name 
										id: str = jd
										ctx: Load 
									attr: str = getUTCHours
									ctx: Load 
								args: list 
								keywords: list 
							element: Call 
								func: Attribute 
									value: Name 
										id: str = jd
										ctx: Load 
									attr: str = getUTCMinutes
									ctx: Load 
								args: list 
								keywords: list 
							element: Call 
								func: Attribute 
									value: Name 
										id: str = jd
										ctx: Load 
									attr: str = getUTCSeconds
									ctx: Load 
								args: list 
								keywords: list 
							element: BinOp 
								left: Call 
									func: Attribute 
										value: Name 
											id: str = jd
											ctx: Load 
										attr: str = getUTCDay
										ctx: Load 
									args: list 
									keywords: list 
								op: Sub 
								right: Num 
									n: int = 1
							element: Call 
								func: Name 
									id: str = _day_of_year
									ctx: Load 
								args: list 
									element: Name 
										id: str = jd
										ctx: Load 
									element: NameConstant 
										value: bool = False
								keywords: list 
							element: Num 
								n: int = 0
							element: Call 
								func: Attribute 
									value: Name 
										id: str = jd
										ctx: Load 
									attr: str = getUTCMilliseconds
									ctx: Load 
								args: list 
								keywords: list 
						ctx: Load 
				element: Return 
					value: Name 
						id: str = res
						ctx: Load 
			decorator_list: list 
			returns: NoneType = None
		element: FunctionDef 
			name: str = _day_of_year
			args: arguments 
				args: list 
					element: arg 
						arg: str = jd
						annotation: NoneType = None
					element: arg 
						arg: str = local
						annotation: NoneType = None
				vararg: NoneType = None
				kwonlyargs: list 
				kw_defaults: list 
				kwarg: NoneType = None
				defaults: list 
			body: list 
				element: Assign 
					targets: list 
						element: Name 
							id: str = day_offs
							ctx: Store 
					value: Num 
						n: int = 0
				element: If 
					test: Compare 
						left: BinOp 
							left: Call 
								func: Attribute 
									value: Name 
										id: str = jd
										ctx: Load 
									attr: str = getHours
									ctx: Load 
								args: list 
								keywords: list 
							op: Add 
							right: BinOp 
								left: BinOp 
									left: Call 
										func: Attribute 
											value: Name 
												id: str = jd
												ctx: Load 
											attr: str = getTimezoneOffset
											ctx: Load 
										args: list 
										keywords: list 
									op: Mult 
									right: Num 
										n: int = 60
								op: Div 
								right: Num 
									n: int = 3600
						ops: list 
							element: Lt 
						comparators: list 
							element: Num 
								n: int = 0
					body: list 
						element: Assign 
							targets: list 
								element: Name 
									id: str = day_offs
									ctx: Store 
							value: UnaryOp 
								op: USub 
								operand: Num 
									n: int = 1
					orelse: list 
				element: Assign 
					targets: list 
						element: Name 
							id: str = was
							ctx: Store 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = jd
								ctx: Load 
							attr: str = getTime
							ctx: Load 
						args: list 
						keywords: list 
				element: Assign 
					targets: list 
						element: Name 
							id: str = cur
							ctx: Store 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = jd
								ctx: Load 
							attr: str = setHours
							ctx: Load 
						args: list 
							element: Num 
								n: int = 23
						keywords: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = jd
								ctx: Load 
							attr: str = setUTCDate
							ctx: Load 
						args: list 
							element: Num 
								n: int = 1
						keywords: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = jd
								ctx: Load 
							attr: str = setUTCMonth
							ctx: Load 
						args: list 
							element: Num 
								n: int = 0
						keywords: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = jd
								ctx: Load 
							attr: str = setUTCHours
							ctx: Load 
						args: list 
							element: Num 
								n: int = 0
						keywords: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = jd
								ctx: Load 
							attr: str = setUTCMinutes
							ctx: Load 
						args: list 
							element: Num 
								n: int = 0
						keywords: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = jd
								ctx: Load 
							attr: str = setUTCSeconds
							ctx: Load 
						args: list 
							element: Num 
								n: int = 0
						keywords: list 
				element: Assign 
					targets: list 
						element: Name 
							id: str = res
							ctx: Store 
					value: Call 
						func: Name 
							id: str = round
							ctx: Load 
						args: list 
							element: BinOp 
								left: BinOp 
									left: Name 
										id: str = cur
										ctx: Load 
									op: Sub 
									right: Name 
										id: str = jd
										ctx: Load 
								op: Div 
								right: Num 
									n: int = 86400000
						keywords: list 
				element: If 
					test: UnaryOp 
						op: Not 
						operand: Name 
							id: str = local
							ctx: Load 
					body: list 
						element: AugAssign 
							target: Name 
								id: str = res
								ctx: Store 
							op: Add 
							value: Name 
								id: str = day_offs
								ctx: Load 
					orelse: list 
				element: If 
					test: Compare 
						left: Name 
							id: str = res
							ctx: Load 
						ops: list 
							element: Eq 
						comparators: list 
							element: Num 
								n: int = 0
					body: list 
						element: Assign 
							targets: list 
								element: Name 
									id: str = res
									ctx: Store 
							value: Num 
								n: int = 365
						element: Expr 
							value: Call 
								func: Attribute 
									value: Name 
										id: str = jd
										ctx: Load 
									attr: str = setTime
									ctx: Load 
								args: list 
									element: BinOp 
										left: Call 
											func: Attribute 
												value: Name 
													id: str = jd
													ctx: Load 
												attr: str = getTime
												ctx: Load 
											args: list 
											keywords: list 
										op: Sub 
										right: Num 
											n: int = 86400
								keywords: list 
						element: Assign 
							targets: list 
								element: Name 
									id: str = last_year
									ctx: Store 
							value: Call 
								func: Attribute 
									value: Name 
										id: str = jd
										ctx: Load 
									attr: str = getUTCFullYear
									ctx: Load 
								args: list 
								keywords: list 
						element: If 
							test: Call 
								func: Name 
									id: str = _is_leap
									ctx: Load 
								args: list 
									element: Name 
										id: str = last_year
										ctx: Load 
								keywords: list 
							body: list 
								element: Assign 
									targets: list 
										element: Name 
											id: str = res
											ctx: Store 
									value: Num 
										n: int = 366
							orelse: list 
					orelse: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = jd
								ctx: Load 
							attr: str = setTime
							ctx: Load 
						args: list 
							element: Name 
								id: str = was
								ctx: Load 
						keywords: list 
				element: Return 
					value: Name 
						id: str = res
						ctx: Load 
			decorator_list: list 
			returns: NoneType = None
		element: FunctionDef 
			name: str = _is_leap
			args: arguments 
				args: list 
					element: arg 
						arg: str = year
						annotation: NoneType = None
				vararg: NoneType = None
				kwonlyargs: list 
				kw_defaults: list 
				kwarg: NoneType = None
				defaults: list 
			body: list 
				element: Return 
					value: BoolOp 
						op: And 
						values: list 
							element: Compare 
								left: BinOp 
									left: Name 
										id: str = year
										ctx: Load 
									op: Mod 
									right: Num 
										n: int = 4
								ops: list 
									element: Eq 
								comparators: list 
									element: Num 
										n: int = 0
							element: BoolOp 
								op: Or 
								values: list 
									element: Compare 
										left: BinOp 
											left: Name 
												id: str = year
												ctx: Load 
											op: Mod 
											right: Num 
												n: int = 100
										ops: list 
											element: NotEq 
										comparators: list 
											element: Num 
												n: int = 0
									element: Compare 
										left: BinOp 
											left: Name 
												id: str = year
												ctx: Load 
											op: Mod 
											right: Num 
												n: int = 400
										ops: list 
											element: Eq 
										comparators: list 
											element: Num 
												n: int = 0
			decorator_list: list 
			returns: NoneType = None
		element: FunctionDef 
			name: str = __jan_jun_tz
			args: arguments 
				args: list 
					element: arg 
						arg: str = t
						annotation: NoneType = None
					element: arg 
						arg: str = func
						annotation: NoneType = None
				vararg: NoneType = None
				kwonlyargs: list 
				kw_defaults: list 
				kwarg: NoneType = None
				defaults: list 
			body: list 
				element: Expr 
					value: Str 
						s: str =  information about local jan and jun month of a t's year
    default is to deliver timezone offset, but a function can be handed to us,
    which we'll run on those two months
    
				element: Assign 
					targets: list 
						element: Name 
							id: str = was
							ctx: Store 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = t
								ctx: Load 
							attr: str = getTime
							ctx: Load 
						args: list 
						keywords: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = t
								ctx: Load 
							attr: str = setDate
							ctx: Load 
						args: list 
							element: Num 
								n: int = 1
						keywords: list 
				element: Assign 
					targets: list 
						element: Name 
							id: str = res
							ctx: Store 
					value: List 
						elts: list 
						ctx: Load 
				element: For 
					target: Name 
						id: str = m
						ctx: Store 
					iter: Tuple 
						elts: list 
							element: Num 
								n: int = 0
							element: Num 
								n: int = 6
						ctx: Load 
					body: list 
						element: Expr 
							value: Call 
								func: Attribute 
									value: Name 
										id: str = t
										ctx: Load 
									attr: str = setMonth
									ctx: Load 
								args: list 
									element: Name 
										id: str = m
										ctx: Load 
								keywords: list 
						element: If 
							test: UnaryOp 
								op: Not 
								operand: Name 
									id: str = func
									ctx: Load 
							body: list 
								element: Expr 
									value: Call 
										func: Attribute 
											value: Name 
												id: str = res
												ctx: Load 
											attr: str = append
											ctx: Load 
										args: list 
											element: Call 
												func: Attribute 
													value: Name 
														id: str = t
														ctx: Load 
													attr: str = getTimezoneOffset
													ctx: Load 
												args: list 
												keywords: list 
										keywords: list 
							orelse: list 
								element: Expr 
									value: Call 
										func: Attribute 
											value: Name 
												id: str = res
												ctx: Load 
											attr: str = append
											ctx: Load 
										args: list 
											element: Call 
												func: Name 
													id: str = func
													ctx: Load 
												args: list 
													element: Name 
														id: str = t
														ctx: Load 
												keywords: list 
										keywords: list 
					orelse: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = t
								ctx: Load 
							attr: str = setTime
							ctx: Load 
						args: list 
							element: Name 
								id: str = was
								ctx: Load 
						keywords: list 
				element: Return 
					value: Name 
						id: str = res
						ctx: Load 
			decorator_list: list 
			returns: NoneType = None
		element: FunctionDef 
			name: str = _daylight
			args: arguments 
				args: list 
					element: arg 
						arg: str = t
						annotation: NoneType = None
				vararg: NoneType = None
				kwonlyargs: list 
				kw_defaults: list 
				kwarg: NoneType = None
				defaults: list 
			body: list 
				element: Expr 
					value: Str 
						s: str = 
    http://stackoverflow.com/questions/11887934/
    check-if-daylight-saving-time-is-in-effect-and-if-it-is-for-how-many-hours

    return 0 or 1 like python
    CAUTION: https://docs.python.org/2/library/time.html#time.daylight:
    "Nonzero if a DST timezone is DEFINED." (but not necessarily in effect!!)
    -> we just check if there is a delta of tz offsets in june an jan of the
    year of t:
    
				element: Assign 
					targets: list 
						element: Name 
							id: str = jj
							ctx: Store 
					value: Call 
						func: Name 
							id: str = __jan_jun_tz
							ctx: Load 
						args: list 
							element: Name 
								id: str = t
								ctx: Load 
						keywords: list 
				element: If 
					test: Compare 
						left: Subscript 
							value: Name 
								id: str = jj
								ctx: Load 
							slice: Index 
								value: Num 
									n: int = 0
							ctx: Load 
						ops: list 
							element: NotEq 
						comparators: list 
							element: Subscript 
								value: Name 
									id: str = jj
									ctx: Load 
								slice: Index 
									value: Num 
										n: int = 1
								ctx: Load 
					body: list 
						element: Return 
							value: Num 
								n: int = 1
					orelse: list 
				element: Return 
					value: Num 
						n: int = 0
			decorator_list: list 
			returns: NoneType = None
		element: FunctionDef 
			name: str = _daylight_in_effect
			args: arguments 
				args: list 
					element: arg 
						arg: str = t
						annotation: NoneType = None
				vararg: NoneType = None
				kwonlyargs: list 
				kw_defaults: list 
				kwarg: NoneType = None
				defaults: list 
			body: list 
				element: Assign 
					targets: list 
						element: Name 
							id: str = jj
							ctx: Store 
					value: Call 
						func: Name 
							id: str = __jan_jun_tz
							ctx: Load 
						args: list 
							element: Name 
								id: str = t
								ctx: Load 
						keywords: list 
				element: If 
					test: Compare 
						left: Call 
							func: Name 
								id: str = min
								ctx: Load 
							args: list 
								element: Subscript 
									value: Name 
										id: str = jj
										ctx: Load 
									slice: Index 
										value: Num 
											n: int = 0
									ctx: Load 
								element: Subscript 
									value: Name 
										id: str = jj
										ctx: Load 
									slice: Index 
										value: Num 
											n: int = 1
									ctx: Load 
							keywords: list 
						ops: list 
							element: Eq 
						comparators: list 
							element: Call 
								func: Attribute 
									value: Name 
										id: str = t
										ctx: Load 
									attr: str = getTimezoneOffset
									ctx: Load 
								args: list 
								keywords: list 
					body: list 
						element: Return 
							value: Num 
								n: int = 1
					orelse: list 
				element: Return 
					value: Num 
						n: int = 0
			decorator_list: list 
			returns: NoneType = None
		element: FunctionDef 
			name: str = _timezone
			args: arguments 
				args: list 
					element: arg 
						arg: str = t
						annotation: NoneType = None
				vararg: NoneType = None
				kwonlyargs: list 
				kw_defaults: list 
				kwarg: NoneType = None
				defaults: list 
			body: list 
				element: Assign 
					targets: list 
						element: Name 
							id: str = jj
							ctx: Store 
					value: Call 
						func: Name 
							id: str = __jan_jun_tz
							ctx: Load 
						args: list 
							element: Name 
								id: str = t
								ctx: Load 
						keywords: list 
				element: Return 
					value: Call 
						func: Name 
							id: str = max
							ctx: Load 
						args: list 
							element: Subscript 
								value: Name 
									id: str = jj
									ctx: Load 
								slice: Index 
									value: Num 
										n: int = 0
								ctx: Load 
							element: Subscript 
								value: Name 
									id: str = jj
									ctx: Load 
								slice: Index 
									value: Num 
										n: int = 1
								ctx: Load 
						keywords: list 
			decorator_list: list 
			returns: NoneType = None
		element: FunctionDef 
			name: str = __tzn
			args: arguments 
				args: list 
					element: arg 
						arg: str = t
						annotation: NoneType = None
				vararg: NoneType = None
				kwonlyargs: list 
				kw_defaults: list 
				kwarg: NoneType = None
				defaults: list 
			body: list 
				element: Try 
					body: list 
						element: Return 
							value: Subscript 
								value: Call 
									func: Attribute 
										value: Subscript 
											value: Call 
												func: Attribute 
													value: Call 
														func: Name 
															id: str = str
															ctx: Load 
														args: list 
															element: Name 
																id: str = t
																ctx: Load 
														keywords: list 
													attr: str = split
													ctx: Load 
												args: list 
													element: Str 
														s: str = (
												keywords: list 
											slice: Index 
												value: Num 
													n: int = 1
											ctx: Load 
										attr: str = split
										ctx: Load 
									args: list 
										element: Str 
											s: str = )
									keywords: list 
								slice: Index 
									value: Num 
										n: int = 0
								ctx: Load 
					handlers: list 
						element: ExceptHandler 
							type: NoneType = None
							name: NoneType = None
							body: list 
								element: Return 
									value: Str 
										s: str = n.a.
					orelse: list 
					finalbody: list 
			decorator_list: list 
			returns: NoneType = None
		element: FunctionDef 
			name: str = _tzname
			args: arguments 
				args: list 
					element: arg 
						arg: str = t
						annotation: NoneType = None
				vararg: NoneType = None
				kwonlyargs: list 
				kw_defaults: list 
				kwarg: NoneType = None
				defaults: list 
			body: list 
				element: Expr 
					value: Str 
						s: str = the first is the name of the local non-DST timezone,
	the second is the name of the local DST timezone.
				element: Assign 
					targets: list 
						element: Name 
							id: str = cn
							ctx: Store 
					value: Call 
						func: Name 
							id: str = __tzn
							ctx: Load 
						args: list 
							element: Name 
								id: str = t
								ctx: Load 
						keywords: list 
				element: Assign 
					targets: list 
						element: Name 
							id: str = ret
							ctx: Store 
					value: List 
						elts: list 
							element: Name 
								id: str = cn
								ctx: Load 
							element: Name 
								id: str = cn
								ctx: Load 
						ctx: Load 
				element: Assign 
					targets: list 
						element: Name 
							id: str = jj
							ctx: Store 
					value: Call 
						func: Name 
							id: str = __jan_jun_tz
							ctx: Load 
						args: list 
							element: Name 
								id: str = t
								ctx: Load 
							element: Name 
								id: str = __tzn
								ctx: Load 
						keywords: list 
				element: Assign 
					targets: list 
						element: Name 
							id: str = ind
							ctx: Store 
					value: Num 
						n: int = 0
				element: If 
					test: UnaryOp 
						op: Not 
						operand: Call 
							func: Name 
								id: str = _daylight_in_effect
								ctx: Load 
							args: list 
								element: Name 
									id: str = t
									ctx: Load 
							keywords: list 
					body: list 
						element: Assign 
							targets: list 
								element: Name 
									id: str = ind
									ctx: Store 
							value: Num 
								n: int = 1
					orelse: list 
				element: For 
					target: Name 
						id: str = i
						ctx: Store 
					iter: Name 
						id: str = jj
						ctx: Load 
					body: list 
						element: If 
							test: Compare 
								left: Name 
									id: str = i
									ctx: Load 
								ops: list 
									element: NotEq 
								comparators: list 
									element: Name 
										id: str = cn
										ctx: Load 
							body: list 
								element: Assign 
									targets: list 
										element: Subscript 
											value: Name 
												id: str = ret
												ctx: Load 
											slice: Index 
												value: Name 
													id: str = ind
													ctx: Load 
											ctx: Store 
									value: Name 
										id: str = i
										ctx: Load 
							orelse: list 
					orelse: list 
				element: Return 
					value: Call 
						func: Name 
							id: str = tuple
							ctx: Load 
						args: list 
							element: Name 
								id: str = ret
								ctx: Load 
						keywords: list 
			decorator_list: list 
			returns: NoneType = None
		element: Assign 
			targets: list 
				element: Name 
					id: str = altzone
					ctx: Store 
			value: Call 
				func: Attribute 
					value: Name 
						id: str = __now
						ctx: Load 
					attr: str = getTimezoneOffset
					ctx: Load 
				args: list 
				keywords: list 
		element: If 
			test: UnaryOp 
				op: Not 
				operand: Call 
					func: Name 
						id: str = _daylight_in_effect
						ctx: Load 
					args: list 
						element: Name 
							id: str = __now
							ctx: Load 
					keywords: list 
			body: list 
				element: Assign 
					targets: list 
						element: Name 
							id: str = _jj
							ctx: Store 
					value: Call 
						func: Name 
							id: str = __jan_jun_tz
							ctx: Load 
						args: list 
							element: Name 
								id: str = __now
								ctx: Load 
						keywords: list 
				element: Assign 
					targets: list 
						element: Name 
							id: str = altzone
							ctx: Store 
					value: IfExp 
						test: Compare 
							left: Name 
								id: str = altzone
								ctx: Load 
							ops: list 
								element: Eq 
							comparators: list 
								element: Subscript 
									value: Name 
										id: str = _jj
										ctx: Load 
									slice: Index 
										value: Num 
											n: int = 1
									ctx: Load 
						body: Subscript 
							value: Name 
								id: str = _jj
								ctx: Load 
							slice: Index 
								value: Num 
									n: int = 0
							ctx: Load 
						orelse: Subscript 
							value: Name 
								id: str = _jj
								ctx: Load 
							slice: Index 
								value: Num 
									n: int = 1
							ctx: Load 
			orelse: list 
		element: Assign 
			targets: list 
				element: Name 
					id: str = altzone
					ctx: Store 
			value: BinOp 
				left: Name 
					id: str = altzone
					ctx: Load 
				op: Mult 
				right: Num 
					n: int = 60
		element: Assign 
			targets: list 
				element: Name 
					id: str = timezone
					ctx: Store 
			value: BinOp 
				left: Call 
					func: Name 
						id: str = _timezone
						ctx: Load 
					args: list 
						element: Name 
							id: str = __now
							ctx: Load 
					keywords: list 
				op: Mult 
				right: Num 
					n: int = 60
		element: Assign 
			targets: list 
				element: Name 
					id: str = daylight
					ctx: Store 
			value: Call 
				func: Name 
					id: str = _daylight
					ctx: Load 
				args: list 
					element: Name 
						id: str = __now
						ctx: Load 
				keywords: list 
		element: Assign 
			targets: list 
				element: Name 
					id: str = tzname
					ctx: Store 
			value: Call 
				func: Name 
					id: str = _tzname
					ctx: Load 
				args: list 
					element: Name 
						id: str = __now
						ctx: Load 
				keywords: list 
		element: FunctionDef 
			name: str = time
			args: arguments 
				args: list 
				vararg: NoneType = None
				kwonlyargs: list 
				kw_defaults: list 
				kwarg: NoneType = None
				defaults: list 
			body: list 
				element: Expr 
					value: Str 
						s: str = 
    time() -> floating point number

Return the current time in seconds
    since the Epoch.
    Fractions of a second may be present if the system clock provides them.
    
				element: Return 
					value: BinOp 
						left: Call 
							func: Attribute 
								value: Name 
									id: str = Date
									ctx: Load 
								attr: str = now
								ctx: Load 
							args: list 
							keywords: list 
						op: Div 
						right: Num 
							n: int = 1000
			decorator_list: list 
			returns: NoneType = None
		element: FunctionDef 
			name: str = asctime
			args: arguments 
				args: list 
					element: arg 
						arg: str = t
						annotation: NoneType = None
				vararg: NoneType = None
				kwonlyargs: list 
				kw_defaults: list 
				kwarg: NoneType = None
				defaults: list 
			body: list 
				element: Return 
					value: Call 
						func: Name 
							id: str = strftime
							ctx: Load 
						args: list 
							element: Str 
								s: str = %a %b %d %H:%M:%S %Y
							element: Name 
								id: str = t
								ctx: Load 
						keywords: list 
			decorator_list: list 
			returns: NoneType = None
		element: FunctionDef 
			name: str = mktime
			args: arguments 
				args: list 
					element: arg 
						arg: str = t
						annotation: NoneType = None
				vararg: NoneType = None
				kwonlyargs: list 
				kw_defaults: list 
				kwarg: NoneType = None
				defaults: list 
			body: list 
				element: Expr 
					value: Str 
						s: str =  inverse of localtime 
				element: Assign 
					targets: list 
						element: Name 
							id: str = d
							ctx: Store 
					value: Call 
						func: Name 
							id: str = __new__
							ctx: Load 
						args: list 
							element: Call 
								func: Name 
									id: str = Date
									ctx: Load 
								args: list 
									element: Subscript 
										value: Name 
											id: str = t
											ctx: Load 
										slice: Index 
											value: Num 
												n: int = 0
										ctx: Load 
									element: BinOp 
										left: Subscript 
											value: Name 
												id: str = t
												ctx: Load 
											slice: Index 
												value: Num 
													n: int = 1
											ctx: Load 
										op: Sub 
										right: Num 
											n: int = 1
									element: Subscript 
										value: Name 
											id: str = t
											ctx: Load 
										slice: Index 
											value: Num 
												n: int = 2
										ctx: Load 
									element: Subscript 
										value: Name 
											id: str = t
											ctx: Load 
										slice: Index 
											value: Num 
												n: int = 3
										ctx: Load 
									element: Subscript 
										value: Name 
											id: str = t
											ctx: Load 
										slice: Index 
											value: Num 
												n: int = 4
										ctx: Load 
									element: Subscript 
										value: Name 
											id: str = t
											ctx: Load 
										slice: Index 
											value: Num 
												n: int = 5
										ctx: Load 
									element: Num 
										n: int = 0
								keywords: list 
						keywords: list 
				element: Return 
					value: BinOp 
						left: BinOp 
							left: Name 
								id: str = d
								ctx: Load 
							op: Sub 
							right: Num 
								n: int = 0
						op: Div 
						right: Num 
							n: int = 1000
			decorator_list: list 
			returns: NoneType = None
		element: FunctionDef 
			name: str = ctime
			args: arguments 
				args: list 
					element: arg 
						arg: str = seconds
						annotation: NoneType = None
				vararg: NoneType = None
				kwonlyargs: list 
				kw_defaults: list 
				kwarg: NoneType = None
				defaults: list 
			body: list 
				element: Expr 
					value: Str 
						s: str = 
    ctime(seconds) -> string

    Convert a time in seconds since the Epoch to a string in local time.
    This is equivalent to asctime(localtime(seconds)). When the time tuple is
    not present, current time as returned by localtime() is used.'
    
				element: If 
					test: UnaryOp 
						op: Not 
						operand: Name 
							id: str = seconds
							ctx: Load 
					body: list 
						element: Assign 
							targets: list 
								element: Name 
									id: str = seconds
									ctx: Store 
							value: Call 
								func: Name 
									id: str = time
									ctx: Load 
								args: list 
								keywords: list 
					orelse: list 
				element: Return 
					value: Call 
						func: Name 
							id: str = asctime
							ctx: Load 
						args: list 
							element: Call 
								func: Name 
									id: str = localtime
									ctx: Load 
								args: list 
									element: Name 
										id: str = seconds
										ctx: Load 
								keywords: list 
						keywords: list 
			decorator_list: list 
			returns: NoneType = None
		element: FunctionDef 
			name: str = localtime
			args: arguments 
				args: list 
					element: arg 
						arg: str = seconds
						annotation: NoneType = None
				vararg: NoneType = None
				kwonlyargs: list 
				kw_defaults: list 
				kwarg: NoneType = None
				defaults: list 
			body: list 
				element: Expr 
					value: Str 
						s: str = 
    localtime([seconds]) -> (tm_year,tm_mon,tm_mday,tm_hour,tm_min,
                          tm_sec,tm_wday,tm_yday,tm_isdst)

    Convert seconds since the Epoch to a time tuple expressing local time.
    When 'seconds' is not passed in, convert the current time instead.
    
				element: If 
					test: UnaryOp 
						op: Not 
						operand: Name 
							id: str = seconds
							ctx: Load 
					body: list 
						element: Assign 
							targets: list 
								element: Name 
									id: str = seconds
									ctx: Store 
							value: Call 
								func: Name 
									id: str = time
									ctx: Load 
								args: list 
								keywords: list 
					orelse: list 
				element: Return 
					value: Call 
						func: Name 
							id: str = gmtime
							ctx: Load 
						args: list 
							element: Name 
								id: str = seconds
								ctx: Load 
							element: NameConstant 
								value: bool = True
						keywords: list 
			decorator_list: list 
			returns: NoneType = None
		element: FunctionDef 
			name: str = gmtime
			args: arguments 
				args: list 
					element: arg 
						arg: str = seconds
						annotation: NoneType = None
					element: arg 
						arg: str = localtime
						annotation: NoneType = None
				vararg: NoneType = None
				kwonlyargs: list 
				kw_defaults: list 
				kwarg: NoneType = None
				defaults: list 
			body: list 
				element: Expr 
					value: Str 
						s: str = 
    localtime([seconds]) -> (tm_year,tm_mon,tm_mday,tm_hour,tm_min,
                          tm_sec,tm_wday,tm_yday,tm_isdst)

    Convert seconds since the Epoch to a time tuple expressing local time.
    When 'seconds' is not passed in, convert the current time instead.
    
				element: If 
					test: UnaryOp 
						op: Not 
						operand: Name 
							id: str = seconds
							ctx: Load 
					body: list 
						element: Assign 
							targets: list 
								element: Name 
									id: str = seconds
									ctx: Store 
							value: Call 
								func: Name 
									id: str = time
									ctx: Load 
								args: list 
								keywords: list 
					orelse: list 
				element: Assign 
					targets: list 
						element: Name 
							id: str = millis
							ctx: Store 
					value: BinOp 
						left: Name 
							id: str = seconds
							ctx: Load 
						op: Mult 
						right: Num 
							n: int = 1000
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = __date
								ctx: Load 
							attr: str = setTime
							ctx: Load 
						args: list 
							element: Name 
								id: str = millis
								ctx: Load 
						keywords: list 
				element: If 
					test: Name 
						id: str = localtime
						ctx: Load 
					body: list 
						element: Assign 
							targets: list 
								element: Name 
									id: str = t
									ctx: Store 
							value: Call 
								func: Name 
									id: str = _local_time_tuple
									ctx: Load 
								args: list 
									element: Name 
										id: str = __date
										ctx: Load 
								keywords: list 
					orelse: list 
						element: Assign 
							targets: list 
								element: Name 
									id: str = t
									ctx: Store 
							value: Call 
								func: Name 
									id: str = _utc_time_tuple
									ctx: Load 
								args: list 
									element: Name 
										id: str = __date
										ctx: Load 
								keywords: list 
				element: Return 
					value: Subscript 
						value: Name 
							id: str = t
							ctx: Load 
						slice: Slice 
							lower: NoneType = None
							upper: Num 
								n: int = 9
							step: NoneType = None
						ctx: Load 
			decorator_list: list 
			returns: NoneType = None
		element: FunctionDef 
			name: str = strptime
			args: arguments 
				args: list 
					element: arg 
						arg: str = string
						annotation: NoneType = None
					element: arg 
						arg: str = format
						annotation: NoneType = None
				vararg: NoneType = None
				kwonlyargs: list 
				kw_defaults: list 
				kwarg: NoneType = None
				defaults: list 
			body: list 
				element: Expr 
					value: Str 
						s: str = 
    strptime(string, format) -> struct_time

    Parse a string to a time tuple according to a format specification.
    See the library reference manual for formatting codes (same as
            strftime()).

    Commonly used format codes:

        %Y  Year with century as a decimal number.
        %m  Month as a decimal number [01,12].
        %d  Day of the month as a decimal number [01,31].
        %H  Hour (24-hour clock) as a decimal number [00,23].
        %M  Minute as a decimal number [00,59].
        %S  Second as a decimal number [00,61].
        %z  Time zone offset from UTC.
        %a  Locale's abbreviated weekday name.
        %A  Locale's full weekday name.
        %b  Locale's abbreviated month name.
        %B  Locale's full month name.
        %c  Locale's appropriate date and time representation.
        %I  Hour (12-hour clock) as a decimal number [01,12].
        %p  Locale's equivalent of either AM or PM.

        Tradoffs of this Transcrypt implementation:

        1. platform specific codes not supported
        2. %% and %c not supported
        
				element: If 
					test: UnaryOp 
						op: Not 
						operand: Name 
							id: str = format
							ctx: Load 
					body: list 
						element: Assign 
							targets: list 
								element: Name 
									id: str = format
									ctx: Store 
							value: Str 
								s: str = %a %b %d %H:%M:%S %Y
					orelse: list 
				element: Assign 
					targets: list 
						element: Tuple 
							elts: list 
								element: Name 
									id: str = ts
									ctx: Store 
								element: Name 
									id: str = fmt
									ctx: Store 
							ctx: Store 
					value: Tuple 
						elts: list 
							element: Name 
								id: str = string
								ctx: Load 
							element: Name 
								id: str = format
								ctx: Load 
						ctx: Load 
				element: FunctionDef 
					name: str = get_next
					args: arguments 
						args: list 
							element: arg 
								arg: str = fmt
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Expr 
							value: Str 
								s: str =  returns next directive, next seperator, rest of format str
						element: FunctionDef 
							name: str = get_sep
							args: arguments 
								args: list 
									element: arg 
										arg: str = fmt
										annotation: NoneType = None
								vararg: NoneType = None
								kwonlyargs: list 
								kw_defaults: list 
								kwarg: NoneType = None
								defaults: list 
							body: list 
								element: Assign 
									targets: list 
										element: Name 
											id: str = res
											ctx: Store 
									value: List 
										elts: list 
										ctx: Load 
								element: If 
									test: UnaryOp 
										op: Not 
										operand: Name 
											id: str = fmt
											ctx: Load 
									body: list 
										element: Return 
											value: Tuple 
												elts: list 
													element: Str 
														s: str = 
													element: Str 
														s: str = 
												ctx: Load 
									orelse: list 
								element: For 
									target: Name 
										id: str = i
										ctx: Store 
									iter: Call 
										func: Name 
											id: str = range
											ctx: Load 
										args: list 
											element: BinOp 
												left: Call 
													func: Name 
														id: str = len
														ctx: Load 
													args: list 
														element: Name 
															id: str = fmt
															ctx: Load 
													keywords: list 
												op: Sub 
												right: Num 
													n: int = 1
										keywords: list 
									body: list 
										element: Assign 
											targets: list 
												element: Name 
													id: str = c
													ctx: Store 
											value: Subscript 
												value: Name 
													id: str = fmt
													ctx: Load 
												slice: Index 
													value: Name 
														id: str = i
														ctx: Load 
												ctx: Load 
										element: If 
											test: Compare 
												left: Name 
													id: str = c
													ctx: Load 
												ops: list 
													element: Eq 
												comparators: list 
													element: Str 
														s: str = %
											body: list 
												element: Break 
											orelse: list 
										element: Expr 
											value: Call 
												func: Attribute 
													value: Name 
														id: str = res
														ctx: Load 
													attr: str = append
													ctx: Load 
												args: list 
													element: Name 
														id: str = c
														ctx: Load 
												keywords: list 
									orelse: list 
								element: Return 
									value: Tuple 
										elts: list 
											element: Call 
												func: Attribute 
													value: Str 
														s: str = 
													attr: str = join
													ctx: Load 
												args: list 
													element: Name 
														id: str = res
														ctx: Load 
												keywords: list 
											element: Subscript 
												value: Name 
													id: str = fmt
													ctx: Load 
												slice: Slice 
													lower: Name 
														id: str = i
														ctx: Load 
													upper: NoneType = None
													step: NoneType = None
												ctx: Load 
										ctx: Load 
							decorator_list: list 
							returns: NoneType = None
						element: Assign 
							targets: list 
								element: Tuple 
									elts: list 
										element: Name 
											id: str = d
											ctx: Store 
										element: Name 
											id: str = sep
											ctx: Store 
										element: Name 
											id: str = f
											ctx: Store 
									ctx: Store 
							value: Tuple 
								elts: list 
									element: NameConstant 
										value: NoneType = None
									element: NameConstant 
										value: NoneType = None
									element: NameConstant 
										value: NoneType = None
								ctx: Load 
						element: If 
							test: Name 
								id: str = fmt
								ctx: Load 
							body: list 
								element: If 
									test: Compare 
										left: Subscript 
											value: Name 
												id: str = fmt
												ctx: Load 
											slice: Index 
												value: Num 
													n: int = 0
											ctx: Load 
										ops: list 
											element: Eq 
										comparators: list 
											element: Str 
												s: str = %
									body: list 
										element: Assign 
											targets: list 
												element: Name 
													id: str = d
													ctx: Store 
											value: Subscript 
												value: Name 
													id: str = fmt
													ctx: Load 
												slice: Index 
													value: Num 
														n: int = 1
												ctx: Load 
										element: Assign 
											targets: list 
												element: Tuple 
													elts: list 
														element: Name 
															id: str = sep
															ctx: Store 
														element: Name 
															id: str = f
															ctx: Store 
													ctx: Store 
											value: Call 
												func: Name 
													id: str = get_sep
													ctx: Load 
												args: list 
													element: Subscript 
														value: Name 
															id: str = fmt
															ctx: Load 
														slice: Slice 
															lower: Num 
																n: int = 2
															upper: NoneType = None
															step: NoneType = None
														ctx: Load 
												keywords: list 
									orelse: list 
										element: Assign 
											targets: list 
												element: Tuple 
													elts: list 
														element: Name 
															id: str = sep
															ctx: Store 
														element: Name 
															id: str = f
															ctx: Store 
													ctx: Store 
											value: Call 
												func: Name 
													id: str = get_sep
													ctx: Load 
												args: list 
													element: Name 
														id: str = fmt
														ctx: Load 
												keywords: list 
							orelse: list 
						element: Return 
							value: Tuple 
								elts: list 
									element: Name 
										id: str = d
										ctx: Load 
									element: Name 
										id: str = sep
										ctx: Load 
									element: Name 
										id: str = f
										ctx: Load 
								ctx: Load 
					decorator_list: list 
					returns: NoneType = None
				element: Assign 
					targets: list 
						element: Name 
							id: str = dir_val
							ctx: Store 
					value: Dict 
						keys: list 
						values: list 
				element: While 
					test: Name 
						id: str = ts
						ctx: Load 
					body: list 
						element: Assign 
							targets: list 
								element: Tuple 
									elts: list 
										element: Name 
											id: str = d
											ctx: Store 
										element: Name 
											id: str = sep
											ctx: Store 
										element: Name 
											id: str = fmt
											ctx: Store 
									ctx: Store 
							value: Call 
								func: Name 
									id: str = get_next
									ctx: Load 
								args: list 
									element: Name 
										id: str = fmt
										ctx: Load 
								keywords: list 
						element: If 
							test: Compare 
								left: Name 
									id: str = sep
									ctx: Load 
								ops: list 
									element: Eq 
								comparators: list 
									element: Str 
										s: str = 
							body: list 
								element: Assign 
									targets: list 
										element: Name 
											id: str = lv
											ctx: Store 
									value: NameConstant 
										value: NoneType = None
								element: If 
									test: Name 
										id: str = d
										ctx: Load 
									body: list 
										element: Assign 
											targets: list 
												element: Name 
													id: str = l
													ctx: Store 
											value: UnaryOp 
												op: USub 
												operand: Num 
													n: int = 1
										element: If 
											test: Compare 
												left: Name 
													id: str = d
													ctx: Load 
												ops: list 
													element: Eq 
												comparators: list 
													element: Str 
														s: str = Y
											body: list 
												element: Assign 
													targets: list 
														element: Name 
															id: str = l
															ctx: Store 
													value: Num 
														n: int = 4
											orelse: list 
												element: If 
													test: Compare 
														left: Name 
															id: str = d
															ctx: Load 
														ops: list 
															element: Eq 
														comparators: list 
															element: Str 
																s: str = a
													body: list 
														element: Assign 
															targets: list 
																element: Name 
																	id: str = l
																	ctx: Store 
															value: Call 
																func: Name 
																	id: str = len
																	ctx: Load 
																args: list 
																	element: Subscript 
																		value: Name 
																			id: str = __weekdays
																			ctx: Load 
																		slice: Index 
																			value: Num 
																				n: int = 0
																		ctx: Load 
																keywords: list 
													orelse: list 
														element: If 
															test: Compare 
																left: Name 
																	id: str = d
																	ctx: Load 
																ops: list 
																	element: Eq 
																comparators: list 
																	element: Str 
																		s: str = A
															body: list 
																element: Assign 
																	targets: list 
																		element: Name 
																			id: str = l
																			ctx: Store 
																	value: Call 
																		func: Name 
																			id: str = len
																			ctx: Load 
																		args: list 
																			element: Subscript 
																				value: Name 
																					id: str = __weekdays_long
																					ctx: Load 
																				slice: Index 
																					value: Num 
																						n: int = 0
																				ctx: Load 
																		keywords: list 
															orelse: list 
																element: If 
																	test: Compare 
																		left: Name 
																			id: str = d
																			ctx: Load 
																		ops: list 
																			element: Eq 
																		comparators: list 
																			element: Str 
																				s: str = b
																	body: list 
																		element: Assign 
																			targets: list 
																				element: Name 
																					id: str = l
																					ctx: Store 
																			value: Call 
																				func: Name 
																					id: str = len
																					ctx: Load 
																				args: list 
																					element: Subscript 
																						value: Name 
																							id: str = __months
																							ctx: Load 
																						slice: Index 
																							value: Num 
																								n: int = 0
																						ctx: Load 
																				keywords: list 
																	orelse: list 
																		element: If 
																			test: Compare 
																				left: Name 
																					id: str = d
																					ctx: Load 
																				ops: list 
																					element: In 
																				comparators: list 
																					element: Tuple 
																						elts: list 
																							element: Str 
																								s: str = d
																							element: Str 
																								s: str = m
																							element: Str 
																								s: str = H
																							element: Str 
																								s: str = M
																							element: Str 
																								s: str = S
																						ctx: Load 
																			body: list 
																				element: Assign 
																					targets: list 
																						element: Name 
																							id: str = l
																							ctx: Store 
																					value: Num 
																						n: int = 2
																			orelse: list 
										element: If 
											test: Compare 
												left: Name 
													id: str = l
													ctx: Load 
												ops: list 
													element: Gt 
												comparators: list 
													element: UnaryOp 
														op: USub 
														operand: Num 
															n: int = 1
											body: list 
												element: Assign 
													targets: list 
														element: Name 
															id: str = lv
															ctx: Store 
													value: List 
														elts: list 
															element: Subscript 
																value: Name 
																	id: str = ts
																	ctx: Load 
																slice: Slice 
																	lower: NoneType = None
																	upper: Name 
																		id: str = l
																		ctx: Load 
																	step: NoneType = None
																ctx: Load 
															element: Subscript 
																value: Name 
																	id: str = ts
																	ctx: Load 
																slice: Slice 
																	lower: Name 
																		id: str = l
																		ctx: Load 
																	upper: NoneType = None
																	step: NoneType = None
																ctx: Load 
														ctx: Load 
											orelse: list 
									orelse: list 
								element: If 
									test: UnaryOp 
										op: Not 
										operand: Name 
											id: str = lv
											ctx: Load 
									body: list 
										element: Assign 
											targets: list 
												element: Name 
													id: str = lv
													ctx: Store 
											value: List 
												elts: list 
													element: Name 
														id: str = ts
														ctx: Load 
													element: Str 
														s: str = 
												ctx: Load 
									orelse: list 
							orelse: list 
								element: Assign 
									targets: list 
										element: Name 
											id: str = lv
											ctx: Store 
									value: Call 
										func: Name 
											id: str = _lsplit
											ctx: Load 
										args: list 
											element: Name 
												id: str = ts
												ctx: Load 
											element: Name 
												id: str = sep
												ctx: Load 
											element: Num 
												n: int = 1
										keywords: list 
						element: If 
							test: Compare 
								left: Name 
									id: str = d
									ctx: Load 
								ops: list 
									element: Eq 
								comparators: list 
									element: NameConstant 
										value: NoneType = None
							body: list 
								element: Assign 
									targets: list 
										element: Name 
											id: str = ts
											ctx: Store 
									value: Subscript 
										value: Name 
											id: str = lv
											ctx: Load 
										slice: Index 
											value: Num 
												n: int = 1
										ctx: Load 
								element: Continue 
							orelse: list 
						element: Assign 
							targets: list 
								element: Tuple 
									elts: list 
										element: Name 
											id: str = ts
											ctx: Store 
										element: Subscript 
											value: Name 
												id: str = dir_val
												ctx: Load 
											slice: Index 
												value: Name 
													id: str = d
													ctx: Load 
											ctx: Store 
									ctx: Store 
							value: Tuple 
								elts: list 
									element: Subscript 
										value: Name 
											id: str = lv
											ctx: Load 
										slice: Index 
											value: Num 
												n: int = 1
										ctx: Load 
									element: Subscript 
										value: Name 
											id: str = lv
											ctx: Load 
										slice: Index 
											value: Num 
												n: int = 0
										ctx: Load 
								ctx: Load 
						element: If 
							test: Compare 
								left: Name 
									id: str = fmt
									ctx: Load 
								ops: list 
									element: Eq 
								comparators: list 
									element: Str 
										s: str = 
							body: list 
								element: Break 
							orelse: list 
					orelse: list 
				element: Assign 
					targets: list 
						element: Name 
							id: str = t
							ctx: Store 
					value: List 
						elts: list 
							element: Num 
								n: int = 1900
							element: Num 
								n: int = 1
							element: Num 
								n: int = 1
							element: Num 
								n: int = 0
							element: Num 
								n: int = 0
							element: Num 
								n: int = 0
							element: Num 
								n: int = 0
							element: Num 
								n: int = 1
							element: UnaryOp 
								op: USub 
								operand: Num 
									n: int = 1
						ctx: Load 
				element: Assign 
					targets: list 
						element: Name 
							id: str = ignore_keys
							ctx: Store 
					value: List 
						elts: list 
						ctx: Load 
				element: Assign 
					targets: list 
						element: Name 
							id: str = have_weekday
							ctx: Store 
					value: NameConstant 
						value: bool = False
				element: For 
					target: Tuple 
						elts: list 
							element: Name 
								id: str = d
								ctx: Store 
							element: Name 
								id: str = v
								ctx: Store 
						ctx: Store 
					iter: Call 
						func: Attribute 
							value: Name 
								id: str = dir_val
								ctx: Load 
							attr: str = items
							ctx: Load 
						args: list 
						keywords: list 
					body: list 
						element: If 
							test: Compare 
								left: Name 
									id: str = d
									ctx: Load 
								ops: list 
									element: In 
								comparators: list 
									element: Name 
										id: str = ignore_keys
										ctx: Load 
							body: list 
								element: Continue 
							orelse: list 
						element: If 
							test: Compare 
								left: Name 
									id: str = d
									ctx: Load 
								ops: list 
									element: Eq 
								comparators: list 
									element: Str 
										s: str = p
							body: list 
								element: Continue 
							orelse: list 
						element: If 
							test: Compare 
								left: Name 
									id: str = d
									ctx: Load 
								ops: list 
									element: In 
								comparators: list 
									element: Call 
										func: Attribute 
											value: Name 
												id: str = __lu
												ctx: Load 
											attr: str = keys
											ctx: Load 
										args: list 
										keywords: list 
							body: list 
								element: Assign 
									targets: list 
										element: Subscript 
											value: Name 
												id: str = t
												ctx: Load 
											slice: Index 
												value: Subscript 
													value: Name 
														id: str = __lu
														ctx: Load 
													slice: Index 
														value: Name 
															id: str = d
															ctx: Load 
													ctx: Load 
											ctx: Store 
									value: Call 
										func: Name 
											id: str = int
											ctx: Load 
										args: list 
											element: Name 
												id: str = v
												ctx: Load 
										keywords: list 
								element: Continue 
							orelse: list 
						element: If 
							test: Compare 
								left: Name 
									id: str = d
									ctx: Load 
								ops: list 
									element: In 
								comparators: list 
									element: Tuple 
										elts: list 
											element: Str 
												s: str = a
											element: Str 
												s: str = A
											element: Str 
												s: str = b
											element: Str 
												s: str = B
										ctx: Load 
							body: list 
								element: Assign 
									targets: list 
										element: Name 
											id: str = v
											ctx: Store 
									value: Call 
										func: Attribute 
											value: Name 
												id: str = v
												ctx: Load 
											attr: str = lower
											ctx: Load 
										args: list 
										keywords: list 
							orelse: list 
						element: If 
							test: Compare 
								left: Name 
									id: str = d
									ctx: Load 
								ops: list 
									element: Eq 
								comparators: list 
									element: Str 
										s: str = m
							body: list 
								element: Expr 
									value: Call 
										func: Attribute 
											value: Name 
												id: str = ignore_keys
												ctx: Load 
											attr: str = append
											ctx: Load 
										args: list 
											element: Str 
												s: str = b
										keywords: list 
								element: Expr 
									value: Call 
										func: Attribute 
											value: Name 
												id: str = ignore_keys
												ctx: Load 
											attr: str = append
											ctx: Load 
										args: list 
											element: Str 
												s: str = B
										keywords: list 
							orelse: list 
						element: If 
							test: Compare 
								left: Name 
									id: str = d
									ctx: Load 
								ops: list 
									element: Eq 
								comparators: list 
									element: Str 
										s: str = a
							body: list 
								element: If 
									test: UnaryOp 
										op: Not 
										operand: Compare 
											left: Name 
												id: str = v
												ctx: Load 
											ops: list 
												element: In 
											comparators: list 
												element: Name 
													id: str = __weekdays
													ctx: Load 
									body: list 
										element: Raise 
											exc: Call 
												func: Name 
													id: str = ValueError
													ctx: Load 
												args: list 
													element: Str 
														s: str = Weekday unknown in your locale
												keywords: list 
											cause: NoneType = None
									orelse: list 
								element: Assign 
									targets: list 
										element: Name 
											id: str = have_weekday
											ctx: Store 
									value: NameConstant 
										value: bool = True
								element: Assign 
									targets: list 
										element: Subscript 
											value: Name 
												id: str = t
												ctx: Load 
											slice: Index 
												value: Num 
													n: int = 6
											ctx: Store 
									value: Call 
										func: Attribute 
											value: Name 
												id: str = __weekdays
												ctx: Load 
											attr: str = index
											ctx: Load 
										args: list 
											element: Name 
												id: str = v
												ctx: Load 
										keywords: list 
							orelse: list 
								element: If 
									test: Compare 
										left: Name 
											id: str = d
											ctx: Load 
										ops: list 
											element: Eq 
										comparators: list 
											element: Str 
												s: str = A
									body: list 
										element: If 
											test: UnaryOp 
												op: Not 
												operand: Compare 
													left: Name 
														id: str = v
														ctx: Load 
													ops: list 
														element: In 
													comparators: list 
														element: Name 
															id: str = __weekdays_long
															ctx: Load 
											body: list 
												element: Raise 
													exc: Call 
														func: Name 
															id: str = ValueError
															ctx: Load 
														args: list 
															element: Str 
																s: str = Weekday unknown in your locale
														keywords: list 
													cause: NoneType = None
											orelse: list 
										element: Assign 
											targets: list 
												element: Name 
													id: str = have_weekday
													ctx: Store 
											value: NameConstant 
												value: bool = True
										element: Assign 
											targets: list 
												element: Subscript 
													value: Name 
														id: str = t
														ctx: Load 
													slice: Index 
														value: Num 
															n: int = 6
													ctx: Store 
											value: Call 
												func: Attribute 
													value: Name 
														id: str = __weekdays_long
														ctx: Load 
													attr: str = index
													ctx: Load 
												args: list 
													element: Name 
														id: str = v
														ctx: Load 
												keywords: list 
									orelse: list 
										element: If 
											test: Compare 
												left: Name 
													id: str = d
													ctx: Load 
												ops: list 
													element: Eq 
												comparators: list 
													element: Str 
														s: str = b
											body: list 
												element: If 
													test: UnaryOp 
														op: Not 
														operand: Compare 
															left: Name 
																id: str = v
																ctx: Load 
															ops: list 
																element: In 
															comparators: list 
																element: Name 
																	id: str = __months
																	ctx: Load 
													body: list 
														element: Raise 
															exc: Call 
																func: Name 
																	id: str = ValueError
																	ctx: Load 
																args: list 
																	element: Str 
																		s: str = Month unknown in your locale
																keywords: list 
															cause: NoneType = None
													orelse: list 
												element: Assign 
													targets: list 
														element: Subscript 
															value: Name 
																id: str = t
																ctx: Load 
															slice: Index 
																value: Num 
																	n: int = 1
															ctx: Store 
													value: BinOp 
														left: Call 
															func: Attribute 
																value: Name 
																	id: str = __months
																	ctx: Load 
																attr: str = index
																ctx: Load 
															args: list 
																element: Name 
																	id: str = v
																	ctx: Load 
															keywords: list 
														op: Add 
														right: Num 
															n: int = 1
											orelse: list 
												element: If 
													test: Compare 
														left: Name 
															id: str = d
															ctx: Load 
														ops: list 
															element: Eq 
														comparators: list 
															element: Str 
																s: str = B
													body: list 
														element: If 
															test: UnaryOp 
																op: Not 
																operand: Compare 
																	left: Name 
																		id: str = v
																		ctx: Load 
																	ops: list 
																		element: In 
																	comparators: list 
																		element: Name 
																			id: str = __months_long
																			ctx: Load 
															body: list 
																element: Raise 
																	exc: Call 
																		func: Name 
																			id: str = ValueError
																			ctx: Load 
																		args: list 
																			element: Str 
																				s: str = Month unknown in your locale
																		keywords: list 
																	cause: NoneType = None
															orelse: list 
														element: Assign 
															targets: list 
																element: Subscript 
																	value: Name 
																		id: str = t
																		ctx: Load 
																	slice: Index 
																		value: Num 
																			n: int = 1
																	ctx: Store 
															value: BinOp 
																left: Call 
																	func: Attribute 
																		value: Name 
																			id: str = __months_long
																			ctx: Load 
																		attr: str = index
																		ctx: Load 
																	args: list 
																		element: Name 
																			id: str = v
																			ctx: Load 
																	keywords: list 
																op: Add 
																right: Num 
																	n: int = 1
													orelse: list 
														element: If 
															test: Compare 
																left: Name 
																	id: str = d
																	ctx: Load 
																ops: list 
																	element: Eq 
																comparators: list 
																	element: Str 
																		s: str = I
															body: list 
																element: Assign 
																	targets: list 
																		element: Name 
																			id: str = ampm
																			ctx: Store 
																	value: BoolOp 
																		op: Or 
																		values: list 
																			element: Subscript 
																				value: Name 
																					id: str = dir_val
																					ctx: Load 
																				slice: Index 
																					value: Str 
																						s: str = p
																				ctx: Load 
																			element: Str 
																				s: str = am
																element: Assign 
																	targets: list 
																		element: Name 
																			id: str = ampm
																			ctx: Store 
																	value: Call 
																		func: Attribute 
																			value: Name 
																				id: str = ampm
																				ctx: Load 
																			attr: str = lower
																			ctx: Load 
																		args: list 
																		keywords: list 
																element: Assign 
																	targets: list 
																		element: Name 
																			id: str = v
																			ctx: Store 
																	value: Call 
																		func: Name 
																			id: str = int
																			ctx: Load 
																		args: list 
																			element: Name 
																				id: str = v
																				ctx: Load 
																		keywords: list 
																element: If 
																	test: Compare 
																		left: Name 
																			id: str = v
																			ctx: Load 
																		ops: list 
																			element: Eq 
																		comparators: list 
																			element: Num 
																				n: int = 12
																	body: list 
																		element: Assign 
																			targets: list 
																				element: Name 
																					id: str = v
																					ctx: Store 
																			value: Num 
																				n: int = 0
																	orelse: list 
																		element: If 
																			test: Compare 
																				left: Name 
																					id: str = v
																					ctx: Load 
																				ops: list 
																					element: Gt 
																				comparators: list 
																					element: Num 
																						n: int = 12
																			body: list 
																				element: Raise 
																					exc: Call 
																						func: Name 
																							id: str = ValueError
																							ctx: Load 
																						args: list 
																							element: BinOp 
																								left: BinOp 
																									left: BinOp 
																										left: BinOp 
																											left: Str 
																												s: str = time data '
																											op: Add 
																											right: Name 
																												id: str = string
																												ctx: Load 
																										op: Add 
																										right: Str 
																											s: str = ' does not match format '
																									op: Add 
																									right: Name 
																										id: str = format
																										ctx: Load 
																								op: Add 
																								right: Str 
																									s: str = '
																						keywords: list 
																					cause: NoneType = None
																			orelse: list 
																element: If 
																	test: Compare 
																		left: Name 
																			id: str = ampm
																			ctx: Load 
																		ops: list 
																			element: Eq 
																		comparators: list 
																			element: Str 
																				s: str = pm
																	body: list 
																		element: AugAssign 
																			target: Name 
																				id: str = v
																				ctx: Store 
																			op: Add 
																			value: Num 
																				n: int = 12
																	orelse: list 
																element: Assign 
																	targets: list 
																		element: Subscript 
																			value: Name 
																				id: str = t
																				ctx: Load 
																			slice: Index 
																				value: Subscript 
																					value: Name 
																						id: str = __lu
																						ctx: Load 
																					slice: Index 
																						value: Str 
																							s: str = H
																					ctx: Load 
																			ctx: Store 
																	value: Name 
																		id: str = v
																		ctx: Load 
															orelse: list 
																element: If 
																	test: Compare 
																		left: Name 
																			id: str = d
																			ctx: Load 
																		ops: list 
																			element: Eq 
																		comparators: list 
																			element: Str 
																				s: str = y
																	body: list 
																		element: Assign 
																			targets: list 
																				element: Subscript 
																					value: Name 
																						id: str = t
																						ctx: Load 
																					slice: Index 
																						value: Num 
																							n: int = 0
																					ctx: Store 
																			value: BinOp 
																				left: Num 
																					n: int = 2000
																				op: Add 
																				right: Call 
																					func: Name 
																						id: str = int
																						ctx: Load 
																					args: list 
																						element: Name 
																							id: str = v
																							ctx: Load 
																					keywords: list 
																	orelse: list 
																		element: If 
																			test: Compare 
																				left: Name 
																					id: str = d
																					ctx: Load 
																				ops: list 
																					element: Eq 
																				comparators: list 
																					element: Str 
																						s: str = Z
																			body: list 
																				element: If 
																					test: Compare 
																						left: Call 
																							func: Attribute 
																								value: Name 
																									id: str = v
																									ctx: Load 
																								attr: str = lower
																								ctx: Load 
																							args: list 
																							keywords: list 
																						ops: list 
																							element: In 
																						comparators: list 
																							element: List 
																								elts: list 
																									element: Str 
																										s: str = gmt
																									element: Str 
																										s: str = utc
																								ctx: Load 
																					body: list 
																						element: Assign 
																							targets: list 
																								element: Subscript 
																									value: Name 
																										id: str = t
																										ctx: Load 
																									slice: Index 
																										value: UnaryOp 
																											op: USub 
																											operand: Num 
																												n: int = 1
																									ctx: Store 
																							value: Num 
																								n: int = 0
																					orelse: list 
																			orelse: list 
					orelse: list 
				element: Assign 
					targets: list 
						element: Name 
							id: str = __date
							ctx: Store 
					value: Call 
						func: Name 
							id: str = __new__
							ctx: Load 
						args: list 
							element: Call 
								func: Name 
									id: str = Date
									ctx: Load 
								args: list 
									element: Num 
										n: int = 0
								keywords: list 
						keywords: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = __date
								ctx: Load 
							attr: str = setUTCFullYear
							ctx: Load 
						args: list 
							element: Subscript 
								value: Name 
									id: str = t
									ctx: Load 
								slice: Index 
									value: Num 
										n: int = 0
								ctx: Load 
						keywords: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = __date
								ctx: Load 
							attr: str = setUTCMonth
							ctx: Load 
						args: list 
							element: BinOp 
								left: Subscript 
									value: Name 
										id: str = t
										ctx: Load 
									slice: Index 
										value: Num 
											n: int = 1
									ctx: Load 
								op: Sub 
								right: Num 
									n: int = 1
						keywords: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = __date
								ctx: Load 
							attr: str = setUTCDate
							ctx: Load 
						args: list 
							element: Subscript 
								value: Name 
									id: str = t
									ctx: Load 
								slice: Index 
									value: Num 
										n: int = 2
								ctx: Load 
						keywords: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = __date
								ctx: Load 
							attr: str = setUTCHours
							ctx: Load 
						args: list 
							element: Subscript 
								value: Name 
									id: str = t
									ctx: Load 
								slice: Index 
									value: Num 
										n: int = 3
								ctx: Load 
						keywords: list 
				element: Assign 
					targets: list 
						element: Subscript 
							value: Name 
								id: str = t
								ctx: Load 
							slice: Index 
								value: Num 
									n: int = 7
							ctx: Store 
					value: Call 
						func: Name 
							id: str = _day_of_year
							ctx: Load 
						args: list 
							element: Name 
								id: str = __date
								ctx: Load 
						keywords: list 
				element: If 
					test: UnaryOp 
						op: Not 
						operand: Name 
							id: str = have_weekday
							ctx: Load 
					body: list 
						element: Assign 
							targets: list 
								element: Subscript 
									value: Name 
										id: str = t
										ctx: Load 
									slice: Index 
										value: Num 
											n: int = 6
									ctx: Store 
							value: BinOp 
								left: Call 
									func: Attribute 
										value: Name 
											id: str = __date
											ctx: Load 
										attr: str = getUTCDay
										ctx: Load 
									args: list 
									keywords: list 
								op: Sub 
								right: Num 
									n: int = 1
					orelse: list 
				element: Return 
					value: Name 
						id: str = t
						ctx: Load 
			decorator_list: list 
			returns: NoneType = None
		element: FunctionDef 
			name: str = strftime
			args: arguments 
				args: list 
					element: arg 
						arg: str = format
						annotation: NoneType = None
					element: arg 
						arg: str = t
						annotation: NoneType = None
				vararg: NoneType = None
				kwonlyargs: list 
				kw_defaults: list 
				kwarg: NoneType = None
				defaults: list 
			body: list 
				element: FunctionDef 
					name: str = zf2
					args: arguments 
						args: list 
							element: arg 
								arg: str = v
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Expr 
							value: Str 
								s: str =  zfill missing 
						element: If 
							test: Compare 
								left: Name 
									id: str = v
									ctx: Load 
								ops: list 
									element: Lt 
								comparators: list 
									element: Num 
										n: int = 10
							body: list 
								element: Return 
									value: BinOp 
										left: Str 
											s: str = 0
										op: Add 
										right: Call 
											func: Name 
												id: str = str
												ctx: Load 
											args: list 
												element: Name 
													id: str = v
													ctx: Load 
											keywords: list 
							orelse: list 
						element: Return 
							value: Name 
								id: str = v
								ctx: Load 
					decorator_list: list 
					returns: NoneType = None
				element: If 
					test: UnaryOp 
						op: Not 
						operand: Name 
							id: str = t
							ctx: Load 
					body: list 
						element: Assign 
							targets: list 
								element: Name 
									id: str = t
									ctx: Store 
							value: Call 
								func: Name 
									id: str = localtime
									ctx: Load 
								args: list 
								keywords: list 
					orelse: list 
				element: Assign 
					targets: list 
						element: Name 
							id: str = f
							ctx: Store 
					value: Name 
						id: str = format
						ctx: Load 
				element: For 
					target: Name 
						id: str = d
						ctx: Store 
					iter: Call 
						func: Attribute 
							value: Name 
								id: str = __lu
								ctx: Load 
							attr: str = keys
							ctx: Load 
						args: list 
						keywords: list 
					body: list 
						element: Assign 
							targets: list 
								element: Name 
									id: str = k
									ctx: Store 
							value: BinOp 
								left: Str 
									s: str = %
								op: Add 
								right: Name 
									id: str = d
									ctx: Load 
						element: If 
							test: UnaryOp 
								op: Not 
								operand: Compare 
									left: Name 
										id: str = k
										ctx: Load 
									ops: list 
										element: In 
									comparators: list 
										element: Name 
											id: str = f
											ctx: Load 
							body: list 
								element: Continue 
							orelse: list 
						element: Assign 
							targets: list 
								element: Name 
									id: str = v
									ctx: Store 
							value: Call 
								func: Name 
									id: str = zf2
									ctx: Load 
								args: list 
									element: Subscript 
										value: Name 
											id: str = t
											ctx: Load 
										slice: Index 
											value: Subscript 
												value: Name 
													id: str = __lu
													ctx: Load 
												slice: Index 
													value: Name 
														id: str = d
														ctx: Load 
												ctx: Load 
										ctx: Load 
								keywords: list 
						element: Assign 
							targets: list 
								element: Name 
									id: str = f
									ctx: Store 
							value: Call 
								func: Attribute 
									value: Name 
										id: str = f
										ctx: Load 
									attr: str = replace
									ctx: Load 
								args: list 
									element: Name 
										id: str = k
										ctx: Load 
									element: Name 
										id: str = v
										ctx: Load 
								keywords: list 
					orelse: list 
				element: For 
					target: Tuple 
						elts: list 
							element: Name 
								id: str = d
								ctx: Store 
							element: Name 
								id: str = l
								ctx: Store 
							element: Name 
								id: str = pos
								ctx: Store 
						ctx: Store 
					iter: Tuple 
						elts: list 
							element: Tuple 
								elts: list 
									element: Str 
										s: str = b
									element: Name 
										id: str = __months
										ctx: Load 
									element: Num 
										n: int = 1
								ctx: Load 
							element: Tuple 
								elts: list 
									element: Str 
										s: str = B
									element: Name 
										id: str = __months_long
										ctx: Load 
									element: Num 
										n: int = 1
								ctx: Load 
							element: Tuple 
								elts: list 
									element: Str 
										s: str = a
									element: Name 
										id: str = __weekdays
										ctx: Load 
									element: Num 
										n: int = 6
								ctx: Load 
							element: Tuple 
								elts: list 
									element: Str 
										s: str = A
									element: Name 
										id: str = __weekdays_long
										ctx: Load 
									element: Num 
										n: int = 6
								ctx: Load 
						ctx: Load 
					body: list 
						element: Assign 
							targets: list 
								element: Name 
									id: str = p
									ctx: Store 
							value: Subscript 
								value: Name 
									id: str = t
									ctx: Load 
								slice: Index 
									value: Name 
										id: str = pos
										ctx: Load 
								ctx: Load 
						element: If 
							test: Compare 
								left: Name 
									id: str = pos
									ctx: Load 
								ops: list 
									element: Eq 
								comparators: list 
									element: Num 
										n: int = 1
							body: list 
								element: Assign 
									targets: list 
										element: Name 
											id: str = p
											ctx: Store 
									value: BinOp 
										left: Name 
											id: str = p
											ctx: Load 
										op: Sub 
										right: Num 
											n: int = 1
							orelse: list 
						element: Assign 
							targets: list 
								element: Name 
									id: str = v
									ctx: Store 
							value: Call 
								func: Attribute 
									value: Subscript 
										value: Name 
											id: str = l
											ctx: Load 
										slice: Index 
											value: Name 
												id: str = p
												ctx: Load 
										ctx: Load 
									attr: str = capitalize
									ctx: Load 
								args: list 
								keywords: list 
						element: Assign 
							targets: list 
								element: Name 
									id: str = f
									ctx: Store 
							value: Call 
								func: Attribute 
									value: Name 
										id: str = f
										ctx: Load 
									attr: str = replace
									ctx: Load 
								args: list 
									element: BinOp 
										left: Str 
											s: str = %
										op: Add 
										right: Name 
											id: str = d
											ctx: Load 
									element: Name 
										id: str = v
										ctx: Load 
								keywords: list 
					orelse: list 
				element: If 
					test: Compare 
						left: Str 
							s: str = %p
						ops: list 
							element: In 
						comparators: list 
							element: Name 
								id: str = f
								ctx: Load 
					body: list 
						element: If 
							test: Compare 
								left: Subscript 
									value: Name 
										id: str = t
										ctx: Load 
									slice: Index 
										value: Num 
											n: int = 3
									ctx: Load 
								ops: list 
									element: Gt 
								comparators: list 
									element: Num 
										n: int = 11
							body: list 
								element: Assign 
									targets: list 
										element: Name 
											id: str = ap
											ctx: Store 
									value: Str 
										s: str = PM
							orelse: list 
								element: Assign 
									targets: list 
										element: Name 
											id: str = ap
											ctx: Store 
									value: Str 
										s: str = AM
						element: Assign 
							targets: list 
								element: Name 
									id: str = f
									ctx: Store 
							value: Call 
								func: Attribute 
									value: Name 
										id: str = f
										ctx: Load 
									attr: str = replace
									ctx: Load 
								args: list 
									element: Str 
										s: str = %p
									element: Name 
										id: str = ap
										ctx: Load 
								keywords: list 
					orelse: list 
				element: If 
					test: Compare 
						left: Str 
							s: str = %y
						ops: list 
							element: In 
						comparators: list 
							element: Name 
								id: str = f
								ctx: Load 
					body: list 
						element: Assign 
							targets: list 
								element: Name 
									id: str = f
									ctx: Store 
							value: Call 
								func: Attribute 
									value: Name 
										id: str = f
										ctx: Load 
									attr: str = replace
									ctx: Load 
								args: list 
									element: Str 
										s: str = %y
									element: Subscript 
										value: Call 
											func: Name 
												id: str = str
												ctx: Load 
											args: list 
												element: Subscript 
													value: Name 
														id: str = t
														ctx: Load 
													slice: Index 
														value: Num 
															n: int = 0
													ctx: Load 
											keywords: list 
										slice: Slice 
											lower: UnaryOp 
												op: USub 
												operand: Num 
													n: int = 2
											upper: NoneType = None
											step: NoneType = None
										ctx: Load 
								keywords: list 
					orelse: list 
				element: If 
					test: Compare 
						left: Str 
							s: str = %I
						ops: list 
							element: In 
						comparators: list 
							element: Name 
								id: str = f
								ctx: Load 
					body: list 
						element: Assign 
							targets: list 
								element: Name 
									id: str = v
									ctx: Store 
							value: Subscript 
								value: Name 
									id: str = t
									ctx: Load 
								slice: Index 
									value: Num 
										n: int = 3
								ctx: Load 
						element: If 
							test: Compare 
								left: Name 
									id: str = v
									ctx: Load 
								ops: list 
									element: Eq 
								comparators: list 
									element: Num 
										n: int = 0
							body: list 
								element: Assign 
									targets: list 
										element: Name 
											id: str = v
											ctx: Store 
									value: Num 
										n: int = 12
							orelse: list 
								element: If 
									test: Compare 
										left: Name 
											id: str = v
											ctx: Load 
										ops: list 
											element: Gt 
										comparators: list 
											element: Num 
												n: int = 12
									body: list 
										element: Assign 
											targets: list 
												element: Name 
													id: str = v
													ctx: Store 
											value: BinOp 
												left: Name 
													id: str = v
													ctx: Load 
												op: Sub 
												right: Num 
													n: int = 12
									orelse: list 
						element: Assign 
							targets: list 
								element: Name 
									id: str = f
									ctx: Store 
							value: Call 
								func: Attribute 
									value: Name 
										id: str = f
										ctx: Load 
									attr: str = replace
									ctx: Load 
								args: list 
									element: Str 
										s: str = %I
									element: Call 
										func: Name 
											id: str = zf2
											ctx: Load 
										args: list 
											element: Name 
												id: str = v
												ctx: Load 
										keywords: list 
								keywords: list 
					orelse: list 
				element: Return 
					value: Name 
						id: str = f
						ctx: Load 
			decorator_list: list 
			returns: NoneType = None