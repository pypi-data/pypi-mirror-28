{
	"version": 3,
	"file": "D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/modules/org/transcrypt/autotester/__javascript__/org.transcrypt.autotester.mod.js",
	"sources": [
		"D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/modules/org/transcrypt/autotester/__init__.py"
	],
	"sourcesContent": [
		"# First run a test from the command prompt, generating an HTML file.\n# The output of the test is stored in a DIV.\n# Also the script is automatically included in the HTML file.\n# Loading the HTML file will run the script.\n# This will compare the output of the script running in the browswer to the output in the DIV.\n# If those two match, the test reports OK, else it reports failure.\n\n\nfrom org.transcrypt.stubs.browser import __main__, __envir__, __pragma__\nfrom org.transcrypt.autotester.html import HTMLGenerator, DataConverter, JSTesterUI\n\n# Don't import __envir__ from __base__ since it will overwrite __buildin__.__envir__ in the browser\n# Import from stubs will be skipped in the browser\n# ... The ice is a bit thin here\n\n__pragma__ ('nokwargs')\n\nimport itertools\n\ndef getFileLocation(ancestor):\n\t\"\"\" This function needs to crawl up the stack\n\tand find out where the ancestor caller of\n\tthis function was in the source code of either the\n\tpython or javascript, depending on environment.\n\t@param ancestor the ancestor of this function that\n\t  we want to capture file information about.\n\t@return string indicating the file position and line number\n\t\"\"\"\n\tif __envir__.executor_name == __envir__.transpiler_name: # js\n\t\ts = None\n\t\t__pragma__('js', '{}',\n\t\t\t'''\n\t\t\tvar e = new Error();\n\t\t\tif ( ! e.stack ) {\n\t\t\t  console.log(\"MAJOR ISSUE: Browser Error lacks Stack\");\n\t\t\t} else {\n\t\t\t  s = e.stack;\n\t\t\t}\n\t\t\t''')\n\t\t# Now we will process the stack to find the grandparent\n\t\t# calling function\n\t\t# @note - I'm explicitly not including a 're' module\n\t\t#    dependency here\n\t\tframes = None\n\t\t__pragma__('js', '{}',\n\t\t\t'''\n\t\t\tvar linereg = new RegExp(\"\\\\n\\\\r|\\\\n\", \"g\");\n\t\t\tframes = s.toString().split(linereg);\n\t\t\t''')\n\t\tif ( frames is None or (len(frames) < 2)):\n\t\t\t__pragma__('js', '{}', 'console.log(\"Failed to Split Stack\");')\n\t\t\treturn(\"UNKNOWN:???\")\n\n\t\t# @note - if the call stack in transcrypts javascript\n\t\t#   translation changes then this index may need to change\n\t\t#   @todo - need more work here to determine this because\n\t\t#     this is fragile\n\t\tgpFrame = frames[(ancestor*2 + 1)]\n\t\t# This regex splits the string coming from the javascript\n\t\t# stacktrace so that we can connect the file and line number\n\t\t# runTests (http://localhost:8080/run/autotest.js:3159:8)\n\t\t#  func\t      URL\t\t      filename\t  lineno:colno\n\t\t# Group 1 = function\n\t\t# Group 2 & 3 = protocol and hostname\n\t\t# Group 4 = Path on this host (filename is at the end)\n\t\t# Group 5 = lineno\n\t\t# Group 6 = column number in file\n\t\tframeReg = r\"([^(]*)\\(?([^:]*:)\\/{2,3}([^:/]*:?)([^:]*):(\\d+):(\\d+)\"\n\t\tm = None\n\t\t__pragma__('js', '{}',\n\t\t\t'''\n\t\t\tvar r = new RegExp(frameReg);\n\t\t\tm = r.exec(gpFrame);\n\t\t\t''')\n\t\tif m:\n\t\t\tfilepath = m[4]\n\t\t\t# Split the filepath and take the last element\n\t\t\t# to the get filename\n\t\t\tpathParts = filepath.split(\"/\")\n\t\t\tfilename = pathParts[len(pathParts)-1]\n\t\t\tlineno = m[5]\n\t\t\treturn( \"{}:{}\".format(filename, lineno) )\n\t\telse:\n\t\t\t__pragma__('js', '{}', 'console.log(\"Failed to Match Frame\");')\n\t\t\treturn(\"UNKNOWN:???\")\n\t#ELSE\n\t# Needed because Transcrypt imports are compile time\n\t__pragma__(\"skip\")\n\tfrom inspect import getframeinfo, stack\n\ts = stack()\n\tcaller = getframeinfo(s[ancestor][0])\n\t# Trim the file name path so that we don't get\n\t# a lot of unnecessary content\n\tfilepath = caller.filename\n\t# @todo - this is a hack - we should use os.path\n\tpathParts = filepath.split('/')\n\tfilename = \"/\".join(pathParts[-2:])\n\treturn( \"%s:%d\" % (filename, caller.lineno))\n\t__pragma__ ('noskip')\n\n\n\nclass AutoTester:\n\t\"\"\" Main testing class for comparing CPython to Transcrypt. This\n\tclass is primarily used by calling the \"check\" method to confirm that\n\tthe result is the same in both environments and \"done\" when all checks\n\tfor a particular module have been completed.\n\t\"\"\"\n\tdef __init__ (self, symbols = []):\n\t\tself.symbols = symbols\n\t\t# refDict/testDict contains the test results\n\t\t# of each testlet identified by name as the key\n\t\tself._currTestlet = \"UNKNOWN\"\n\t\tself.testDict = {}\n\t\tself.refDict = {}\n\n\t\tif __envir__.executor_name == __envir__.transpiler_name:\n\t\t\tself.ui = JSTesterUI()\n\t\telse:\n\t\t\tself.ui = None\n\n\tdef sortedRepr (self, any):\n\t\t# When using sets or dicts, use elemens or keys\n\t\t# of one type, in sort order\n\t\tdef tryGetNumKey (key):\n\t\t\tif type (key) == str:\t# Try to interpret key as numerical, see comment with repr function in __builtins__\n\t\t\t\ttry:\n\t\t\t\t\treturn int (key)\n\t\t\t\texcept:\n\t\t\t\t\ttry:\n\t\t\t\t\t\treturn float (key)\n\t\t\t\t\texcept:\n\t\t\t\t\t\treturn key\n\t\t\telse:\n\t\t\t\treturn key\n\n\t\tif type (any) == dict:\n\t\t\treturn '{' + ', '.join ([\n\t\t\t\t'{}: {}'.format (repr (key), repr (any [key]))\n\t\t\t\tfor index, key in enumerate (sorted ([tryGetNumKey (key) for key in any.keys ()], key = lambda aKey: str (aKey)))\n\t\t\t]) + '}'\n\t\telif type (any) == set:\n\t\t\tif len (any):\n\t\t\t\treturn '{' + ', '.join (sorted ([str (item) for item in list (any)])) + '}'\n\t\t\telse:\n\t\t\t\treturn repr (any)\n\t\telif type (any) == range:\n\t\t\treturn repr (list (any))\n\t\telse:\n\t\t\treturn repr (any)\n\n\t__pragma__('kwargs')\n\tdef check (self, *args, ancestor = 2):\n\t\t\"\"\" Given a set of values from either the python or transcrypt\n\t\tenvironments, we log the position of the check call in the test\n\t\tand representative values of the passed arguments for later\n\t\tcomparison.\n\t\t\"\"\"\n\t\tposition=getFileLocation(ancestor)\n\t\t# N.B. stubs.browser provides a special sorting repr\n\t\titem = ' '.join ([self.sortedRepr (arg) for arg in args])\n\t\tif __envir__.executor_name == __envir__.transpiler_name:\n\t\t\tself.testDict[self._currTestlet].append((position,item))\n\t\telse:\n\t\t\tself.refDict[self._currTestlet].append((position,item))\n\n\t__pragma__('nokwargs')\n\n\tdef expectException(self, func):\n\t\t\"\"\" This method attempts to call the passed method and\n\t\tchecks to see whether an exception was generated.\n\t\t@return string indicating \"no exception\" or \"exception\"\n\t\t\"\"\"\n\t\ttry:\n\t\t\tfunc()\n\t\t\treturn(\"no exception\")\n\t\texcept Exception as exc:\n\t\t\treturn(\"exception\")\n\n\tdef throwToError(self, func):\n\t\t\"\"\" This function invokes the passed function and then\n\t\tconverts an exception to an error response so that\n\t\tthe unit test can continue even in the case where an\n\t\texception may or may not occur.\n\t\t\"\"\"\n\t\ttry:\n\t\t\treturn(func())\n\t\texcept Exception as exc:\n\t\t\treturn (None, \"!!!{}\".format(str(exc)))\n\n\tdef checkEval(self, func):\n\t\t\"\"\" Check the result of the passed function which is\n\t\tinvoked without arguments. If this function throws an\n\t\texception, that exception is caught and converted to an error\n\t\twith can be compared against the result. This allows the\n\t\tuser to control for exception that may or may not be generated\n\t\tin the unit tests\n\t\t\"\"\"\n\t\tret = self.throwToError(func)\n\t\tself.check(ret, ancestor = 3)\n\n\n\tdef checkPad(self, val, count):\n\t\t\"\"\" This method is to help manage flow control in unit tests and\n        keep all unit tests aligned\n\t\t\"\"\"\n\t\tfor i in range(0, count):\n\t\t\tself.check(val)\n\n\tdef _getTotalErrorCnt(self, testData, refData):\n\t\t\"\"\" This method determines the total number of non-matching\n\t\t    values in the test and reference data for a particular module.\n\t\t\"\"\"\n\t\terrCount = 0\n\t\tfor i,(refPos, refItem) in enumerate(refData):\n\t\t\ttry:\n\t\t\t\ttestPos,testItem = testData[i]\n\t\t\t\tif ( testItem != refItem ):\n\t\t\t\t\terrCount+=1\n\t\t\texcept:\n\t\t\t\terrCount+=1\n\t\treturn(errCount)\n\n\tdef compare (self):\n\t\t# Load the python reference data from the hidden HTML div\n\t\tdc = DataConverter()\n\t\tself.refDict = dc.getPythonResults()\n\n\t\ttotalErrors = 0\n\t\tsKeys = sorted(self.refDict.keys())\n\t\tfor key in sKeys:\n\t\t\trefData = self.refDict[key]\n\t\t\ttry:\n\t\t\t\ttestData = self.testDict[key]\n\t\t\t\tif ( testData is None ):\n\t\t\t\t\traise KeyError(\"No Test Data Module: {}\".format(key))\n\t\t\texcept KeyError:\n\t\t\t\t# No Test Data found for this key - we will populate with\n\t\t\t\t# errors for all ref data\n\t\t\t\tself.ui.appendSeqRowName(key, len(refData))\n\t\t\t\tfor i,(refPos, refItem) in enumerate(refData):\n\t\t\t\t\tself.ui.appendTableResult(key, None, None, refPos, refItem, False)\n\t\t\t\tcontinue\n\t\t\t# know we have testData so let's determine the total number of\n\t\t\t# errors for this test module. This will allow us to both set\n\t\t\t# the num of errors in the test module header row and set the\n\t\t\t# rows to the appropriate initial collapsed/expanded state.\n\t\t\terrCount= self._getTotalErrorCnt(testData, refData)\n\t\t\tcollapse = (errCount == 0)\n\t\t\tself.ui.appendSeqRowName(key, errCount)\n\n\t\t\t# Now we will populate the table with all the rows\n\t\t\t# of data fro the comparison\n\t\t\tfor i,(refPos, refItem) in enumerate(refData):\n\t\t\t\ttry:\n\t\t\t\t\t# This will throw if testData's length is\n\t\t\t\t\t# shorter than refData's\n\t\t\t\t\ttestPos,testItem = testData[i]\n\t\t\t\texcept:\n\t\t\t\t\ttestPos = None\n\t\t\t\t\ttestItem = None\n\n\t\t\t\tself.ui.appendTableResult(\n\t\t\t\t\tkey, testPos, testItem, refPos, refItem, collapse\n\t\t\t\t)\n\n\t\t\ttotalErrors += errCount\n\n\t\tself.ui.setOutputStatus( totalErrors == 0 )\n\n\n\tdef _cleanName(self, name):\n\t\t\"\"\" Clean the passed name of characters that won't be allowed\n\t\t    in CSS class or HTML id strings.\n\t\t\"\"\"\n\t\t# Convert testletName to replace any of the characters that\n\t\t# are not acceptable in a CSS class or HTML id - this is to\n\t\t# make our lives easier\n\t\t# @note - I'm SPECIFICALLY not using a regex here because the\n\t\t#   regex engine module is still under dev and could possibly\n\t\t#   have issues\n\t\tret = name\n\t\tinvalidChars = [\n\t\t\t'~', '!', '@', '$', '%',\n\t\t\t'^', '&', '*', '(', ')',\n\t\t\t'+', '=', ',', '.', '/',\n\t\t\t\"'\", ';', ':', '\"', '?',\n\t\t\t'>', '<', '[', ']', '\\\\',\n\t\t\t'{', '}', '|', '`', '#',\n\t\t\t\" \",\n\t\t]\n\t\tfor ch in invalidChars:\n\t\t\tret = ret.replace(ch, \"_\")\n\t\treturn(ret)\n\n\tdef run (self, testlet, testletName):\n\t\ttestletName = self._cleanName(testletName)\n\t\tself._currTestlet = testletName\n\t\tif __envir__.executor_name == __envir__.transpiler_name:\n\t\t\tself.testDict[self._currTestlet] = []\n\t\telse:\n\t\t\tself.refDict[self._currTestlet] = []\n\t\ttry:\n\t\t\ttestlet.run (self)\n\t\texcept Exception as exc:\n\t\t\tif ( self.ui is not None ):\n\t\t\t\tself.ui.setOutputStatus(False)\n\t\t\t\tself.ui.showException(testletName, exc)\n\t\t\telse:\n\t\t\t\t# Error - No UI yet, reraise specific exception to enable finding out why\n\t\t\t\traise\n\n\n\tdef done (self):\n\t\tif __envir__.executor_name == __envir__.transpiler_name:\n\t\t\tself.compare ()\n\t\telse:\n\t\t\tfnameBase = __main__.__file__ [ : -3] .replace ('\\\\', '/') .rsplit ('/', 1) [-1]\n\t\t\thg = HTMLGenerator(fnameBase)\n\t\t\tfor minified in (False, True):\n\t\t\t\thg.generate_html(self.refDict, minified)\n"
	],
	"mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgUA;AAhUA;AASA;AAAA;AAAA;AAQA;AAEA;AASA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;AACA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AAAA;AAMA;AAUA;AACA;AACA;AAAA;AAAA;AAAA;AAKA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAcA;AAIA;AAAA;AAMA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAEA;AAEA;AAKA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAMA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAQA;AACA;AAAA;AAGA;AAIA;AACA;AAAA;AAAA;AAEA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AAIA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAMA;AAAA;AAGA;AAUA;AACA;AASA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA"
}