{
	"version": 3,
	"file": "D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/modules/org/transcrypt/autotester/__javascript__/org.transcrypt.autotester.html.mod.js",
	"sources": [
		"D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/modules/org/transcrypt/autotester/html.py"
	],
	"sourcesContent": [
		"# File: autotester/html.py\n# Author: Carl Allendorph\n# Date: 20NOV2016\n#\n# Description:\n#   This file contains the HTML generation code for the autotester.\n# This includes generating the initial HTML file as output of the\n# python run, and the javascript that builds the results at runtime\n# in the browser.\n#\n\nfrom org.transcrypt.stubs.browser import __main__, __envir__, __pragma__\n\n__pragma__ ('nokwargs')\n\nokColor = 'green'\nerrorColor = 'red'\nhighlightColor = 'yellow'\ntestletNameColor = 'blue'\n\nmessageDivId = 'message'\nreferenceDivId = 'python'\nrefResultDivId = \"pyresults\"\nrefPosDivId = \"pypos\"\ntestDivId = 'transcrypt'\ntableId = 'resulttable'\nresultsDivId = 'results'\nfaultRowClass = 'faultrow'\ntestletHeaderClass = \"testletheader\"\ntransValClass = \"trans-val\"\ntransPosClass = \"trans-pos\"\npyValClass = \"py-val\"\npyPosClass = \"py-pos\"\nexcAreaId = \"exc-area\"\nexcHeaderClass = \"exc-header\"\nforceCollapseId = \"force-collapse\"\nforceExpandId = \"force-expand\"\n\nclass HTMLGenerator(object):\n\t\"\"\" This class generates the HTML template for the autotester results.\n\tThis code is primarily run during the Python execution cycle but\n\tdoes define strings that are referenced by the javascript as well.\n\t\"\"\"\n\tdef __init__(self, filenameBase = None):\n\t\t\"\"\"\n\t\t@param filenameBase string denoting the base filename for the\n\t\tfiles this class will generate. This should NOT include the\n\t\tfile extension (.html for example). This will be tacked on\n\t\tlater depending on minified state.\n\t\t\"\"\"\n\t\tself._fnameBase = filenameBase\n\n\tdef generate_html(self, refDict, minified = False):\n\t\t\"\"\" Generate the HTML file that gets generated by the\n\t\tPython script portion of the test. File will be named\n\t\t'<fnameBase.html'\n\t\t@param refDict Dict of python reference data associated with\n\t\t  each of the test modules. The keys of this dict are the names\n\t\t  of the ref modules.\n\t\t@param minified indicates whether the output file should use the\n\t\t  minified version of the javascript or not. If minified, then\n\t\t  the output file will be name 'fnameBase.min.html'\n\t\t\"\"\"\n\t\tif ( self._fnameBase is None ):\n\t\t\traise ValueError(\"Filename Base must be defined to generate\")\n\t\tminInfix = '.min' if minified else ''\n\t\tfname = minInfix.join([self._fnameBase, '.html'])\n\t\tjsFileName = minInfix.join([self._fnameBase, '.js'])\n\t\tjsPath = \"{}/{}\".format(__envir__.target_subdir, jsFileName)\n\n\t\twith open( fname, 'w') as f:\n\t\t\tf.write(\"<html><head>\")\n\t\t\tself._writeCSS(f)\n\t\t\tf.write(\"</head><body>\")\n\n\t\t\tself._writeStatusHeaderTemplate(f)\n\n\t\t\tdc = DataConverter()\n\t\t\tdc.writeHiddenResults(f, refDict)\n\n\t\t\tself._writeTableArea(f)\n\n\t\t\tf.write ('<script src=\"{}\"></script>\\n\\n'.format (jsPath))\n\t\t\tf.write(\"</body></html>\")\n\n\t##########################\n\t# Internal Methods\n\t##########################\n\n\tdef _writeCSS(self, f):\n\t\tcssOut = \"\"\"\n\t\t<style>\n\t\t  body {\n\t\t    max-width: 100%;\n\t\t  }\n\t\t  .faultrow > td {\n\t\t     background-color: LightCoral;\n\t\t  }\n\t\t  #resulttable {\n\t\t    border-collapse: collapse;\n\t\t    width: 100%;\n\t\t    table-layout: fixed;\n\t\t  }\n\t\t  #resulttable th, #resulttable td {\n\t\t    border: 1px solid grey;\n\t\t  }\n\t\t  .testletheader > td {\n\t\t    background-color: LightSkyBlue;\n\t\t  }\n\t\t  .header-pos {\n\t\t    width: 20%;\n\t\t  }\n\t\t  .header-val {\n\t\t    width: 30%;\n\t\t  }\n\t\t  .py-pos,.trans-pos {\n\t\t    width: 20%;\n\t\t    overflow: hidden;\n\t\t  }\n\t\t  .py-val, .trans-val {\n\t\t    width: 30%;\n\t\t    overflow-x: auto;\n\t\t  }\n\t\t  .exc-header {\n\t      color: red;\n\t\t  }\n\t\t  .collapsed {\n\t\t    display: None;\n\t\t  }\n\t\t</style>\n\t\t\"\"\"\n\t\tf.write(cssOut)\n\n\tdef _writeStatusHeaderTemplate(self, f):\n\t\tf.write ('<b>Status:</b>\\n')\n\t\tf.write ('<div id=\"{}\"></div><br><br>\\n\\n'.format (messageDivId))\n\n\tdef _writeTableArea(self, f):\n\t\tf.write ('<div id=\"{}\"></div>'.format(excAreaId))\n\t\tf.write ('<div id=\"{}\">'.format(resultsDivId))\n\t\tf.write ('<div> <a id=\"{}\" href=\"#\"> Collapse All</a> <a id=\"{}\" href=\"#\">Expand All</a></div>'.format(forceCollapseId, forceExpandId))\n\t\tf.write ('<table id=\"{}\"><thead><tr> <th colspan=\"2\"> CPython </th> <th colspan=\"2\"> Transcrypt </th> </tr>'.format(tableId))\n\t\tf.write ('<tr> <th class=\"header-pos\"> Location </th> <th class=\"header-val\"> Value </th> <th class=\"header-val\"> Value </th> <th class=\"header-pos\"> Location </th> </tr></thead><tbody></tbody>')\n\t\tf.write ('</table>')\n\t\tf.write ('</div>')\n\nclass DataConverter(object):\n\t\"\"\" This class contains code that stores the python results in\n\tthe HTML document and can extract the data from the HTML to\n\tprepare it for comparison with the javascript results.\n\t\"\"\"\n\n\tdef writeHiddenResults(self, f, refDict):\n\t\t\"\"\" Write the Python results into a div that is hidden by\n\t\tdefault so that we can extract it at runtime.\n\t\t@param f file that we are writing the content into\n\t\t@param refDict python reference result data in the form of\n\t\ta dict. The keys are the names of the individual test modules.\n\t\t\"\"\"\n\t\tf.write('<div id=\"{}\" style=\"display: None\">'.format(referenceDivId))\n\t\tfor key in refDict.keys():\n\t\t\titemData = ' | '.join([x[1] for x in refDict[key]])\n\t\t\tposContent = ' | '.join([x[0] for x in refDict[key]])\n\t\t\tf.write('<div id=\"{}\">\\n'.format(key))\n\t\t\t# @note - we should probably HTML escape this\n\t\t\t#    data so that we don't get the HTML rendering\n\t\t\t#    engine mucking with our test result.\n\t\t\tf.write ('<div id=\"{}\">{}</div>\\n\\n'.format (refResultDivId, itemData))\n\t\t\tf.write ('<div id=\"{}\">{}</div>\\n'.format(refPosDivId, posContent))\n\t\t\tf.write('</div>\\n')\n\t\tf.write('</div></div>\\n')\n\n\tdef getPythonResults(self):\n\t\t\"\"\" Acquire the python unit test results from the\n\t\t    hidden div and parse into a dictionary.\n\t\t@return dict whose keys are the names of the test\n\t\t  submodules.\n\t\t\"\"\"\n\t\trefData = document.getElementById(referenceDivId)\n\t\t# Each of the children of this element is in the form\n\t\t# <div id=\"{key}\">\n\t\t#   <div id=\"pyresults\"> {Result Content} </div>\n\t\t#   <div id=\"pypos\"> {Result Positions} </div>\n\t\t# </div>\n\t\trefDict = {}\n\t\tfor child in refData.children:\n\t\t\tkeyName = child.getAttribute(\"id\")\n\t\t\tposData,resultData = self._extractPosResult(child)\n\t\t\trefDict[keyName] = zip(posData, resultData)\n\t\treturn(refDict)\n\n\tdef _extractPosResult(self, elem):\n\t\tresultData = None\n\t\tposData = None\n\t\tfor e in elem.children:\n\t\t\tidStr = e.getAttribute(\"id\")\n\t\t\tif ( idStr == refResultDivId):\n\t\t\t\tresultData = e.innerHTML.split(' | ')\n\t\t\telif ( idStr == refPosDivId):\n\t\t\t\tposData = e.innerHTML.split(' | ')\n\t\t\telse:\n\t\t\t\t# Unknown Element - very strange\n\t\t\t\tpass\n\t\treturn(posData, resultData)\n\n\ndef getRowClsName(name):\n\t\"\"\" Utility method for naming the test module class that\n\t    a row belows to\n\t\"\"\"\n\treturn(\"mod-\" + name)\n\n\nclass JSTesterUI(object):\n\t\"\"\" This class contains the code that populates the autotester results\n\twhile running in the javascript runtime.\n\t\"\"\"\n\tdef __init__(self):\n\t\t\"\"\"\n\t\t\"\"\"\n\t\tself.expander = TestModuleExpander()\n\n\tdef setOutputStatus(self, success):\n\t\tif ( success ):\n\t\t\tdocument.getElementById(messageDivId).innerHTML = '<div style=\"color: {}\">Test succeeded</div>'.format (okColor)\n\t\telse:\n\t\t\tdocument.getElementById(messageDivId).innerHTML = '<div style=\"color: {}\"><b>Test failed</b></div>'.format (errorColor)\n\n\tdef appendSeqRowName(self, name, errCount):\n\t\t\"\"\"\n\t\t\"\"\"\n\t\ttable = document.getElementById(tableId)\n\t\t# Insert at the end\n\t\trow = table.insertRow(-1);\n\t\trow.id = name\n\t\trow.classList.add(testletHeaderClass)\n\t\tself.expander.setupCollapseableHeader(row, (errCount == 0))\n\n\t\t# Populate the Row\n\t\theaderCell = row.insertCell(0)\n\t\theaderCell.innerHTML = name + \" | Errors = \" + str(errCount)\n\t\theaderCell.colSpan = 4\n\t\theaderCell.style.textAlign= \"center\"\n\n\n\tdef appendTableResult(self, name, testPos, testItem, refPos, refItem, collapse=False):\n\t\tclsName = getRowClsName(name)\n\n\t\ttable = document.getElementById(tableId)\n\t\t# Insert at the end\n\t\trow = table.insertRow(-1);\n\t\trow.classList.add(clsName)\n\t\tif ( testItem != refItem ):\n\t\t\trow.classList.add(faultRowClass)\n\t\t\trefPos = \"!!!\" + refPos\n\t\telse:\n\t\t\tself.expander.setCollapsed(row, collapse)\n\n\t\t# Populate the Row\n\t\tcpy_pos = row.insertCell(0)\n\t\tcpy_pos.innerHTML = refPos\n\t\tcpy_pos.classList.add(pyPosClass)\n\t\tcpy_val = row.insertCell(1)\n\t\tcpy_val.innerHTML = refItem\n\t\tcpy_val.classList.add(pyValClass)\n\t\ttrans_val = row.insertCell(2)\n\t\tif ( testItem is not None ):\n\t\t\ttrans_val.innerHTML = testItem\n\t\ttrans_val.classList.add(transValClass)\n\t\ttrans_pos = row.insertCell(3)\n\t\tif ( testPos is not None ):\n\t\t\ttrans_pos.innerHTML = testPos\n\t\ttrans_pos.classList.add(transPosClass)\n\n\n\tdef showException(self, testname, exc):\n\t\t\"\"\"\n\t\t\"\"\"\n\t\texcElem = document.getElementById(excAreaId)\n\t\theader = document.createElement(\"H2\")\n\t\theader.classList.add(excHeaderClass)\n\t\theader.innerHTML = \"Exception Thrown in JS Runtime\";\n\t\texcElem.appendChild(header)\n\t\tcontent = document.createElement(\"p\")\n\t\tcontent.innerHTML = \"Exception in {}: {}\".format(testname, str(exc))\n\t\texcElem.appendChild(content)\n\t\tstacktrace = document.createElement(\"p\")\n\t\tif ( exc.stack is not None ):\n\t\t\tstacktrace.innerHTML = str(exc.stack)\n\t\telse:\n\t\t\tstacktrace.innerHTML = \"No Stack Trace Available!\"\n\n\nclass TestModuleExpander(object):\n\t\"\"\" This class handles expanding or contracting a set of\n\ttest row results under a particular test.\n\t\"\"\"\n\tdef __init__(self):\n\t\t\"\"\"\n\t\t\"\"\"\n\t\tself.collapsedClass = \"collapsed\"\n\t\tself.modCollapseClass = \"mod-collapsed\"\n\n\t\tself._expandCollapseAllFuncs()\n\n\tdef setCollapsed(self, row, collapse):\n\t\t\"\"\"\n\t\t\"\"\"\n\t\tif ( collapse ):\n\t\t\trow.classList.add(self.collapsedClass)\n\t\telse:\n\t\t\trow.classList.remove(self.collapsedClass)\n\n\n\tdef setupCollapseableHeader(self, row, startCollapsed = False):\n\t\t\"\"\"\n\t\t\"\"\"\n\t\tif ( startCollapsed ):\n\t\t\trow.classList.add(self.modCollapseClass)\n\n\t\tdef toggleCollapse(evt):\n\t\t\t\"\"\" Toggle whether the\n\t\t\t\"\"\"\n\t\t\theaderRow = evt.target.parentElement\n\t\t\tdoCollapse = not headerRow.classList.contains(self.modCollapseClass)\n\t\t\tself.collapseModule(headerRow, doCollapse)\n\n\t\trow.onclick = toggleCollapse\n\n\n\tdef collapseModule(self, headerRow, doCollapse):\n\t\t\"\"\" collapse/expand particular module in the table of results\n\t\t\"\"\"\n\t\tname = headerRow.id\n\t\ttable = document.getElementById(tableId)\n\t\tclsName = getRowClsName(name)\n\t\tallRows = table.tHead.children\n\t\trows = filter(lambda x: x.classList.contains(clsName), allRows)\n\n\t\tfor row in rows:\n\t\t\tself.setCollapsed(row, doCollapse)\n\n\t\tif ( doCollapse ):\n\t\t\theaderRow.classList.add(self.modCollapseClass)\n\t\telse:\n\t\t\theaderRow.classList.remove(self.modCollapseClass)\n\n\tdef _expandCollapseAllFuncs(self):\n\t\t\"\"\" This function sets up the callback handlers for the\n\t\tcollapse all and expand all links\n\t\t\"\"\"\n\n\t\tdef applyToAll(evt, collapse):\n\t\t\t\"\"\"\n\t\t\t\"\"\"\n\t\t\ttable = document.getElementById(tableId)\n\n\t\t\t# find all rows in the testletheader class\n\t\t\tfiltFunc = lambda x: x.classList.contains(testletHeaderClass)\n\t\t\theaderRows = filter(filtFunc, table.tHead.children)\n\n\t\t\tfor headerRow in headerRows:\n\t\t\t\tself.collapseModule(headerRow, collapse)\n\n\t\tdef collapseAll(evt):\n\t\t\t\"\"\" collapse all rows handler\n\t\t\t\"\"\"\n\t\t\tevt.preventDefault()\n\t\t\tapplyToAll(evt, True)\n\t\t\treturn(False)\n\n\t\tdef expandAll(evt):\n\t\t\t\"\"\" Expand All Rows Handler\n\t\t\t\"\"\"\n\t\t\tevt.preventDefault()\n\t\t\tapplyToAll(evt, False)\n\t\t\treturn(False)\n\n\t\tforceCollapse = document.getElementById(forceCollapseId)\n\t\tforceCollapse.onclick = collapseAll\n\n\t\tforceExpand = document.getElementById(forceExpandId)\n\t\tforceExpand.onclick = expandAll\n"
	],
	"mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAKA;AAAA;AAAA;AAAA;AAOA;AAAA;AAEA;AAAA;AAAA;AAAA;AAWA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AAAA;AAAA;AAMA;AACA;AAyCA;AAAA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAMA;AAOA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AAIA;AAAA;AAGA;AAAA;AAIA;AAGA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AAIA;AAGA;AACA;AAEA;AAAA;AAEA;AAGA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAEA;AAGA;AACA;AACA;AAAA;AAEA;AAAA;AAGA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AAKA;AAGA;AAGA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAEA;AAGA;AACA;AACA;AAAA;AAEA;AAGA;AACA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA"
}