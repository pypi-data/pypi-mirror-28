{
	"version": 3,
	"file": "D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/modules/cmath/__javascript__/cmath.mod.js",
	"sources": [
		"D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/modules/cmath/__init__.py"
	],
	"sourcesContent": [
		"pi = Math.PI\ne = Math.E\n\ndef phase (x):\n    return 0 if __typeof__ (x) is 'number' else Math.atan2 (x.imag, x.real)\n    \ndef polar (x):\n    return (Math.abs (x), 0) if __typeof__ (x) is 'number' else (abs (x), phase (x))\n    \ndef rect (r, phi):\n    __pragma__ ('opov')\n    return r * (Math.cos (phi) + 1.j * Math.sin (phi))\n    __pragma__ ('noopov')\n    \ndef exp (x):\n    return complex (x, 0) .__exp__ () if __typeof__ (x) is 'number' else x.__exp__ ()\n        \ndef log (x, base):\n    return (\n        complex (x, 0) .__log__ () if __typeof__ (x) is 'number' else x.__log__ ()\n    ) if base is js_undefined else (\n        __truediv__ (log (x), log (base))   # Recursive\n    )\n    \ndef log10 (x):\n    return log (x, 10)\n    \ndef sqrt (x):\n    return exp (__mul__ (log (x), 0.5))\n    \n__pragma__ ('opov')\n\ndef sin (x):\n    return -0.5j * (exp (1j * x) - exp (-1j * x))\n\ndef cos (x):\n    return 0.5 * (exp (1j * x) + exp (-1j * x))\n\ndef tan (x):\n    return -1j * (exp (1j * x) - exp (-1j * x)) / (exp (1j * x) + exp (-1j * x))\n\ndef asin (x):\n    return -1j * log (1j * x + sqrt (1 - x * x))\n\ndef acos (x):\n    return -1j * log (x + 1j * sqrt (1 - x * x))\n    \ndef atan (x):\n    return 0.5j * log ((1j + x) / (1j - x))\n\ndef sinh (x):\n    return 0.5 * (exp (x) - exp (-x))\n\ndef cosh (x):\n    return 0.5 * (exp (x) + exp (-x))\n\ndef tanh (x):\n    return (exp (x) - exp (-x)) / (exp (x) + exp (-x))\n\ndef asinh (x):\n    return log (x + sqrt (1 + x * x))\n\ndef acosh (x):\n    return log (x + sqrt (-1 + x * x))\n    \ndef atanh (x):\n    return 0.5 * log ((1 + x) / (1 - x))\n\n__pragma__ ('noopov')\n\ndef isinf (x):\n    return x.real == js_Infinite or x.imag == js.Infinite\n\ndef isfinite (x):\n    return not isinf (x)\n\ndef isnan (x):\n    return js_isNaN (x.real) or js_isNaN (x.imag)\n    "
	],
	"mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AAEA;AACA;AAEA;AACA;AAAA;AAEA;AAIA;AAAA;AAGA;AACA;AAAA;AAEA;AACA;AAAA;AAIA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAIA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA"
}