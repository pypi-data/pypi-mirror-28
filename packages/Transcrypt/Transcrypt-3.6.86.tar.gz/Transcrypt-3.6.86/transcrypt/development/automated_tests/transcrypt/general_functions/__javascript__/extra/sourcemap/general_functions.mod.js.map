{
	"version": 3,
	"file": "D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/development/automated_tests/transcrypt/general_functions/__javascript__/general_functions.mod.js",
	"sources": [
		"D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/development/automated_tests/transcrypt/general_functions/__init__.py"
	],
	"sourcesContent": [
		"from org.transcrypt.stubs.browser import __pragma__\n\nclass A:\n    foo='bar'\n    def __init__ (self):\n        self.foo2 = 'bar2'\n\nclass B (A):\n    foo3='bar3'\n    def __init__ (self):\n        self.foo4 = 'bar4'\n        \nclass C:\n    def __len__ (self):\n        return 42\n\ndef run (autoTester):\n    autoTester.check ('len')\n\n    strings = ['hello', ',', 'world', '!']\n    instances = [C()]\n    collections = [\n        [], [1], [1, 2],\n        tuple(), (1,), (1, 2),\n        {}, {1: 1}, {1: 1, 2: 2}\n    ]\n\n    for string in strings:\n        autoTester.check (len (string))\n\n    for instance in instances:\n        autoTester.check (len (instance))\n\n    for collection in collections:\n        autoTester.check (len (collection))\n\n    autoTester.check ('sort and sorted<br>')\n    a = [1, 5, 3, 2, -1]\n    b = ['sun', 'earth', 'moon']\n    \n    autoTester.check (sorted (a))\n    autoTester.check (sorted (b))\n    \n    a.sort ()\n    autoTester.check (a)\n    \n    b.sort ()\n    autoTester.check (b)\n\n    autoTester.check (sorted (a, reverse = True))\n    autoTester.check (sorted (b, reverse = True))\n    \n    a.sort (reverse = True)\n    autoTester.check (a)\n    \n    b.sort (reverse = True)\n    autoTester.check (b)\n    \n    b.sort (key = lambda x: len (x)) \n    autoTester.check (b)\n\n    b.sort (key = lambda x: len (x), reverse = True) \n    autoTester.check (b)\n\n    autoTester.check ('<br><br>dir<br>')\n    autoTester.check ([entry for entry in dir (A) if not entry.startswith ('__')])\n    autoTester.check ([entry for entry in dir (A()) if not entry.startswith ('__')])\n    autoTester.check ([entry for entry in dir (B) if not entry.startswith ('__')])\n    autoTester.check ([entry for entry in dir (B()) if not entry.startswith ('__')])\n\n    autoTester.check ('<br><br>any, all, sum<br>')\n    list1 = ['ape', 'node', 'mice']\n    list2 = ['vim', '', 'jet']\n    list3 = ['', '', '']\n    list4 = [[1, 2], [1], []]   # Truthyness into play\n    autoTester.check (list1, any (list1), all (list1))\n    autoTester.check (list2, any (list2), all (list2))\n    autoTester.check (list3, any (list3), all (list3))\n    autoTester.check (list4, any (list4), all (list4))\n    \n    autoTester.check (sum (range (5)))\n    \n    __pragma__ ('ifdef', '__esv6__')\n    if '__esv6__' in autoTester.symbols:    \n        def generator1 ():\n            for i in range (5):\n                yield i;\n                \n        def generator2 ():\n            for i in range (5):\n                if i % 2:\n                    yield 0\n                else:\n                    yield i;\n                    \n        def generator3 ():\n            for i in range (5):\n                yield 0;\n                \n        autoTester.check (generator1 (), any (generator1 ()), all (generator1 ()))\n        autoTester.check (generator2 (), any (generator2 ()), all (generator2 ()))\n        autoTester.check (generator3 (), any (generator3 ()), all (generator3 ()))\n        \n        autoTester.check (sum (generator1 ()))\n    __pragma__ ('endif')\n"
	],
	"mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AAGA;AAIA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA"
}