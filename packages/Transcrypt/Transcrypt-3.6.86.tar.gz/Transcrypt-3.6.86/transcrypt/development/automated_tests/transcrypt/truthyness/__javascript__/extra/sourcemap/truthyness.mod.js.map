{
	"version": 3,
	"file": "D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/development/automated_tests/transcrypt/truthyness/__javascript__/truthyness.mod.js",
	"sources": [
		"D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/development/automated_tests/transcrypt/truthyness/__init__.py"
	],
	"sourcesContent": [
		"from org.transcrypt.stubs.browser import __pragma__\n\n__pragma__ ('tconv')\n\ndef run (autoTester):\n    autoTester.check (len ({1:2}))\n\n    autoTester.check ('Select nonemtpy container, if any<br>')\n\n    autoTester.check ((0) or (1, 2, 3))\n    autoTester.check (() or (1, 2, 3))\n    autoTester.check (() or ())\n    \n    autoTester.check ((-1) or (0) or (1, 2, 3))\n    autoTester.check (() or (0) or (1, 2, 3))\n    autoTester.check (() or () or (1, 2, 3))\n    autoTester.check (() or () or ())\n    \n    autoTester.check ([0] or [1, 2, 3])\n    autoTester.check ([] or [1, 2, 3])\n    autoTester.check ([] or [])\n    \n    autoTester.check ([-1] or [0] or [1, 2, 3])\n    autoTester.check ([] or [0] or [1, 2, 3])\n    autoTester.check ([] or [] or [1, 2, 3])\n    autoTester.check ([] or [] or [])\n    \n    autoTester.check ({0} or {1, 2, 3, 4})\n    autoTester.check (set () or {1, 2, 3, 4})\n    autoTester.check (set () or set ())\n    \n    autoTester.check ({-1} or {0} or {1, 2, 3, 5})\n    autoTester.check (set () or {0} or {1, 2, 3, 6})\n    autoTester.check (set () or set () or {1, 2, 3, 7})\n    autoTester.check (set () or set () or set ())\n    \n    autoTester.check ({0:10} or {1:11, 2:12, 3:13})\n    autoTester.check ({} or {1, 2, 3, 8})\n    autoTester.check ({} or {})\n    \n    autoTester.check ({-1:-11} or {0:10} or {1:11, 2:12, 3:13})\n    autoTester.check ({} or {0:10} or {1:11, 2:12, 3:13})\n    autoTester.check ({} or {} or {1:11, 2:12, 3:13})\n    autoTester.check ({} or {} or {})\n    \n    autoTester.check ('<br><br>')\n    autoTester.check ('Boolean evaluations')\n    for expression in (\n        '<br> -- falsy -- <br>',\n        (),\n        [],\n        set (),\n        {},\n        0,\n        '',\n        3 > 5,\n        False,\n        '<br> -- truthy -- <br>',\n        (1, 2, 3),\n        [1, 2, 3],\n        {1, 2, 3},\n        {'a': 1, 'b': 2, 'c': 3},\n        3,\n        'hello',\n        5 > 3,\n        True\n    ):\n        if expression in ('<br> -- falsy -- <br>', '<br> -- truthy -- <br>'):\n            autoTester.check (expression)\n        else:\n            autoTester.check (expression, ' . . . ')\n            autoTester.check ('operators')\n            autoTester.check (not not expression)\n            autoTester.check (not not (True and expression))\n            autoTester.check (not not (False or expression))\n            autoTester.check (not not (expression and True))\n            autoTester.check (not not (expression and False))\n            \n            autoTester.check ('if')\n            if expression:\n                autoTester.check (True)\n            else:\n                autoTester.check (False)\n                \n            if expression or expression:\n                autoTester.check (True)\n            else:\n                autoTester.check (False)\n                \n            if False:\n                autoTester.check ('if')\n            elif expression:\n                autoTester.check ('elif')\n            else:\n                autoTester.check ('else')\n                \n            autoTester.check ('while')\n            while expression:\n                autoTester.check (True)\n                break\n                \n            autoTester.check ('condex')\n            autoTester.check (True if expression else False)\n            \n    if (0.0):\n        autoTester.check ('0.0')\n    elif (0.1):\n        autoTester.check ('0.1')\n    else:\n        autoTester.check ('Shouldn\\'t be here...')\n        \n    class A:\n        pass\n        \n    class B:\n        def __bool__ ( self):\n            return False\n\n    class C:\n        def __bool__ (self):\n            return True\n\n        def __len__ (self):\n            return 0\n\n    class D:\n        def __len__ (self):\n            return 0\n\n    class E:\n        def __len__ (self):\n            return 1\n\n    autoTester.check ('instances of custom classes')\n    autoTester.check (not not A ())\n    autoTester.check (not not B ())\n    autoTester.check (not not C ())\n    autoTester.check (not not D ())\n    autoTester.check (not not E ())\n    \n"
	],
	"mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAKA;AAgBA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAGA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA"
}