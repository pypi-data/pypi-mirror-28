{
	"version": 3,
	"file": "D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/development/automated_tests/transcrypt/metaclasses/__javascript__/metaclasses.mod.js",
	"sources": [
		"D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/development/automated_tests/transcrypt/metaclasses/__init__.py"
	],
	"sourcesContent": [
		"from org.transcrypt.stubs.browser import __pragma__\n\nclass UppercaserMeta (type):\n    def __new__ (meta, name, bases, attribs):\n        __pragma__ ('jsiter')       # Translate for ... in directly to JavaScript for ... in ... and translate {} to bare {} rather than to dict {}\n                                    # Using bare {} as attribs parameter to __new__ avoids dict attributes masking regular attributes\n                                    # For more flexibility use __pragma__ ('js', '{}', '''...''')\n        upperAttribs = {}\n        \n        for attribKey in attribs:   # Translates to 'for (var attribKey in attribs)' by virtue of __pragma__ ('jsiter'), to iterate over the attributes of a bare JavaScript {}\n            upperAttribs [attribKey if  attribKey.startswith ('__') else attribKey.upper ()] = attribs [attribKey]\n            \n        __pragma__ ('nojsiter')\n            \n        return type.__new__ (meta, name, bases, upperAttribs)\n\nclass Uppercaser (metaclass = UppercaserMeta):\n    pass\n    \nclass Animal (Uppercaser):\n    class Thoughts:\n        quantity = 7\n\n    # Limitation: no destructuring assignment if metaclass has to alter attributes\n    color = 'Brown'\n    state = 'Moving'\n\n    def move (self):\n        return 'Move'\n\nclass Plant (Uppercaser):\n    class Thoughts:\n        quantity = 6\n\n    color = 'Green'\n    state = 'Growing'\n\n    def grow (self):\n        return 'Grow'\n        \nclass Stone:\n    class Thoughts:\n        quantity = 5\n\n    color = 'Gray'\n    \n    def be (self):\n        return ('Being')\n\ndef run (autoTester):\n    animal = Animal ()\n    autoTester.check (animal.THOUGHTS.quantity, Animal.COLOR, animal.COLOR, animal.MOVE ())\n    \n    plant = Plant ()\n    autoTester.check (plant.THOUGHTS.quantity, Plant.COLOR, plant.COLOR, plant.GROW ())\n    \n    stone = Stone ()\n    autoTester.check (stone.Thoughts.quantity, Stone.color, stone.color, stone.be ())\n    "
	],
	"mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAIA;AAEA;AACA;AAAA;AAIA;AAAA;AAAA;AAEA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AACA;AAAA;AAGA;AACA;AAEA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AAEA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA"
}