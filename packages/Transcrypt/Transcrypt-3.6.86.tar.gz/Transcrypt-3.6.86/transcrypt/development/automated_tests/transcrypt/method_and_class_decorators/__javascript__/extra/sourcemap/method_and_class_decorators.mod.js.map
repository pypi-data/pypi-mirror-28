{
	"version": 3,
	"file": "D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/development/automated_tests/transcrypt/method_and_class_decorators/__javascript__/method_and_class_decorators.mod.js",
	"sources": [
		"D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/development/automated_tests/transcrypt/method_and_class_decorators/__init__.py"
	],
	"sourcesContent": [
		"from org.transcrypt.stubs.browser import __pragma__\n\ndef run (autoTester):\n\n    class adecorator:\n        __pragma__('kwargs')\n        def __init__(self, *args, **kwargs):\n            self.args = args\n            self.kwargs = kwargs\n        __pragma__('nokwargs')\n\n        def __call__(self, func):\n            __pragma__('kwargs')\n            def wrapper(*args, **kwargs):\n                slf = args[0]\n\n                # replace and store the attributes\n                saved = {}\n                for k, v in self.kwargs.items():\n                    if hasattr(slf, k):\n                        saved[k] = getattr(slf, k)\n                        setattr(slf, k, v)\n\n                # call the method\n                ret = func(*args, **kwargs)\n\n                # put things back\n                for k, v in saved.items():\n                    setattr(slf, k, v)\n\n                return ret\n\n            __pragma__('nokwargs')\n            return wrapper\n\n    def method_decorator(prefix):\n        def inner_decorator(method):\n            def wrapper(self, name):\n                autoTester.check(name)\n                return method(self, prefix + name)\n            return wrapper\n        return inner_decorator\n\n    def method_decorator2(prefix):\n        def inner_decorator(method):\n            def wrapper(self, name):\n                autoTester.check(name)\n                return method(self, prefix + name)\n            return wrapper\n        return inner_decorator\n\n    def multiplier(m):\n        def inner_decorator(method):\n            def wrapper(self, num):\n                autoTester.check(num)\n                n = method(self, num)\n                return n * m\n            return wrapper\n        return inner_decorator\n\n    def classmethod_decorator(method):\n\n        def wrapper(cls, a, b):\n            autoTester.check(cls.__name__, a, b)\n            return method(cls, b, a)\n\n        return wrapper\n\n    def class_decorator(prefix):\n\n        def wrapper(cls):\n            autoTester.check(prefix + cls.__name__)\n            return cls\n\n        return wrapper\n\n    @class_decorator('outer_')\n    class MyClass:\n\n        @class_decorator('inner_')\n        class InnerClass:\n            @method_decorator('inner_first_')\n            @method_decorator2('inner_second_')\n            def mymethod(self, name):\n                autoTester.check(name)\n\n            @classmethod\n            @classmethod_decorator\n            def myclassmethod(cls, a, b):\n                autoTester.check(cls.__name__, a, b)\n                return a + b\n\n            @staticmethod\n            def mystaticmethod(a, b):\n                autoTester.check(a, b)\n                return a + b\n\n            @property\n            def inner_property(self):\n                return 'I am a property'\n\n        def __init__(self):\n            self.greetings = 'Hello'\n\n        __pragma__('opov')\n        @adecorator(greetings='Goodbye')\n        def get_greetings(self):\n            return self.greetings\n        __pragma__('noopov')\n\n        @method_decorator('first_')\n        @method_decorator2('second_')\n        def mymethod(self, name):\n            autoTester.check(name)\n\n        @multiplier(5)\n        def number(self, num):\n            return num\n\n        @classmethod\n        def myclassmethod(cls, a, b):\n            autoTester.check(cls.__name__, a, b)\n            return a + b\n\n        @staticmethod\n        def mystaticmethod(a, b):\n            autoTester.check(a + b)\n            return a + b\n\n        @property\n        def simple_property(self):\n            return self.greetings\n\n        @simple_property.setter\n        def simple_property(self, value):\n            self.greetings = value\n\n        def run(self):\n            inner_obj = self.InnerClass()\n            inner_obj.mymethod('Dog')\n            result1 = inner_obj.myclassmethod('param1', 'param2')\n            result2 = self.InnerClass.myclassmethod('param1', 'param2')\n            autoTester.check(result1 == result2)\n            result1 = inner_obj.mystaticmethod('param1', 'param2')\n            result2 = self.InnerClass.mystaticmethod('param1', 'param2')\n            autoTester.check(result1 == result2)\n            autoTester.check(inner_obj.inner_property)\n\n    myobj = MyClass()\n    myobj.mymethod('Cat')\n    autoTester.check(myobj.greetings)\n    autoTester.check(myobj.get_greetings())\n    result1 = myobj.myclassmethod('param1', 'param2')\n    result2 = MyClass.myclassmethod('param1', 'param2')\n    autoTester.check(result1 == result2)\n    result1 = myobj.mystaticmethod('param1', 'param2')\n    result2 = MyClass.mystaticmethod('param1', 'param2')\n    autoTester.check(result1 == result2)\n    autoTester.check(myobj.number(3))\n    autoTester.check(myobj.simple_property)\n    myobj.simple_property = 'New value'\n    autoTester.check(myobj.simple_property)\n    autoTester.check(myobj.greetings == myobj.simple_property)\n    myobj.run()\n"
	],
	"mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AAGA;AACA;AAAA;AAEA;AAAA;AAGA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AAAA;AAEA;AAAA;AAEA;AAEA;AACA;AACA;AAAA;AAEA;AAAA;AAEA;AAGA;AAAA;AAAA;AAGA;AAEA;AAAA;AAEA;AAGA;AACA;AAAA;AAEA;AAEA;AACA;AAAA;AAEA;AAEA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAGA;AAEA;AAAA;AAEA;AAEA;AAAA;AAEA;AAEA;AACA;AAAA;AAEA;AAEA;AACA;AAAA;AAEA;AAEA;AAAA;AAEA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA"
}