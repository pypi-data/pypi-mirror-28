{
	"version": 3,
	"file": "D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/development/automated_tests/transcrypt/dictionaries/__javascript__/dictionaries.mod.js",
	"sources": [
		"D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/development/automated_tests/transcrypt/dictionaries/__init__.py"
	],
	"sourcesContent": [
		"from org.transcrypt.stubs.browser import __pragma__\n__pragma__ ('iconv')\n\n# Dictionaries are translated to JavaScript objects,\n# to achieve JSON-compatible syntax for JavaScript library object initialisation.\n# Keys that may denote a number are interpreted as such in Transcrypt.\n# All other keys are interpreted as strings.\n\ndef run (autoTester):\n    tel = {'guido': 4127, 'jack': 4098}\n    autoTester.check (len (tel))\n    tel ['sape'] = 4139\n\n    autoTester.check (tel)\n    autoTester.check (tel ['jack'])\n\n    del tel ['sape']\n    tel ['irv'] = 4127\n    autoTester.check (tel)\n\n    autoTester.check (sorted (list (tel.keys ())), False)\n    autoTester.check (sorted (tel.keys ()))\n\n    autoTester.check ('guido' in tel)\n    autoTester.check ('jack' not in tel)\n\n    autoTester.check (dict ([('guido', 4127), ('jack', 4098), ('sape', 4139)]))\n    autoTester.check (\n        autoTester.expectException( lambda: dict(1) )\n    )\n    autoTester.check (\n        autoTester.expectException( lambda: dict(134.34) )\n    )\n    autoTester.check (\n        autoTester.expectException( lambda: dict('asdf') )\n    )\n    autoTester.check (\n        autoTester.expectException( lambda: dict(['1234', 1]) )\n    )\n\n    autoTester.check( dict ([]))\n    autoTester.check (dict ({}))\n    autoTester.check (dict ({'asdf': 1, 'qwer': 2}) )\n\n    # check dict copy, Issue # 221\n    b = {'a' : 2.01, 'b': -3.3}\n    d = dict (b)\n    autoTester.check (d)\n    b = {'a' : 2, 'b': [1,2,3]}\n    d = dict (b)\n    autoTester.check (d)\n    b = {'a' : None, 'b': set([1,2,3])}\n    d = dict (b)\n    autoTester.check (d)\n    b = {'a' : {'c': 2}, 'b': (1,2)}\n    d = dict (b)\n    autoTester.check (d)\n    autoTester.check (d['a']['c'])\n    autoTester.check (d.get('a').get('c'))\n    autoTester.check (b.get('a').get('c'))\n    d['a']['c'] = 3\n    autoTester.check (d.get('a').get('c'))\n    autoTester.check (b.get('a').get('c'))\n\n    knights = {'robin': 'the brave', 'gallahad': 'the pure'}\n\n    for k, v in sorted (knights.items ()):\n        autoTester.check (k, v)\n\n    if 'gallahad' in knights:\n        autoTester.check ('gallahad is a knight') \n\n    for k in sorted (knights):\n        autoTester.check (k)\n        \n    knight = {'rudolph': 'the righteous'}\n    for k in knight:    # Autotest automatic conversion with one knight, since sort order of dict undefined\n        autoTester.check (k)\n        \n    tel = {'guido': 123}\n    tel.update({'edsger': 42})\n    autoTester.check (tel.setdefault ('linus', 456))\n    autoTester.check (tel ['linus'])\n    autoTester.check (tel.setdefault ('guido', 789))\n    autoTester.check (tel.pop ('guido', 1))\n    autoTester.check (tel.pop ('guido', 1))\n    autoTester.check (tel.pop ('edsger', 2))\n    autoTester.check (tel.pop ('foo', 'bar'))\n    autoTester.check (tel.pop ('foo', None))\n\n    # Check compound keys (issue 281)\n    \n    d = {}\n    d ['a'] = 3777\n    d [(1, 2)] = 4777\n    autoTester.check (d ['a'], d [(1, 2)])\n\n    __pragma__ ('opov')\n    d = {}\n    d ['a'] = 3777\n    d [(1, 2)] = 4777\n    autoTester.check (d ['a'], d [(1, 2)])\n    __pragma__ ('noopov')\n    \n    # Check exceptions\n    knights = {'robin': 'the brave', 'gallahad': 'the pure'}\n    autoTester.check (\n        autoTester.expectException ( lambda: knights.pop(\"batman\") )\n    )\n    autoTester.check (\n        autoTester.expectException ( lambda: knights.pop(\"batman\", None) )\n    )\n    autoTester.check (\n        autoTester.expectException ( lambda: knights.pop(\"batman\", \"the gullible\") )\n    )\n"
	],
	"mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAGA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AAAA;AAAA;AAGA;AAAA;AAAA;AAGA;AAAA;AAAA;AAGA;AAAA;AAAA;AAGA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAIA;AAEA;AAAA;AAAA;AAGA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA"
}