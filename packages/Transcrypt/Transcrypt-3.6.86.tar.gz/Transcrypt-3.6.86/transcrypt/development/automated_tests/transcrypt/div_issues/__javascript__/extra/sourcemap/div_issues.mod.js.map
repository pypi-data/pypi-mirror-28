{
	"version": 3,
	"file": "D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/development/automated_tests/transcrypt/div_issues/__javascript__/div_issues.mod.js",
	"sources": [
		"D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/development/automated_tests/transcrypt/div_issues/__init__.py"
	],
	"sourcesContent": [
		"from org.transcrypt.stubs.browser import __pragma__, __new__, __envir__, __symbols__\n\nfrom div_issues.issue55 import *        # Names not exported from package's __init__.py, no output, only compilation check\nfrom div_issues.issue387 import run387       # Support __module__ and __qualname__ for introspection (only __module__ done and\n                                        # __name__ set to '__main__ for main module'\n\ndef run (autoTester):\n    autoTester.check ('Issue 24')   # Non keyword switch generates javascript SyntaxError\n    switch = False\n    autoTester.check (switch)\n    \n    autoTester.check ('Issue 27')   # Python list.index () not translated correctly\n    autoTester.check (['zero', 'one', 'two', 'three', 'four'] .index ('three'))\n    \n    autoTester.check ('Issue 36')   # Bug in compiling lambda default argument values\n    # Workaround for Python closures capturing variables rather than values\n    # An extra enclosing scope is created to remember the value of the variable\n    results = []\n    for i in range (10):\n        # results.append (lambda: i)                # Works nowhere\n        # results.append (lambda j = i: j)          # Works only in Python\n        results.append ((lambda j: lambda: j) (i))  # Works in Python and Transcrypt\n    autoTester.check ([result () for result in results])        \n\n    autoTester.check ('Issue 37')   # Python integer division not translated correctly\n    autoTester.check (15 // 7)\n    \n    autoTester.check ('Issue 40')   # Python parentheses dropped during translation\n    autoTester.check (65 / (5 * 2))\n\n    autoTester.check ('Issue 50')   # Wrong answer with parentheses moved during translation\n    autoTester.check ((240 + 30 - 1) // 30 * 30)\n    \n    autoTester.check ('Issue 51')   # Wrong answer with set() compare\n    a = 1\n    b = 1\n    autoTester.check (a, b, {a, b} == {1, 2})\n    \n    autoTester.check ('Issue 52')   # Non keyword 'default' generates javascript SyntaxError\n    switch, case, default = 'switch', 'case', 'default'\n    autoTester.check (switch, case, default)\n    \n    autoTester.check ('Issue 54')   # Type dict missing clear(), setdefault()\n    aDict = {1: 11, 2: 22, 3: 33}\n    autoTester.check (aDict)\n    aDict.clear ()\n    autoTester.check (aDict)\n    \n    autoTester.check ('Issue 60')   # Python bool() not translated\n    three = 3\n    one = three & 1\n    seven = three | 4\n    eight = one << 3\n    four = eight >> 1\n    aTrue = bool (three & one)\n    aFalse = bool (three & four)\n    autoTester.check (3, three, 1, one, 7, seven, 8, eight, 4, four, True, aTrue, False, aFalse)\n    \n    autoTester.check ('Issue 65')   # Adding two lists with + not supported\n    __pragma__ ('opov')\n    aList = [4, 5, 6]\n    autoTester.check ([1, 2, 3,] + aList + [4, 5, 6])\n    autoTester.check (3 * [1, 2, 3])\n    autoTester.check ([1, 2, 3] * 3)\n    aString = 'Crocodile'\n    autoTester.check ('Tiger' + aString + 'Elephant')\n    autoTester.check (3 * aString)\n    autoTester.check (aString * 3)\n    __pragma__ ('noopov')\n    \n    autoTester.check ('Issue 76')   # Python //= not translated correctly\n    initially17 = 17\n    autoTester.check (initially17)\n    initially17 //= 2\n    autoTester.check (initially17)\n    initially17 //= 2\n    autoTester.check (initially17)\n    \n    autoTester.check ('Issue 112')  # When using -e6, iterating TypedArrays or other non-list Iterables doesn't work\n    try:\n        if __envir__.executor_name == __envir__.transpiler_name: # CPython doesn't know Int8Array\n            x = __new__ (Int8Array (2))\n        else:\n            x = [None, None]\n        \n        x [0] = 3\n        x [1] = 2\n        for i in x:\n            autoTester.check (i)\n        \n        # Since JavaScript 5 gives no exception for a loop over a non-iterable, following code must only be executed for JavaScript 6\n        # Since Transcrypt doesn't get to see all modules loaded by CPython, __ifdef__ cannot be made to do its thing for all modules in an efficient way for CPython\n        # But a normal 'if' will work\n        if '__esv6__' in __symbols__:\n            y = 3\n            for j in y:\n                autoTester.check (j)\n            \n    except: # No 'Exception' can be used behind this, since this is a JavaScript exception, and no subclass of Exception. ??? How desirable is this behaviour?\n        pass\n        # autoTester.check ('Detected iterating over non-iterable') # Minifier masks this exception, so we'll have to pass\n        \n    if '__esv6__' in __symbols__:   # \"if\" rather than \"__pragma__ ('ifdef')\" because CPython doesn't understand pragma's\n        autoTester.check ('Issue 122')  # Problem with yield (or rather with slicing beyond list end)\n        \n        def chunks (aList, chunkLength):\n            for index in range (0, len (aList), chunkLength):\n                yield aList [index : index + chunkLength]\n\n        for chunk in chunks ([chr (index + 97) for index in range (26)], 10):\n            autoTester.check (chunk)\n\n    autoTester.check ('Issue 123')  # Python % shouldn't behave like JS %\n    autoTester.check (10 % 3, 10 % -3, -10 % 3, -10 % -3, 10 % 10, 10 % -10, -10 % 10, -10 % -10)\n    \n    autoTester.check ('Issue 125')  # Strings not iterable\n    abc = 'abc'\n    \n    for index in abc:\n        autoTester.check (abc)\n        \n    autoTester.check ('Issue 127')  # Can't use the key 'keys' in a dict\n    autoTester.check ({\"include_docs\": \"true\", \"keys\": [\"key1\", \"key2\"], \"limit\": 50})\n    \n    autoTester.check ('Issue 134')  # Operator %= translated incorrectly\n    x0, x1, x2, x3, x4, x5 = 5, 12, -5, -5, 0, 0\n    x0 %= 10; x1 %= 5; x2 %= 2; x3 %= -3; x4 %= 1; x5 %= -1000 \n    autoTester.check (x0, x1, x2, x3, x4)\n    \n    autoTester.check ('Issue 136')  # Method dict.get(key[, default]) not implemented\n    aDict = {'a': 'ape', 'b': 'banana'}\n    autoTester.check (aDict.get ('a', 'noApe'), aDict.get ('b'), aDict.get ('c', 'noCarot'), aDict.get ('d'))\n    \n    autoTester.check ('Issue 144')\n    __pragma__('opov')\n    aList = [x for x in [1, 2, 3]]\n    autoTester.check (aList)\n    __pragma__('noopov')    \n    \n    autoTester.check ('<br><br>Issue 145<br>')  # List sorting incorrect in case of multiple columns\n    \n    class SortTest:\n        def __init__ (self):\n            self.alphabet = 'abcdefghijklmnopqrstuvwxyz'\n            self.nChars = 10\n            self.nCols = 10\n            self.nRows = 30\n            \n            self.pseudoRandom = 0\n            \n            def randomWord ():\n                word = ''\n                for iChar in range (self.nChars):\n                    self.pseudoRandom = (81212 * self.pseudoRandom + 28411) % 134456\n#                   self.pseudoRandom = (1234 * self.pseudoRandom + 57) % 137           # Deliberately short period\n                    word += self.alphabet [self.pseudoRandom % 26]\n                return word \n        \n            self.rows = [[randomWord () for iCol in range (self.nCols)] for iRow in range (self.nRows)]\n                \n        def sort (self):\n            for iCol in reversed (range (self.nCols)):\n                self.rows.sort (key = lambda row: row [iCol])\n            \n    sortTest = SortTest ()\n    \n    autoTester.check ('<br>Unsorted:<br>')\n    for row in sortTest.rows:\n        autoTester.check ('{}<br>'.format (','.join ([word for word in row])))\n        \n    sortTest.sort ()\n    \n    autoTester.check ('<br>Sorted:<br>')\n    for row in sortTest.rows:\n        autoTester.check ('{}<br>'.format (','.join ([word for word in row])))\n        \n    autoTester.check ('<br><br>Issue 148<br>')  # Allow key a.o. key 'items' in dict\n    \n    aDict = {\n        'items': [4, 5, 6]\n    }\n\n    for aKey, aValue in aDict.items ():\n        autoTester.check ('{}: {}'.format (aKey, aValue))   \n        \n    autoTester.check ('<br><br>Issue 169<br>')  # Add support for float('inf') and float('-inf')\n    \n    autoTester.check (int (1 / float ('inf')), int (1 / float ('-inf')))\n    \n    autoTester.check ('<br><br>Issue 178<br>')  # List Comprehensions / Operator Precedence Bug\n    \n    bitmaps = [\n        (2 , ''),\n        (4 , ''),\n        (8, 'i'),\n        (16, 'm'),\n        (32, 'y'),\n        (64, 'u'),\n        (128, 'g')\n    ]\n    \n    for flags in (122, 233, 11, 55, 79, 201, 23, 111, 200, 100, 50, 25, 12, 6):\n        autoTester.check  (''.join ([x [1] for x in bitmaps if (x [0] & flags) > 0]))\n        \n    def issue256 ():\n        autoTester.check ('Issue 256')\n\n        class C:\n            def __init__ (self, value):\n                self.value = value\n\n        def f1 (value):  # Generate parens after return\n            return (C (value) .value or 'second') .capitalize () == 'First'\n            \n        def f2 (value):  # Generate parens after return\n            return (C (value) .value or 'second') .capitalize () == 'Second'\n            \n        def f3 (value):  # Generate NO parens after return\n            return C (value) .value or 'second'\n            \n        def f4 (value):  # Generate NO parens after return\n            return (C (value) .value or 'second')\n                \n        autoTester.check (f1 ('first'))\n        autoTester.check (f1 (''))\n        autoTester.check (f2 ('first'))\n        autoTester.check (f2 (''))\n        autoTester.check (f3 ('first'))\n        autoTester.check (f4 (''))\n        \n    issue256 ()\n    \n    autoTester.check ('Issue 274')\n    a = 3\n    del a\n    autoTester.check ('Still alive')\n\n    autoTester.check ('Issue 276')  # Partial, other part tested in testlet 'operator_overloading'\n    a = 2\n    b = a ** 3\n    a **= 4\n    autoTester.check (a, b)\n        \n    autoTester.check ('Issue 277')\n    new = 3\n    autoTester.check (new)\n    \n    autoTester.check ('Issue 279')\n    class A:\n        TypeError = 111\n        js_TypeError = 222\n    autoTester.check (A.TypeError, A.js_TypeError)  # ... Generated code should use py_TypeError and TypeError respectively    \n    autoTester.check ('Still alive')\n    \n    autoTester.check ('Issue 301')\n    def filter_word (word0, word1):\n        if len (word0) != len (word1):\n            return False\n        for char0, char1 in zip (word0, word1):\n            if char0 != '_' and char0 != char1:\n                return False\n        return True\n    autoTester.check (filter_word ('bee', 'beer'))\n    autoTester.check (filter_word ('wine', 'wine'))\n    autoTester.check (filter_word ('win_', 'wind'))\n    autoTester.check (filter_word ('_in_', 'kind'))\n    autoTester.check (filter_word ('min_', 'kind'))\n\n    autoTester.check ('Issue 306')\n    dict_306 = {'Abraham': 'Lincoln', 'Barack': 'O\\'Bama', 'Thomas': 'Jefferson'}\n    results = []\n    try:\n        while True:\n            results.append (dict_306.popitem ())\n    except Exception as exception:\n        autoTester.check (sorted (results))\n        autoTester.check ('That\\'s it')\n\n    autoTester.check ('Issue 314')\n    try:\n        autoTester.check (int (float (123)))\n    except:\n        autoTester.check ('a')\n        \n    try:\n        autoTester.check (float (12.3))\n    except:\n        autoTester.check ('b')\n        \n    try:\n        autoTester.check (int (float ('123')))\n    except:\n        autoTester.check ('c')\n        \n    try:\n        autoTester.check (int (float (' 123')))\n    except:\n        autoTester.check ('d')\n                        \n    try:\n        autoTester.check (float (''))\n    except:\n        autoTester.check ('e')\n        \n    try:\n        autoTester.check (float (' '))\n    except:\n        autoTester.check ('f')\n    try:\n        autoTester.check (float ('drie'))\n    except:\n        autoTester.check ('g')\n        \n    autoTester.check ('Issue 316')\n    \n    autoTester.check (list (filter (None, [[1, 2], [3], [], [4, 5], [6]])))\n    autoTester.check (list (filter (lambda l: len (l) >= 2, [[1, 2], [3], [], [4, 5], [6]])))\n    \n    autoTester.check ('Issue 317')\n\n    mylist = []\n    try:\n        mylist.remove ('value')\n    except ValueError as exception:\n        autoTester.check (exception.__class__.__name__)\n        \n    autoTester.check ('Issue 331')\n    \n    autoTester.check (max (-5, 4, 1, 2, -3, 2))\n    autoTester.check (max ([-5, 4, 1, 2, -3, 2]))\n    autoTester.check (max ((5, 6, 2, -2, -4)))\n\n    autoTester.check (min (-5, 4, 1, 2, -3, 2))\n    autoTester.check (min ([-5, 4, 1, 2, -3, 2]))\n    autoTester.check (min ((5, 6, 2, -2, -4)))\n    \n    autoTester.check ('issue 356')\n    \n    try:\n        raise TypeError(\"How are you?\")\n    except TypeError as exception:\n        autoTester.check (exception)\n        \n    #__pragma__ ('ifdef', '__esv6__')   # Needed because Transcrypt imports are compile time\n    if '__esv6__' in __symbols__:      # Needed because CPython doesn't understand pragma's\n        autoTester.check ('Issue 369')\n        \n        class Vector:\n            def __init__ (self, *values):\n                self.values = values\n\n            def __iter__ (self):\n                for item in self.values:\n                    yield item\n\n            def __add__(self, other):\n                return Vector (* (x + y for x, y in zip (self, other)))\n                \n            def __str__ (self):\n                return str (list (self.values))\n            \n        #__pragma__ ('opov')\n\n        autoTester.check (str (Vector (1,2,3) + Vector (3,4,5)))\n\n        #__pragma__ ('noopov')\n    #__pragma__ ('endif')\n    \n    autoTester.check ('Issue 387')\n    run387 (autoTester)\n    \n    autoTester.check ('Issue 391')\n    autoTester.check (int (False))\n    autoTester.check (int (True))\n    autoTester.check (int (1 == 2))\n    autoTester.check (int (1 != 2))\n    \n    autoTester.check ('Issue 392')\n\n    import re\n\n    class Example:\n\n        d = {'A': 1, 'B': 2}\n        rec = re.compile ('(?P<decimal>\\d+)', re.ASCII)\n\n        def run(self):\n            match = self.rec.match ('42')\n            if not match:\n                print('ERROR: RE does not match')\n            e = match.groupdict ()\n            autoTester.check (\"before: self.d=\", self.d)\n            autoTester.check (\"before: e=\", e)\n            self.d.update (e)\n            autoTester.check (\"after: self.d=\", self.d)\n\n\n    example = Example ()\n    example.run ()\n    \n    autoTester.check ('Issue 398')\n    # This used to give extra comma's so invalid syntax (no check calls needed)\n    \n    class Test398 (object):\n        #__pragma__ ('skip')\n        def method1 (self):\n            pass\n\n        def method2 (self):\n            pass\n        #__pragma__ ('noskip')\n        pass\n        \n    test398 = Test398 ()\n        \n    autoTester.check ('Issue 399')\n    \n    __pragma__ ('keycheck')\n    try:\n        surpressWarning = {'a':5}['a']\n        surpressWarning = {'a':5}['b']\n        autoTester.check ('no problem')\n    except KeyError:\n        autoTester.check ('not found')    \n    \n    autoTester.check ('Issue 413')\n    __pragma__ ('nokeycheck')\n    \n    class Foo:\n        def __len__ (self):\n            return 3\n        \n        def __getitem__ (self, i):\n            if i >= 3:\n                raise IndexError\n            return 'This is item ' + str (i)\n\n    foo = Foo ()\n\n    #__pragma__ ('opov')\n    autoTester.check ('Attempt 1:')\n    for i in foo:\n        autoTester.check (i)\n\n    autoTester.check ('Attempt 2:')\n    for i in range (len (foo)):\n        autoTester.check (foo [i])\n    #__pragma__('noopov')\n    \n    autoTester.check ('Issue 414')\n    \n    class Foo:\n        pass\n\n    foo = Foo ()\n    foo.bar = 'baz'\n    foo.name = 'hello'\n    foo.default = 'world'\n\n    autoTester.check ([x for x in dir (foo) if not x.startswith ('__')])\n\n    #__pragma__('kwargs')\n    def foo (*args, **kwargs):\n        default = kwargs.get ('default', 'bar')\n        return default\n\n    autoTester.check (foo())\n    autoTester.check (foo(default = 'Hello World'))\n    \n    autoTester.check ('Issue 460')\n    \n    s460 = 'car'\n    l460 = [11, 22, 33]\n    t460 = (4, 5, 6)\n    d460 = {-1: 'mmminusOne', 'b': 'bbbike'}\n    \n    #__pragma__ ('opov')\n    \n    l460 [0] = 1\n    l460 [-2] = 2\n    l460 [-1] = 3\n    \n    d460 [-1] = 'minusOne'\n    d460 ['b'] = 'bike'\n    \n    autoTester.check (s460 [0], s460 [1], s460 [2], s460 [-1], s460 [-2], s460 [-3])\n    autoTester.check (l460 [0], l460 [1], l460 [2], l460 [-1], l460 [-2], l460 [-3])\n    autoTester.check (t460 [0], t460 [1], t460 [2], t460 [-1], t460 [-2], t460 [-3])\n    autoTester.check (d460 [-1], d460 ['b'])\n    \n    autoTester.check (s460 [0], s460 [1], s460 [2], s460 [-1], s460 [-2], s460 [-3])\n    autoTester.check (l460 [0], l460 [1], l460 [2], l460 [-1], l460 [-2], l460 [-3])\n    autoTester.check (t460 [0], t460 [1], t460 [2], t460 [-1], t460 [-2], t460 [-3])\n    autoTester.check (d460 [-1], d460 ['b'])\n\n    #__pragma__ ('noopov')\n\n    #__pragma__ ('keycheck')\n    \n    try:\n        autoTester.check (d460 [-1], d460 ['c'])\n    except:\n        autoTester.check (111)\n    try:\n        autoTester.check (d460 [-2], d460 ['b'])\n    except:\n        autoTester.check (222)\n        \n    #__pragma__ ('nokeycheck')\n            \n"
	],
	"mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA4fA;AA5f
}