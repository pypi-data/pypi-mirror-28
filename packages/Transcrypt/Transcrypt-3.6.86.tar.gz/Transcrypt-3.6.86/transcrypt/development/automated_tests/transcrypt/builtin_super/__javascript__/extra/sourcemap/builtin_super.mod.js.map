{
	"version": 3,
	"file": "D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/development/automated_tests/transcrypt/builtin_super/__javascript__/builtin_super.mod.js",
	"sources": [
		"D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/development/automated_tests/transcrypt/builtin_super/__init__.py"
	],
	"sourcesContent": [
		"def run (autoTester):\n    def show (*args):\n        autoTester.check (*args)\n        # print (*args) # Leave in for debugging purposes\n\n    class R:\n        def __init__ (self, a, b):\n            self.a = a\n            self.b = b\n            \n    class A (R):\n        def __init__ (self, a, b, c):\n            super () .__init__ (a, b)\n            self.c = c\n\n        def f (self, x, y):\n            show ('A.f:', x, y, self.a, self.b, self.c)\n            \n        def g (self, x, y):\n            show ('A.g:', x, y)\n            \n    class B (R):\n        def __init__ (self, a, b, d):\n            super () .__init__ (a, b)\n            self.d = d\n\n        def f (self, x, y):\n            show ('B.f:', x, y, self.a, self.b, self.d)\n            \n        def h (self, x, y):\n            show ('A.h:', x, y, self.a, self.b, self.d)\n\n    class C (A):\n        def __init__ (self, a, b, c):\n            super () .__init__ (a, b, c)\n        \n        def f (self, x, y):\n            super () .f (x, y)\n            show ('C.f:', x, y, self.a, self.b, self.c)\n            \n    class D (B):\n        def __init__ (self, a, b, d):\n            super () .__init__ (a, b, d)\n        \n        def f (self, x, y):\n            super () .f (x, y)\n            show ('D.f:', x, y, self.a, self.b, self.d)\n            \n    # Diamond inheritance, use super () only to call exactly one target method via unique path.\n    # In case of multiple target methods or multiple paths, don't use super (), but refer to ancestor classes explicitly instead\n    class E (C, D):        \n        def __init__ (self, a, b, c, d):\n            R.__init__ (self, a, b) # Inherited via multiple legs of a diamond, so call explicitly\n            self.c = c              # Could also have used C.__init__, but symmetry preferred\n            self.d = d              # Don't use both C.__init__ and D.__init__, since R.__init__ will be called by both\n                                    # That's harmless here, but not always\n\n        def f (self, x, y):\n            C.f (self, x, y)        # Ambiguous part of diamond, don't use super ()\n            D.f (self, x, y)        # Ambiguous part of diamond, don't use super ()\n            show ('E.f:', x, y, self.a, self.b, self.c, self.d)\n            \n        def g (self, x, y):\n            super () .g (x, y)      # Unique, using super () is OK\n            show ('E.g:', x, y, self.a, self.b, self.c, self.d)\n            \n        def h (self, x, y):\n            super () .h (x, y)      # Unique, using super () is OK\n            show ('E.h:', x, y, self.a, self.b, self.c, self.d)\n           \n    rr = R (100, 200)\n\n    show ('--1--')\n\n    a = A (101, 201, 301)\n    a.f (711, 811)\n    a.g (721, 821)\n\n    show ('--2--')\n\n    b = B (102, 202, 302)\n    b.f (712, 812)\n    b.h (732, 832)\n\n    show ('--3--')\n\n    c = C (103, 203, 303)\n    c.f (713, 813)\n    c.g (723, 823)\n\n    show ('--4--')\n\n    d = D (104, 204, 304)\n    d.f (714, 814)\n    d.h (734, 834)\n\n    show ('--5--')\n\n    e = E (105, 205, 305, 405)\n    e.f (715, 815)\n    e.g (725, 825)\n    e.h (735, 835)\n"
	],
	"mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAIA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA"
}