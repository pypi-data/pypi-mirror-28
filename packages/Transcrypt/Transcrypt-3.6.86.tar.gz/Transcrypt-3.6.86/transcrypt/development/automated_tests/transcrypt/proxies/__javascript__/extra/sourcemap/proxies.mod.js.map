{
	"version": 3,
	"file": "D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/development/automated_tests/transcrypt/proxies/__javascript__/proxies.mod.js",
	"sources": [
		"D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/development/automated_tests/transcrypt/proxies/__init__.py"
	],
	"sourcesContent": [
		"from org.transcrypt.stubs.browser import __pragma__\n\ndef run (autoTester):\n    class CodedStore:\n        def __init__ (self):\n            try:\n                __pragma__ ('js', '{}', 'self [\"__dict__\"] = {}')\n            except:\n                pass\n\n        def __setattr__ (self, name, message):\n            self.__dict__ ['_' + name] = 'coded_' + message\n\n        def __getattr__ (self, name):\n            return 'decoded_' + self.__dict__ ['_' + name]\n            \n        def peek (self, name):\n            return self.__dict__ ['_' + name]\n            \n    s = CodedStore ()\n\n    s.john = 'brown'\n    s.mary = 'white'\n\n    autoTester.check (s.peek ('john'))\n    autoTester.check (s.peek ('mary'))\n\n    autoTester.check (s.john)\n    autoTester.check (s.mary)\n    \n    '''\n    The code above produces the following output:\n        'coded_brown'\n        'coded_white'\n        'decoded_coded_brown'\n        'decoded_coded_white'\n    '''\n\n    class A:\n        def __init__ (self):\n            self.p = 1\n            self.q = 2\n            \n    class B (A):\n        def __getattr__ (self, name):\n            return 'Faked {}'.format (name)\n            \n    class C (A):\n        def __setattr__ (self, name, value):\n            autoTester.check ('Set faked {}'.format (name))\n            \n            A.__setattr__ (self, name, value)\n            # Needed for CPython, inherited from class 'object'\n            # Transcrypt doesn't need it, if there's no __setattrib__ it will just use self [name] = value\n    \n    class D (B, C):\n        pass\n        \n    a = A ()\n    b = B ()\n    c = C ()\n    d = D ()\n    \n    autoTester.check (a.p, a.q)\n    a.p = 3\n    autoTester.check (a.p, a.q)\n    \n    autoTester.check (b.p, b.q, b.r, b.s)\n    b.p = 4\n    b.r = 5\n    autoTester.check (b.p, b.q, b.r, b.s)\n    \n    autoTester.check (c.p, c.q)\n    c.p = 6\n    c.q = 7\n    autoTester.check (c.p, c.q)\n\n    autoTester.check (d.p, d.q, d.r, d.s)\n    d.p = 8\n    d.q = 9\n    d.r = 10\n    d.s = 11\n    autoTester.check (d.p, d.q, d.r, d.s)   \n"
	],
	"mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAUA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AAIA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA"
}