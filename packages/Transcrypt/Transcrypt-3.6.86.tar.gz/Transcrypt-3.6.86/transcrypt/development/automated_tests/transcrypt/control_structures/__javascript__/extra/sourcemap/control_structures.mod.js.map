{
	"version": 3,
	"file": "D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/development/automated_tests/transcrypt/control_structures/__javascript__/control_structures.mod.js",
	"sources": [
		"D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/development/automated_tests/transcrypt/control_structures/__init__.py"
	],
	"sourcesContent": [
		"def run (autoTester):\n    for index in range (10):\n        autoTester.check (index)\n        \n    for index in range (8, 16):\n        autoTester.check (index)\n        \n    for index in range (8, 16, 2):\n        autoTester.check (index)\n        \n    for index in range (10, 0, -1):\n        autoTester.check (index)\n        \n    for index in range (16, 8, -2):\n        autoTester.check (index)\n        \n    for animal in ('cat', 'dog', 'turtle', 'goldfish'):\n        autoTester.check (animal)\n\n    for index, square in enumerate ([x * x for x in range (10) if x % 2]):\n        for y in (1, 2, 3):\n            for z in (10, 20, 30):\n                autoTester.check (square + y, z )\n\n    vehicles = ['bike', 'train', 'boat', 'car', 'plane', 'bus']\n                \n    for doBreak in (False, True):\n        for doContinue in (False, True):\n            for index in range (10):\n                for index2 in range (0, 100, 10):\n                    if doBreak and index2 == 50:\n                        autoTester.check ('break2')\n                        break\n                    if doContinue and index2 == 50:\n                        autoTester.check ('continue2')\n                        continue\n                else:\n                    autoTester.check ('noBreak2')\n                    \n                if doBreak and index == 5:\n                    autoTester.check ('break')\n                    break\n                if doContinue and index == 5:\n                    autoTester.check ('continue')\n                    continue\n            else:\n                autoTester.check ('noBreak')\n                \n            index = 0\n            while index < len (vehicles) and vehicles [index] != 'bus':\n                autoTester.check (index, vehicles [index])\n                if doBreak and vehicles [index] == 'car':\n                    autoTester.check ('breakWhile')\n                    break\n                if doContinue and vehicles [index] == 'car':\n                    autoTester.check ('continueWhile')\n                    index += 1\n                    continue\n                index += 1\n            else:\n                autoTester.check ('noBreakWhile')\n                \n        for vehicle in vehicles:\n            if vehicle == 'bike':\n                autoTester.check ('netherlands')\n            elif vehicle == 'car':\n                autoTester.check ('america')\n            elif vehicle == 'boat':\n                autoTester.check ('oceania')\n            else:\n                autoTester.check ('anywhere')\n"
	],
	"mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA"
}