file: Module 
	body: list 
		element: FunctionDef 
			name: str = run
			args: arguments 
				args: list 
					element: arg 
						arg: str = autoTester
						annotation: NoneType = None
				vararg: NoneType = None
				kwonlyargs: list 
				kw_defaults: list 
				kwarg: NoneType = None
				defaults: list 
			body: list 
				element: Assign 
					targets: list 
						element: Name 
							id: str = b
							ctx: Store 
					value: Bytes 
						s: bytes = b'bike'
				element: Assign 
					targets: list 
						element: Name 
							id: str = s
							ctx: Store 
					value: Call 
						func: Name 
							id: str = bytes
							ctx: Load 
						args: list 
							element: Str 
								s: str = shop
							element: Str 
								s: str = utf8
						keywords: list 
				element: Assign 
					targets: list 
						element: Name 
							id: str = e
							ctx: Store 
					value: Bytes 
						s: bytes = b''
				element: Assign 
					targets: list 
						element: Name 
							id: str = bb
							ctx: Store 
					value: Call 
						func: Name 
							id: str = bytearray
							ctx: Load 
						args: list 
							element: List 
								elts: list 
									element: Num 
										n: int = 0
									element: Num 
										n: int = 1
									element: Num 
										n: int = 2
									element: Num 
										n: int = 3
									element: Num 
										n: int = 4
								ctx: Load 
						keywords: list 
				element: Assign 
					targets: list 
						element: Name 
							id: str = bc
							ctx: Store 
					value: Call 
						func: Name 
							id: str = bytes
							ctx: Load 
						args: list 
							element: Tuple 
								elts: list 
									element: Num 
										n: int = 5
									element: Num 
										n: int = 6
									element: Num 
										n: int = 7
									element: Num 
										n: int = 8
									element: Num 
										n: int = 9
								ctx: Load 
						keywords: list 
				element: Expr 
					value: Call 
						func: Name 
							id: str = __pragma__
							ctx: Load 
						args: list 
							element: Str 
								s: str = opov
						keywords: list 
				element: Assign 
					targets: list 
						element: Name 
							id: str = bps
							ctx: Store 
					value: BinOp 
						left: BinOp 
							left: Name 
								id: str = b
								ctx: Load 
							op: Add 
							right: Bytes 
								s: bytes = b'pump'
						op: Add 
						right: Name 
							id: str = s
							ctx: Load 
				element: Assign 
					targets: list 
						element: Name 
							id: str = bps3
							ctx: Store 
					value: BinOp 
						left: BinOp 
							left: Num 
								n: int = 3
							op: Mult 
							right: Name 
								id: str = bps
								ctx: Load 
						op: Add 
						right: Bytes 
							s: bytes = b'\x00'
				element: Assign 
					targets: list 
						element: Name 
							id: str = aBps3
							ctx: Store 
					value: BinOp 
						left: BinOp 
							left: Name 
								id: str = bps
								ctx: Load 
							op: Mult 
							right: Num 
								n: int = 3
						op: Add 
						right: Bytes 
							s: bytes = b'\x00'
				element: Assign 
					targets: list 
						element: Name 
							id: str = l
							ctx: Store 
					value: BinOp 
						left: List 
							elts: list 
								element: Num 
									n: int = 1
								element: Num 
									n: int = 2
								element: Num 
									n: int = 3
							ctx: Load 
						op: Add 
						right: List 
							elts: list 
								element: Num 
									n: int = 4
								element: Num 
									n: int = 5
								element: Num 
									n: int = 6
							ctx: Load 
				element: Expr 
					value: Call 
						func: Name 
							id: str = __pragma__
							ctx: Load 
						args: list 
							element: Str 
								s: str = noopov
						keywords: list 
				element: FunctionDef 
					name: str = formatCheck
					args: arguments 
						args: list 
							element: arg 
								arg: str = aBytes
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Expr 
							value: Call 
								func: Attribute 
									value: Name 
										id: str = autoTester
										ctx: Load 
									attr: str = check
									ctx: Load 
								args: list 
									element: ListComp 
										elt: Call 
											func: Name 
												id: str = int
												ctx: Load 
											args: list 
												element: Name 
													id: str = aByte
													ctx: Load 
											keywords: list 
										generators: list 
											element: comprehension 
												target: Name 
													id: str = aByte
													ctx: Store 
												iter: Name 
													id: str = aBytes
													ctx: Load 
												ifs: list 
												is_async: int = 0
								keywords: list 
					decorator_list: list 
					returns: NoneType = None
				element: Expr 
					value: Call 
						func: Name 
							id: str = formatCheck
							ctx: Load 
						args: list 
							element: Name 
								id: str = b
								ctx: Load 
						keywords: list 
				element: Expr 
					value: Call 
						func: Name 
							id: str = formatCheck
							ctx: Load 
						args: list 
							element: Name 
								id: str = s
								ctx: Load 
						keywords: list 
				element: Expr 
					value: Call 
						func: Name 
							id: str = formatCheck
							ctx: Load 
						args: list 
							element: Name 
								id: str = e
								ctx: Load 
						keywords: list 
				element: Expr 
					value: Call 
						func: Name 
							id: str = formatCheck
							ctx: Load 
						args: list 
							element: Name 
								id: str = bb
								ctx: Load 
						keywords: list 
				element: Expr 
					value: Call 
						func: Name 
							id: str = formatCheck
							ctx: Load 
						args: list 
							element: Name 
								id: str = bc
								ctx: Load 
						keywords: list 
				element: Expr 
					value: Call 
						func: Name 
							id: str = formatCheck
							ctx: Load 
						args: list 
							element: Name 
								id: str = bps
								ctx: Load 
						keywords: list 
				element: Expr 
					value: Call 
						func: Name 
							id: str = formatCheck
							ctx: Load 
						args: list 
							element: Name 
								id: str = bps3
								ctx: Load 
						keywords: list 
				element: Expr 
					value: Call 
						func: Name 
							id: str = formatCheck
							ctx: Load 
						args: list 
							element: Name 
								id: str = aBps3
								ctx: Load 
						keywords: list 
				element: Expr 
					value: Call 
						func: Name 
							id: str = __pragma__
							ctx: Load 
						args: list 
							element: Str 
								s: str = opov
						keywords: list 
				element: Expr 
					value: Call 
						func: Name 
							id: str = formatCheck
							ctx: Load 
						args: list 
							element: BinOp 
								left: Name 
									id: str = bb
									ctx: Load 
								op: Add 
								right: Name 
									id: str = bc
									ctx: Load 
						keywords: list 
				element: Expr 
					value: Call 
						func: Name 
							id: str = formatCheck
							ctx: Load 
						args: list 
							element: BinOp 
								left: BinOp 
									left: Call 
										func: Name 
											id: str = bytearray
											ctx: Load 
										args: list 
											element: Str 
												s: str = ding
											element: Str 
												s: str = utf8
										keywords: list 
									op: Add 
									right: Bytes 
										s: bytes = b'dang'
								op: Add 
								right: Call 
									func: Name 
										id: str = bytes
										ctx: Load 
									args: list 
										element: Str 
											s: str = dong
										element: Str 
											s: str = utf8
									keywords: list 
						keywords: list 
				element: Expr 
					value: Call 
						func: Name 
							id: str = __pragma__
							ctx: Load 
						args: list 
							element: Str 
								s: str = noopov
						keywords: list 
				element: Expr 
					value: Call 
						func: Name 
							id: str = formatCheck
							ctx: Load 
						args: list 
							element: Name 
								id: str = l
								ctx: Load 
						keywords: list 
			decorator_list: list 
			returns: NoneType = None