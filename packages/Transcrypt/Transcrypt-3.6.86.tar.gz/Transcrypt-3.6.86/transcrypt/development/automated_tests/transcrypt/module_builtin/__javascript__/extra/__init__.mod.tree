file: Module 
	body: list 
		element: ImportFrom 
			module: str = org.transcrypt.stubs.browser
			names: list 
				element: alias 
					name: str = __envir__
					asname: NoneType = None
			level: int = 0
		element: FunctionDef 
			name: str = canonizeString
			args: arguments 
				args: list 
					element: arg 
						arg: str = aString
						annotation: NoneType = None
				vararg: NoneType = None
				kwonlyargs: list 
				kw_defaults: list 
				kwarg: NoneType = None
				defaults: list 
			body: list 
				element: If 
					test: Compare 
						left: Attribute 
							value: Name 
								id: str = __envir__
								ctx: Load 
							attr: str = executor_name
							ctx: Load 
						ops: list 
							element: Eq 
						comparators: list 
							element: Str 
								s: str = transcrypt
					body: list 
						element: Return 
							value: Call 
								func: Attribute 
									value: Call 
										func: Attribute 
											value: Name 
												id: str = aString
												ctx: Load 
											attr: str = replace
											ctx: Load 
										args: list 
											element: Str 
												s: str = 	
											element: Str 
												s: str = \t
										keywords: list 
									attr: str = replace
									ctx: Load 
								args: list 
									element: Str 
										s: str = 

									element: Str 
										s: str = \n
								keywords: list 
					orelse: list 
						element: Return 
							value: Name 
								id: str = aString
								ctx: Load 
			decorator_list: list 
			returns: NoneType = None
		element: FunctionDef 
			name: str = canonizeStringList
			args: arguments 
				args: list 
					element: arg 
						arg: str = stringList
						annotation: NoneType = None
				vararg: NoneType = None
				kwonlyargs: list 
				kw_defaults: list 
				kwarg: NoneType = None
				defaults: list 
			body: list 
				element: Return 
					value: ListComp 
						elt: Call 
							func: Name 
								id: str = canonizeString
								ctx: Load 
							args: list 
								element: Name 
									id: str = aString
									ctx: Load 
							keywords: list 
						generators: list 
							element: comprehension 
								target: Name 
									id: str = aString
									ctx: Store 
								iter: Name 
									id: str = stringList
									ctx: Load 
								ifs: list 
								is_async: int = 0
			decorator_list: list 
			returns: NoneType = None
		element: FunctionDef 
			name: str = run
			args: arguments 
				args: list 
					element: arg 
						arg: str = autoTester
						annotation: NoneType = None
				vararg: NoneType = None
				kwonlyargs: list 
				kw_defaults: list 
				kwarg: NoneType = None
				defaults: list 
			body: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: Str 
								s: str = min
							element: Call 
								func: Name 
									id: str = min
									ctx: Load 
								args: list 
									element: UnaryOp 
										op: USub 
										operand: Num 
											n: float = 1.1
									element: UnaryOp 
										op: USub 
										operand: Num 
											n: int = 1
									element: UnaryOp 
										op: USub 
										operand: Num 
											n: int = 3
								keywords: list 
						keywords: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: Str 
								s: str = max
							element: Call 
								func: Name 
									id: str = max
									ctx: Load 
								args: list 
									element: UnaryOp 
										op: USub 
										operand: Num 
											n: float = 1.1
									element: UnaryOp 
										op: USub 
										operand: Num 
											n: int = 1
									element: UnaryOp 
										op: USub 
										operand: Num 
											n: int = 3
								keywords: list 
						keywords: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: Str 
								s: str = abs
							element: Call 
								func: Name 
									id: str = abs
									ctx: Load 
								args: list 
									element: UnaryOp 
										op: USub 
										operand: Num 
											n: int = 1
								keywords: list 
							element: Call 
								func: Name 
									id: str = abs
									ctx: Load 
								args: list 
									element: Num 
										n: int = 1
								keywords: list 
							element: Call 
								func: Name 
									id: str = abs
									ctx: Load 
								args: list 
									element: Num 
										n: int = 0
								keywords: list 
							element: Call 
								func: Name 
									id: str = abs
									ctx: Load 
								args: list 
									element: UnaryOp 
										op: USub 
										operand: Num 
											n: float = 0.1
								keywords: list 
							element: Call 
								func: Name 
									id: str = abs
									ctx: Load 
								args: list 
									element: Num 
										n: float = 0.1
								keywords: list 
						keywords: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: Str 
								s: str = ord
							element: Call 
								func: Name 
									id: str = ord
									ctx: Load 
								args: list 
									element: Str 
										s: str = a
								keywords: list 
							element: Call 
								func: Name 
									id: str = ord
									ctx: Load 
								args: list 
									element: Subscript 
										value: Str 
											s: str = eÂ´
										slice: Index 
											value: Num 
												n: int = 0
										ctx: Load 
								keywords: list 
						keywords: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: Str 
								s: str = round
							element: Call 
								func: Name 
									id: str = round
									ctx: Load 
								args: list 
									element: Num 
										n: float = 4.006
								keywords: list 
							element: Call 
								func: Name 
									id: str = round
									ctx: Load 
								args: list 
									element: Num 
										n: float = 4.006
									element: Num 
										n: int = 2
								keywords: list 
							element: Call 
								func: Name 
									id: str = round
									ctx: Load 
								args: list 
									element: Num 
										n: int = 4060
									element: UnaryOp 
										op: USub 
										operand: Num 
											n: int = 2
								keywords: list 
							element: Call 
								func: Name 
									id: str = round
									ctx: Load 
								args: list 
									element: UnaryOp 
										op: USub 
										operand: Num 
											n: float = 4.006
								keywords: list 
							element: Call 
								func: Name 
									id: str = round
									ctx: Load 
								args: list 
									element: UnaryOp 
										op: USub 
										operand: Num 
											n: float = 4.006
									element: Num 
										n: int = 2
								keywords: list 
							element: Call 
								func: Name 
									id: str = round
									ctx: Load 
								args: list 
									element: UnaryOp 
										op: USub 
										operand: Num 
											n: int = 4060
									element: UnaryOp 
										op: USub 
										operand: Num 
											n: int = 2
								keywords: list 
							element: Call 
								func: Name 
									id: str = round
									ctx: Load 
								args: list 
									element: BinOp 
										left: Num 
											n: int = 1
										op: Div 
										right: Num 
											n: float = 2.0
								keywords: list 
							element: Call 
								func: Name 
									id: str = round
									ctx: Load 
								args: list 
									element: BinOp 
										left: Num 
											n: int = 1
										op: Div 
										right: Num 
											n: float = 2.0
									element: Num 
										n: int = 1
								keywords: list 
							element: Call 
								func: Name 
									id: str = round
									ctx: Load 
								args: list 
									element: BinOp 
										left: Num 
											n: int = 1
										op: Div 
										right: Num 
											n: int = 2
									element: Num 
										n: int = 1
								keywords: list 
							element: Call 
								func: Name 
									id: str = round
									ctx: Load 
								args: list 
									element: BinOp 
										left: Num 
											n: int = 1
										op: Div 
										right: Num 
											n: float = 3.0
									element: Num 
										n: int = 2
								keywords: list 
							element: Call 
								func: Name 
									id: str = round
									ctx: Load 
								args: list 
									element: BinOp 
										left: UnaryOp 
											op: USub 
											operand: Num 
												n: int = 1
										op: Div 
										right: Num 
											n: float = 2.0
								keywords: list 
							element: Call 
								func: Name 
									id: str = round
									ctx: Load 
								args: list 
									element: BinOp 
										left: UnaryOp 
											op: USub 
											operand: Num 
												n: int = 1
										op: Div 
										right: Num 
											n: float = 2.0
									element: Num 
										n: int = 1
								keywords: list 
							element: Call 
								func: Name 
									id: str = round
									ctx: Load 
								args: list 
									element: BinOp 
										left: UnaryOp 
											op: USub 
											operand: Num 
												n: int = 1
										op: Div 
										right: Num 
											n: int = 2
									element: Num 
										n: int = 1
								keywords: list 
							element: Call 
								func: Name 
									id: str = round
									ctx: Load 
								args: list 
									element: BinOp 
										left: UnaryOp 
											op: USub 
											operand: Num 
												n: int = 1
										op: Div 
										right: Num 
											n: float = 3.0
									element: Num 
										n: int = 2
								keywords: list 
							element: Call 
								func: Name 
									id: str = round
									ctx: Load 
								args: list 
									element: Num 
										n: float = 0.5
								keywords: list 
							element: Call 
								func: Name 
									id: str = round
									ctx: Load 
								args: list 
									element: Num 
										n: float = 0.51
								keywords: list 
							element: Call 
								func: Name 
									id: str = round
									ctx: Load 
								args: list 
									element: Num 
										n: float = 1.5
								keywords: list 
							element: Call 
								func: Name 
									id: str = round
									ctx: Load 
								args: list 
									element: Num 
										n: float = 1.51
								keywords: list 
							element: Call 
								func: Name 
									id: str = round
									ctx: Load 
								args: list 
									element: Num 
										n: float = 1.51
								keywords: list 
							element: Call 
								func: Name 
									id: str = round
									ctx: Load 
								args: list 
									element: Num 
										n: float = 2.5
								keywords: list 
							element: Call 
								func: Name 
									id: str = round
									ctx: Load 
								args: list 
									element: Num 
										n: float = 2.59
								keywords: list 
							element: Call 
								func: Name 
									id: str = round
									ctx: Load 
								args: list 
									element: Num 
										n: float = 3.5
								keywords: list 
							element: Call 
								func: Name 
									id: str = round
									ctx: Load 
								args: list 
									element: Num 
										n: float = 3.59
								keywords: list 
							element: Call 
								func: Name 
									id: str = round
									ctx: Load 
								args: list 
									element: UnaryOp 
										op: USub 
										operand: Num 
											n: float = 0.5
								keywords: list 
							element: Call 
								func: Name 
									id: str = round
									ctx: Load 
								args: list 
									element: UnaryOp 
										op: USub 
										operand: Num 
											n: float = 0.51
								keywords: list 
							element: Call 
								func: Name 
									id: str = round
									ctx: Load 
								args: list 
									element: UnaryOp 
										op: USub 
										operand: Num 
											n: float = 1.5
								keywords: list 
							element: Call 
								func: Name 
									id: str = round
									ctx: Load 
								args: list 
									element: UnaryOp 
										op: USub 
										operand: Num 
											n: float = 1.51
								keywords: list 
							element: Call 
								func: Name 
									id: str = round
									ctx: Load 
								args: list 
									element: UnaryOp 
										op: USub 
										operand: Num 
											n: float = 1.51
								keywords: list 
							element: Call 
								func: Name 
									id: str = round
									ctx: Load 
								args: list 
									element: UnaryOp 
										op: USub 
										operand: Num 
											n: float = 2.5
								keywords: list 
							element: Call 
								func: Name 
									id: str = round
									ctx: Load 
								args: list 
									element: UnaryOp 
										op: USub 
										operand: Num 
											n: float = 2.59
								keywords: list 
							element: Call 
								func: Name 
									id: str = round
									ctx: Load 
								args: list 
									element: UnaryOp 
										op: USub 
										operand: Num 
											n: float = 3.5
								keywords: list 
							element: Call 
								func: Name 
									id: str = round
									ctx: Load 
								args: list 
									element: UnaryOp 
										op: USub 
										operand: Num 
											n: float = 3.59
								keywords: list 
						keywords: list 
				element: Assign 
					targets: list 
						element: Name 
							id: str = strings
							ctx: Store 
					value: List 
						elts: list 
							element: Str 
								s: str = der des dem den die der den die das des dem das
							element: Str 
								s: str = an auf hinter ueber    neben vor   zwischen
							element: Str 
								s: str = 
            durch
            fuer
            ohne
            um
            bis
            gegen
            entlang
        
							element: Str 
								s: str = eins,zwei,drie,vier,fuenf,sechs,sieben
						ctx: Load 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: Str 
								s: str = <br><br>split
						keywords: list 
				element: For 
					target: Name 
						id: str = aString
						ctx: Store 
					iter: Name 
						id: str = strings
						ctx: Load 
					body: list 
						element: Expr 
							value: Call 
								func: Attribute 
									value: Name 
										id: str = autoTester
										ctx: Load 
									attr: str = check
									ctx: Load 
								args: list 
									element: Call 
										func: Name 
											id: str = canonizeString
											ctx: Load 
										args: list 
											element: Name 
												id: str = aString
												ctx: Load 
										keywords: list 
									element: Call 
										func: Name 
											id: str = canonizeStringList
											ctx: Load 
										args: list 
											element: Call 
												func: Attribute 
													value: Name 
														id: str = aString
														ctx: Load 
													attr: str = split
													ctx: Load 
												args: list 
												keywords: list 
										keywords: list 
									element: Call 
										func: Name 
											id: str = canonizeStringList
											ctx: Load 
										args: list 
											element: Call 
												func: Attribute 
													value: Name 
														id: str = aString
														ctx: Load 
													attr: str = split
													ctx: Load 
												args: list 
													element: Str 
														s: str =  
												keywords: list 
										keywords: list 
									element: Call 
										func: Name 
											id: str = canonizeStringList
											ctx: Load 
										args: list 
											element: Call 
												func: Attribute 
													value: Name 
														id: str = aString
														ctx: Load 
													attr: str = split
													ctx: Load 
												args: list 
													element: Str 
														s: str =  
													element: Num 
														n: int = 4
												keywords: list 
										keywords: list 
									element: Call 
										func: Name 
											id: str = canonizeStringList
											ctx: Load 
										args: list 
											element: Call 
												func: Attribute 
													value: Name 
														id: str = aString
														ctx: Load 
													attr: str = split
													ctx: Load 
												args: list 
													element: Str 
														s: str = 	
												keywords: list 
										keywords: list 
									element: Call 
										func: Name 
											id: str = canonizeStringList
											ctx: Load 
										args: list 
											element: Call 
												func: Attribute 
													value: Name 
														id: str = aString
														ctx: Load 
													attr: str = split
													ctx: Load 
												args: list 
													element: Str 
														s: str = 	
													element: Num 
														n: int = 4
												keywords: list 
										keywords: list 
									element: Call 
										func: Name 
											id: str = canonizeStringList
											ctx: Load 
										args: list 
											element: Call 
												func: Attribute 
													value: Name 
														id: str = aString
														ctx: Load 
													attr: str = split
													ctx: Load 
												args: list 
													element: Str 
														s: str = 

												keywords: list 
										keywords: list 
									element: Call 
										func: Name 
											id: str = canonizeStringList
											ctx: Load 
										args: list 
											element: Call 
												func: Attribute 
													value: Name 
														id: str = aString
														ctx: Load 
													attr: str = split
													ctx: Load 
												args: list 
													element: Str 
														s: str = 

													element: Num 
														n: int = 4
												keywords: list 
										keywords: list 
									element: Call 
										func: Name 
											id: str = canonizeStringList
											ctx: Load 
										args: list 
											element: Call 
												func: Attribute 
													value: Name 
														id: str = aString
														ctx: Load 
													attr: str = split
													ctx: Load 
												args: list 
													element: Str 
														s: str = ,
												keywords: list 
										keywords: list 
									element: Call 
										func: Name 
											id: str = canonizeStringList
											ctx: Load 
										args: list 
											element: Call 
												func: Attribute 
													value: Name 
														id: str = aString
														ctx: Load 
													attr: str = split
													ctx: Load 
												args: list 
													element: Str 
														s: str = ,
													element: Num 
														n: int = 4
												keywords: list 
										keywords: list 
									element: Str 
										s: str = <br>
								keywords: list 
					orelse: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: Str 
								s: str = <br>rsplit
						keywords: list 
				element: For 
					target: Name 
						id: str = aString
						ctx: Store 
					iter: Name 
						id: str = strings
						ctx: Load 
					body: list 
						element: Expr 
							value: Call 
								func: Attribute 
									value: Name 
										id: str = autoTester
										ctx: Load 
									attr: str = check
									ctx: Load 
								args: list 
									element: Call 
										func: Name 
											id: str = canonizeString
											ctx: Load 
										args: list 
											element: Name 
												id: str = aString
												ctx: Load 
										keywords: list 
									element: Call 
										func: Name 
											id: str = canonizeStringList
											ctx: Load 
										args: list 
											element: Call 
												func: Attribute 
													value: Name 
														id: str = aString
														ctx: Load 
													attr: str = rsplit
													ctx: Load 
												args: list 
												keywords: list 
										keywords: list 
									element: Call 
										func: Name 
											id: str = canonizeStringList
											ctx: Load 
										args: list 
											element: Call 
												func: Attribute 
													value: Name 
														id: str = aString
														ctx: Load 
													attr: str = rsplit
													ctx: Load 
												args: list 
													element: Str 
														s: str =  
												keywords: list 
										keywords: list 
									element: Call 
										func: Name 
											id: str = canonizeStringList
											ctx: Load 
										args: list 
											element: Call 
												func: Attribute 
													value: Name 
														id: str = aString
														ctx: Load 
													attr: str = rsplit
													ctx: Load 
												args: list 
													element: Str 
														s: str =  
													element: Num 
														n: int = 4
												keywords: list 
										keywords: list 
									element: Call 
										func: Name 
											id: str = canonizeStringList
											ctx: Load 
										args: list 
											element: Call 
												func: Attribute 
													value: Name 
														id: str = aString
														ctx: Load 
													attr: str = rsplit
													ctx: Load 
												args: list 
													element: Str 
														s: str = 	
												keywords: list 
										keywords: list 
									element: Call 
										func: Name 
											id: str = canonizeStringList
											ctx: Load 
										args: list 
											element: Call 
												func: Attribute 
													value: Name 
														id: str = aString
														ctx: Load 
													attr: str = rsplit
													ctx: Load 
												args: list 
													element: Str 
														s: str = 	
													element: Num 
														n: int = 4
												keywords: list 
										keywords: list 
									element: Call 
										func: Name 
											id: str = canonizeStringList
											ctx: Load 
										args: list 
											element: Call 
												func: Attribute 
													value: Name 
														id: str = aString
														ctx: Load 
													attr: str = rsplit
													ctx: Load 
												args: list 
													element: Str 
														s: str = 

												keywords: list 
										keywords: list 
									element: Call 
										func: Name 
											id: str = canonizeStringList
											ctx: Load 
										args: list 
											element: Call 
												func: Attribute 
													value: Name 
														id: str = aString
														ctx: Load 
													attr: str = rsplit
													ctx: Load 
												args: list 
													element: Str 
														s: str = 

													element: Num 
														n: int = 4
												keywords: list 
										keywords: list 
									element: Call 
										func: Name 
											id: str = canonizeStringList
											ctx: Load 
										args: list 
											element: Call 
												func: Attribute 
													value: Name 
														id: str = aString
														ctx: Load 
													attr: str = rsplit
													ctx: Load 
												args: list 
													element: Str 
														s: str = ,
												keywords: list 
										keywords: list 
									element: Call 
										func: Name 
											id: str = canonizeStringList
											ctx: Load 
										args: list 
											element: Call 
												func: Attribute 
													value: Name 
														id: str = aString
														ctx: Load 
													attr: str = rsplit
													ctx: Load 
												args: list 
													element: Str 
														s: str = ,
													element: Num 
														n: int = 4
												keywords: list 
										keywords: list 
									element: Str 
										s: str = <br>
								keywords: list 
					orelse: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: Call 
								func: Attribute 
									value: Str 
										s: str = 
									attr: str = isalpha
									ctx: Load 
								args: list 
								keywords: list 
						keywords: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: Call 
								func: Attribute 
									value: Str 
										s: str = 123
									attr: str = isalpha
									ctx: Load 
								args: list 
								keywords: list 
						keywords: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: Call 
								func: Attribute 
									value: Str 
										s: str = abc
									attr: str = isalpha
									ctx: Load 
								args: list 
								keywords: list 
						keywords: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: Call 
								func: Attribute 
									value: Str 
										s: str = abc123
									attr: str = isalpha
									ctx: Load 
								args: list 
								keywords: list 
						keywords: list 
			decorator_list: list 
			returns: NoneType = None