{
	"version": 3,
	"file": "D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/development/automated_tests/transcrypt/reprtest/__javascript__/reprtest.mod.js",
	"sources": [
		"D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/development/automated_tests/transcrypt/reprtest/__init__.py"
	],
	"sourcesContent": [
		"\ndef run(test):\n    \"\"\" Test the repr and string implementations\n    \"\"\"\n\n    v = 1\n    test.check( repr(v) )\n    test.check( str(v) )\n    v = \"asdf\"\n    test.check( repr(v) )\n    test.check( str(v) )\n    v = True\n    test.check( repr(v) )\n    test.check( str(v) )\n    v = False\n    test.check( repr(v) )\n    test.check( str(v) )\n    v = 1.2\n    test.check( repr(v) )\n    test.check( str(v) )\n    v = -31.2\n    test.check( repr(v) )\n    test.check( str(v) )\n    v = 63e-12\n    test.check( repr(v) )\n    test.check( str(v) )\n    v = 24e37\n    test.check( repr(v) )\n    test.check( str(v) )\n    v = -34e-23\n    test.check( repr(v) )\n    test.check( str(v) )\n    v = -89e32\n    test.check( repr(v) )\n    test.check( str(v) )\n    v = None\n    test.check( repr(v) )\n    test.check( str(v) )\n    v = [None]\n    test.check( repr(v) )\n    test.check( str(v) )\n    v = [None, None]\n    test.check( repr(v) )\n    test.check( str(v) )\n    v = [None, 1.02]\n    test.check( repr(v) )\n    test.check( str(v) )\n    v = [1,3.000234]\n    test.check( repr(v) )\n    test.check( str(v) )\n    v = [1,2,3]\n    test.check( repr(v) )\n    test.check( str(v) )\n    v = [1.04, 2.03, 3.005]\n    test.check( repr(v) )\n    test.check( str(v) )\n    v = [\"asdf\", 2.00009, \"1234\"]\n    test.check( repr(v) )\n    test.check( str(v) )\n    v = set([1,2,3])\n    test.check( repr(v) )\n    test.check( str(v) )\n    v = set([])\n    test.check( repr(v) )\n    test.check( str(v) )\n    v = (1,2)\n    test.check( repr(v) )\n    test.check( str(v) )\n    v = (3.4, 4.4)\n    test.check( repr(v) )\n    test.check( str(v) )\n    v = (None, 5.32)\n    test.check( repr(v) )\n    test.check( str(v) )\n    v = {}\n    test.check( repr(v) )\n    test.check( str(v) )\n    v = { \"a\": 1 }\n    test.check( repr(v) )\n    test.check( str(v) )\n\n    # @note - in python the dictionary key\n    #     ordering is not specified. So the following tests\n    #     cannot be reliably completed when there are more than\n    #     one key in a dict - so this test coverage was skipped for now.\n\n    d = { \"asdf\": 3.4 }\n    test.check( repr( d ) )\n    test.check( str( d ) )\n    d = { \"qwer\": \"qwerqwer qwerqwer\" }\n    test.check( repr( d ) )\n    test.check( str( d ) )\n    d = { \"a9342\" : None }\n    test.check( repr( d ) )\n    test.check( str( d ) )\n    d = { \"nfdns\" : True }\n    test.check( repr( d ) )\n    test.check( str( d ) )\n    d = { \"alel;e;\" : False }\n    test.check( repr( d ) )\n    test.check( str( d ) )\n    d = { \"didi\" : [True,False,True] }\n    test.check( repr( d ) )\n    test.check( str( d ) )\n    d = { \"bibi\" : [1,2,3] }\n    test.check( repr( d ) )\n    test.check( str( d ) )\n    d = { \"gigi\" : [\"Asdf\",\"qwer\",\"rewer\"] }\n    test.check( repr( d ) )\n    test.check( str( d ) )\n    d = { \"hihi\" : (\"esdf\",\"qwer\",\"rewer\") }\n    test.check( repr( d ) )\n    test.check( str( d ) )\n    d = { \"jiji\" : [None, None, None] }\n    test.check( repr( d ) )\n    test.check( str( d ) )\n    d = { \"jiji\" : (1.3, 3.4) }\n    test.check( repr( d ) )\n    test.check( str( d ) )\n\n    d = { \"jiji\" : { \"c\" : 4 } }\n    test.check( repr( d ) )\n    test.check( str( d ) )\n\n    class Test1(object):\n        def __init__(self, val):\n            self._val = val\n\n        def __str__(self):\n            return(\"[Test1 {}]\".format(self._val))\n\n        def __repr__(self):\n            return(str(self))\n\n    class Test2(object):\n        def __init__(self, val):\n            self._val = val\n\n        def __repr__(self):\n            return(\"[Test2 {},{}]\".format(self._val, self._val*2))\n\n        def __str__(self):\n            return( repr(self) )\n\n    class Test3(Test2):\n        def __str__(self):\n            return(\"[Test3 {}]\".format(self._val))\n\n    class Test4(object):\n        def __init__(self, val):\n            self._val = val\n\n        def __repr__(self):\n            return(\"[Test4 {}]\".format(self._val))\n\n\n    t1 = Test1(2)\n    test.check( repr(t1) )\n    test.check( str(t1) )\n    t1 = Test1(4.5)\n    test.check( repr(t1) )\n    test.check( str(t1) )\n    t1 = Test1(\"blarg\")\n    test.check( repr(t1) )\n    test.check( str(t1) )\n    t1 = Test1([1,2,3])\n    test.check( repr(t1) )\n    test.check( str(t1) )\n\n    t2 = Test2(3)\n    test.check( repr(t2) )\n    test.check( str(t2) )\n    t2 = Test2(7.6)\n    test.check( repr(t2) )\n    test.check( str(t2) )\n    t2 = Test2(-8.9)\n    test.check( repr(t2) )\n    test.check( str(t2) )\n\n    t3 = Test3(8)\n    test.check( repr(t3) )\n    test.check( str(t3) )\n\n    t3 = Test3(3.4)\n    test.check( repr(t3) )\n    test.check( str(t3) )\n\n    test.check( repr( [t1,t2,3] ) )\n\n    d = { \"irew\" : t1 }\n    test.check( repr( d ) )\n    test.check( str( d ) )\n    d = { \"irew\" : [t1,t2,t3] }\n    test.check( repr( d ) )\n    test.check( str( d ) )\n\n    t4 = Test4(\"qwer\")\n    test.check( repr(t4) )\n    test.check( str(t4) )\n"
	],
	"mappings
}