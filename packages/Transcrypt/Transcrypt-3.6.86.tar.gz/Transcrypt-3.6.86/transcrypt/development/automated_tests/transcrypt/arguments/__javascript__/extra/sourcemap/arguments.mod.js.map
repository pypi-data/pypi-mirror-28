{
	"version": 3,
	"file": "D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/development/automated_tests/transcrypt/arguments/__javascript__/arguments.mod.js",
	"sources": [
		"D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/development/automated_tests/transcrypt/arguments/__init__.py"
	],
	"sourcesContent": [
		"from org.transcrypt.stubs.browser import __pragma__\n\n__pragma__ ('kwargs')\n\nclass A:\n    def __init__ (self, x = 123, y = 456, *args, m, n = 456, **kwargs):\n        self.x = x\n        self.y = y\n        self.args = args\n        self.m = m\n        self.n = n\n        self.kwargs = kwargs\n        self.extra = 'hello'\n\n    def f (self, autoTester):\n        autoTester.check (self.x, self.y, self.args, self.m, self.n, self.kwargs, self.extra)\n        \nclass B (A):\n    def __init__ (self, x, y = -1, *args, m = -2, n, **kwargs):\n        A.__init__ (self, y, x, *args, m = n, n = m, **kwargs)\n        \nclass C:\n    __pragma__ ('nokwargs')\n    def tricky (self, *args):\n        return args\n    __pragma__ ('kwargs')\n    \ndef run (autoTester):\n    def f (x, y = -1, *args, m = -2, n, **kwargs):\n        # BEGIN issue 203, kwargs turned into real dict\n        autoTester.check ('#203', kwargs.__class__.__name__)\n        autoTester.check ('#203', sorted (kwargs.keys ()))\n        # END issue 203\n    \n        def f2 (x, y = -3, *args, m = -4, n, **kwargs):\n            autoTester.check (x, y, args, m, n, kwargs)\n        f2 (11, 22, 1010, 2020, m = 100100, n = 200200, p = 10001000, q = 20002000)\n        autoTester.check (x, y, args, m, n, kwargs)\n        \n    f (1, 2, 10, 20, m = 100, n = 200, p = 1000, q = 2000)\n    \n    b = B (3, 4, 30, 40, m = 300, n = 400, p = 3000, q = 4000)\n    b.f (autoTester)\n    \n    def g (*args, **kwargs):\n        autoTester.check (args, kwargs)\n        \n    g (*(1, 2, 3), **{'p': 'aP', 'q': 'aQ', 'r': 'anR'})\n    \n    (lambda x, y = -1, *args, m = -2, n, **kwargs: autoTester.check (x, y, args, m, n, kwargs)) (1, 2, 8, 16, m = 128, n = 256.3, p = 1024.3, q = 2048.3)\n    \n    autoTester.check (C () .tricky (* range (4)))\n    autoTester.check ('{}-{}'.format (1, 3, 5, 7, 9))\n    autoTester.check ('{}-{}'.format (* range (4)))\n"
	],
	"mappings
}