{
	"version": 3,
	"file": "D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/development/automated_tests/transcrypt/callable_test/__javascript__/callable_test.mod.js",
	"sources": [
		"D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/development/automated_tests/transcrypt/callable_test/__init__.py"
	],
	"sourcesContent": [
		"# Callable built-in method unit tests\n\nfrom org.transcrypt.stubs.browser import __pragma__\n\ndef run(test):\n    \"\"\"\n    \"\"\"\n\n    def func(a,b):\n        return(a*b)\n\n    test.check( func(3,4) )\n    test.check( callable(func) )\n\n    for a in (True, False):\n        test.check( callable(a) )\n\n    a = 1\n    test.check( callable(a) )\n    a = 2.3\n    test.check( callable(a) )\n    a = \"asdf\"\n    test.check( callable(a) )\n\n    a = []\n    test.check( callable(a) )\n    a = [1,2,3,3]\n    test.check( callable(a) )\n    a = [\"asdf\", \"qwer\", \"zxcv\"]\n    test.check( callable(a) )\n\n    a = {\"asdf\" : 1, \"qwer\": 2}\n    test.check( callable(a) )\n\n    a = set([1,2])\n    test.check(callable(a))\n\n    __pragma__('opov')\n\n    class CallObj(object):\n        def __init__(self, r):\n            self._r = r\n\n        def __call__(self):\n            return(self._r)\n\n    test.check( callable(CallObj) )\n\n    obj = CallObj(2)\n    test.check(obj())\n    test.check( callable(obj) )\n    test.check( callable(obj._r) )\n\n    class NonCallObj(object):\n        def __init__(self, b):\n            self._b = b\n\n        def func(self):\n            return(self._b)\n\n    test.check( callable(NonCallObj) )\n\n    obj2 = NonCallObj(2)\n    test.check( callable(obj2) )\n    test.check( callable(obj2._b) )\n    test.check( callable(obj2.func) )\n\n    __pragma__('noopov')\n\n    class NonOpovNonCallObj(object):\n        \"\"\"\n        \"\"\"\n        def __init__(self, c):\n            self._c = c\n\n        def other(self, b):\n            return(self._c * b)\n\n        def _getC(self):\n            return(self._c)\n        def _setC(self, val):\n            self._c = val\n\n        C = property(_getC, _setC)\n\n    obj = NonOpovNonCallObj(4)\n    test.check( callable(obj) )\n    test.check( callable(obj.other) )\n    test.check( callable(obj._c) )\n    test.check( callable(obj.C) )\n\n    exc = Exception(\"asdf\")\n    test.check( callable(exc) )\n"
	],
	"mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAIA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAIA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AAIA;AAAA;AAGA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA"
}