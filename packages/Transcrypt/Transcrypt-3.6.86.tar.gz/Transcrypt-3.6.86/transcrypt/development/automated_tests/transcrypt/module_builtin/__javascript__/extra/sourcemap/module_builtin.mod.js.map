{
	"version": 3,
	"file": "D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/development/automated_tests/transcrypt/module_builtin/__javascript__/module_builtin.mod.js",
	"sources": [
		"D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/development/automated_tests/transcrypt/module_builtin/__init__.py"
	],
	"sourcesContent": [
		"# coding: utf-8\n\nfrom org.transcrypt.stubs.browser import __envir__\n\ndef canonizeString (aString):\n    if __envir__.executor_name == 'transcrypt':\n        return aString.replace ('\\t', '\\\\t') .replace ('\\n', '\\\\n')\n    else:\n        return aString\n\ndef canonizeStringList (stringList):\n    return [canonizeString (aString) for aString in stringList]\n\ndef run (autoTester):\n    autoTester.check ('min', min (-1.1, -1, -3))\n    autoTester.check ('max', max (-1.1, -1, -3))\n    autoTester.check ('abs', abs (-1), abs (1), abs (0), abs (-0.1), abs (0.1))\n    autoTester.check ('ord', ord ('a'), ord ('e\u00c2\u00b4'[0]))  # This is the 2 codepoint version\n    \n    autoTester.check ('round',\n        round (4.006),\n        round (4.006, 2),\n        round (4060, -2),\n        \n        round (-4.006),\n        round (-4.006, 2),\n        round (-4060, -2),\n        \n        round (1/2.),\n        round (1/2., 1),\n        round (1/2, 1),\n        round (1/3., 2),\n        \n        round (-1/2.),\n        round (-1/2., 1),\n        round (-1/2, 1),\n        round (-1/3., 2),\n    \n        round (0.5),\n        round (0.51),\n        round (1.5),\n        round (1.51),\n        round (1.51),\n        round (2.5),\n        round (2.59),\n        round (3.5),\n        round (3.59),\n        \n        round (-0.5),\n        round (-0.51),\n        round (-1.5),\n        round (-1.51),\n        round (-1.51),\n        round (-2.5),\n        round (-2.59),\n        round (-3.5),\n        round (-3.59)\n    )\n    \n    strings = [\n        'der des dem den die der den die das des dem das',\n        'an auf hinter ueber    neben vor   zwischen',\n        '''\n            durch\n            fuer\n            ohne\n            um\n            bis\n            gegen\n            entlang\n        ''',\n        'eins,zwei,drie,vier,fuenf,sechs,sieben'\n    ]\n    \n    autoTester.check ('<br><br>split')\n    for aString in strings:\n        autoTester.check (\n            canonizeString (aString),\n            canonizeStringList (aString.split ()),\n            canonizeStringList (aString.split (' ')),\n            canonizeStringList (aString.split (' ', 4)),\n            canonizeStringList (aString.split ('\\t')),\n            canonizeStringList (aString.split ('\\t', 4)),\n            canonizeStringList (aString.split ('\\n')),\n            canonizeStringList (aString.split ('\\n', 4)),\n            canonizeStringList (aString.split (',')),\n            canonizeStringList (aString.split (',', 4)),\n            '<br>'\n        )\n        \n    autoTester.check ('<br>rsplit')\n    for aString in strings:\n        autoTester.check (\n            canonizeString (aString),\n            canonizeStringList (aString.rsplit ()),\n            canonizeStringList (aString.rsplit (' ')),\n            canonizeStringList (aString.rsplit (' ', 4)),\n            canonizeStringList (aString.rsplit ('\\t')),\n            canonizeStringList (aString.rsplit ('\\t', 4)),\n            canonizeStringList (aString.rsplit ('\\n')),\n            canonizeStringList (aString.rsplit ('\\n', 4)),\n            canonizeStringList (aString.rsplit (',')),\n            canonizeStringList (aString.rsplit (',', 4)),\n            '<br>'\n        )\n\n    autoTester.check(\"\".isalpha())\n    autoTester.check(\"123\".isalpha())\n    autoTester.check(\"abc\".isalpha())\n    autoTester.check(\"abc123\".isalpha())\n"
	],
	"mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAuCA;AAGA;AAeA;AACA;AAWA;AAAA;AAIA;AACA;AAWA;AAAA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA"
}