file: Module 
	body: list 
		element: ImportFrom 
			module: str = org.transcrypt.stubs.browser
			names: list 
				element: alias 
					name: str = __pragma__
					asname: NoneType = None
			level: int = 0
		element: ClassDef 
			name: str = Matrix
			bases: list 
			keywords: list 
			body: list 
				element: FunctionDef 
					name: str = __init__
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
							element: arg 
								arg: str = nRows
								annotation: NoneType = None
							element: arg 
								arg: str = nCols
								annotation: NoneType = None
							element: arg 
								arg: str = elements
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
							element: List 
								elts: list 
								ctx: Load 
					body: list 
						element: Assign 
							targets: list 
								element: Attribute 
									value: Name 
										id: str = self
										ctx: Load 
									attr: str = nRows
									ctx: Store 
							value: Name 
								id: str = nRows
								ctx: Load 
						element: Assign 
							targets: list 
								element: Attribute 
									value: Name 
										id: str = self
										ctx: Load 
									attr: str = nCols
									ctx: Store 
							value: Name 
								id: str = nCols
								ctx: Load 
						element: If 
							test: Call 
								func: Name 
									id: str = len
									ctx: Load 
								args: list 
									element: Name 
										id: str = elements
										ctx: Load 
								keywords: list 
							body: list 
								element: Assign 
									targets: list 
										element: Attribute 
											value: Name 
												id: str = self
												ctx: Load 
											attr: str = _
											ctx: Store 
									value: Name 
										id: str = elements
										ctx: Load 
							orelse: list 
								element: Assign 
									targets: list 
										element: Attribute 
											value: Name 
												id: str = self
												ctx: Load 
											attr: str = _
											ctx: Store 
									value: ListComp 
										elt: ListComp 
											elt: Num 
												n: int = 0
											generators: list 
												element: comprehension 
													target: Name 
														id: str = col
														ctx: Store 
													iter: Call 
														func: Name 
															id: str = range
															ctx: Load 
														args: list 
															element: Name 
																id: str = nCols
																ctx: Load 
														keywords: list 
													ifs: list 
													is_async: int = 0
										generators: list 
											element: comprehension 
												target: Name 
													id: str = row
													ctx: Store 
												iter: Call 
													func: Name 
														id: str = range
														ctx: Load 
													args: list 
														element: Name 
															id: str = nRows
															ctx: Load 
													keywords: list 
												ifs: list 
												is_async: int = 0
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = __matmul__
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
							element: arg 
								arg: str = other
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Assign 
							targets: list 
								element: Name 
									id: str = result
									ctx: Store 
							value: Call 
								func: Name 
									id: str = Matrix
									ctx: Load 
								args: list 
									element: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = nRows
										ctx: Load 
									element: Attribute 
										value: Name 
											id: str = other
											ctx: Load 
										attr: str = nCols
										ctx: Load 
								keywords: list 
						element: For 
							target: Name 
								id: str = iTargetRow
								ctx: Store 
							iter: Call 
								func: Name 
									id: str = range
									ctx: Load 
								args: list 
									element: Attribute 
										value: Name 
											id: str = result
											ctx: Load 
										attr: str = nRows
										ctx: Load 
								keywords: list 
							body: list 
								element: For 
									target: Name 
										id: str = iTargetCol
										ctx: Store 
									iter: Call 
										func: Name 
											id: str = range
											ctx: Load 
										args: list 
											element: Attribute 
												value: Name 
													id: str = result
													ctx: Load 
												attr: str = nCols
												ctx: Load 
										keywords: list 
									body: list 
										element: For 
											target: Name 
												id: str = iTerm
												ctx: Store 
											iter: Call 
												func: Name 
													id: str = range
													ctx: Load 
												args: list 
													element: Attribute 
														value: Name 
															id: str = self
															ctx: Load 
														attr: str = nCols
														ctx: Load 
												keywords: list 
											body: list 
												element: AugAssign 
													target: Subscript 
														value: Subscript 
															value: Attribute 
																value: Name 
																	id: str = result
																	ctx: Load 
																attr: str = _
																ctx: Load 
															slice: Index 
																value: Name 
																	id: str = iTargetRow
																	ctx: Load 
															ctx: Load 
														slice: Index 
															value: Name 
																id: str = iTargetCol
																ctx: Load 
														ctx: Store 
													op: Add 
													value: BinOp 
														left: Subscript 
															value: Subscript 
																value: Attribute 
																	value: Name 
																		id: str = self
																		ctx: Load 
																	attr: str = _
																	ctx: Load 
																slice: Index 
																	value: Name 
																		id: str = iTargetRow
																		ctx: Load 
																ctx: Load 
															slice: Index 
																value: Name 
																	id: str = iTerm
																	ctx: Load 
															ctx: Load 
														op: Mult 
														right: Subscript 
															value: Subscript 
																value: Attribute 
																	value: Name 
																		id: str = other
																		ctx: Load 
																	attr: str = _
																	ctx: Load 
																slice: Index 
																	value: Name 
																		id: str = iTerm
																		ctx: Load 
																ctx: Load 
															slice: Index 
																value: Name 
																	id: str = iTargetCol
																	ctx: Load 
															ctx: Load 
											orelse: list 
									orelse: list 
							orelse: list 
						element: Return 
							value: Name 
								id: str = result
								ctx: Load 
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = __imatmul__
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
							element: arg 
								arg: str = other
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Return 
							value: Call 
								func: Attribute 
									value: Name 
										id: str = self
										ctx: Load 
									attr: str = __matmul__
									ctx: Load 
								args: list 
									element: Name 
										id: str = other
										ctx: Load 
								keywords: list 
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = __mul__
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
							element: arg 
								arg: str = other
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: If 
							test: Compare 
								left: Call 
									func: Name 
										id: str = type
										ctx: Load 
									args: list 
										element: Name 
											id: str = other
											ctx: Load 
									keywords: list 
								ops: list 
									element: Eq 
								comparators: list 
									element: Name 
										id: str = Matrix
										ctx: Load 
							body: list 
								element: Assign 
									targets: list 
										element: Name 
											id: str = result
											ctx: Store 
									value: Call 
										func: Name 
											id: str = Matrix
											ctx: Load 
										args: list 
											element: Attribute 
												value: Name 
													id: str = self
													ctx: Load 
												attr: str = nRows
												ctx: Load 
											element: Attribute 
												value: Name 
													id: str = self
													ctx: Load 
												attr: str = nCols
												ctx: Load 
										keywords: list 
								element: For 
									target: Name 
										id: str = iRow
										ctx: Store 
									iter: Call 
										func: Name 
											id: str = range
											ctx: Load 
										args: list 
											element: Attribute 
												value: Name 
													id: str = self
													ctx: Load 
												attr: str = nRows
												ctx: Load 
										keywords: list 
									body: list 
										element: For 
											target: Name 
												id: str = iCol
												ctx: Store 
											iter: Call 
												func: Name 
													id: str = range
													ctx: Load 
												args: list 
													element: Attribute 
														value: Name 
															id: str = self
															ctx: Load 
														attr: str = nCols
														ctx: Load 
												keywords: list 
											body: list 
												element: Assign 
													targets: list 
														element: Subscript 
															value: Subscript 
																value: Attribute 
																	value: Name 
																		id: str = result
																		ctx: Load 
																	attr: str = _
																	ctx: Load 
																slice: Index 
																	value: Name 
																		id: str = iRow
																		ctx: Load 
																ctx: Load 
															slice: Index 
																value: Name 
																	id: str = iCol
																	ctx: Load 
															ctx: Store 
													value: BinOp 
														left: Subscript 
															value: Subscript 
																value: Attribute 
																	value: Name 
																		id: str = self
																		ctx: Load 
																	attr: str = _
																	ctx: Load 
																slice: Index 
																	value: Name 
																		id: str = iRow
																		ctx: Load 
																ctx: Load 
															slice: Index 
																value: Name 
																	id: str = iCol
																	ctx: Load 
															ctx: Load 
														op: Mult 
														right: Subscript 
															value: Subscript 
																value: Attribute 
																	value: Name 
																		id: str = other
																		ctx: Load 
																	attr: str = _
																	ctx: Load 
																slice: Index 
																	value: Name 
																		id: str = iRow
																		ctx: Load 
																ctx: Load 
															slice: Index 
																value: Name 
																	id: str = iCol
																	ctx: Load 
															ctx: Load 
											orelse: list 
									orelse: list 
								element: Return 
									value: Name 
										id: str = result
										ctx: Load 
							orelse: list 
								element: Return 
									value: Call 
										func: Attribute 
											value: Name 
												id: str = self
												ctx: Load 
											attr: str = __rmul__
											ctx: Load 
										args: list 
											element: Name 
												id: str = other
												ctx: Load 
										keywords: list 
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = __rmul__
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
							element: arg 
								arg: str = scalar
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Assign 
							targets: list 
								element: Name 
									id: str = result
									ctx: Store 
							value: Call 
								func: Name 
									id: str = Matrix
									ctx: Load 
								args: list 
									element: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = nRows
										ctx: Load 
									element: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = nCols
										ctx: Load 
								keywords: list 
						element: For 
							target: Name 
								id: str = iRow
								ctx: Store 
							iter: Call 
								func: Name 
									id: str = range
									ctx: Load 
								args: list 
									element: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = nRows
										ctx: Load 
								keywords: list 
							body: list 
								element: For 
									target: Name 
										id: str = iCol
										ctx: Store 
									iter: Call 
										func: Name 
											id: str = range
											ctx: Load 
										args: list 
											element: Attribute 
												value: Name 
													id: str = self
													ctx: Load 
												attr: str = nCols
												ctx: Load 
										keywords: list 
									body: list 
										element: Assign 
											targets: list 
												element: Subscript 
													value: Subscript 
														value: Attribute 
															value: Name 
																id: str = result
																ctx: Load 
															attr: str = _
															ctx: Load 
														slice: Index 
															value: Name 
																id: str = iRow
																ctx: Load 
														ctx: Load 
													slice: Index 
														value: Name 
															id: str = iCol
															ctx: Load 
													ctx: Store 
											value: BinOp 
												left: Name 
													id: str = scalar
													ctx: Load 
												op: Mult 
												right: Subscript 
													value: Subscript 
														value: Attribute 
															value: Name 
																id: str = self
																ctx: Load 
															attr: str = _
															ctx: Load 
														slice: Index 
															value: Name 
																id: str = iRow
																ctx: Load 
														ctx: Load 
													slice: Index 
														value: Name 
															id: str = iCol
															ctx: Load 
													ctx: Load 
									orelse: list 
							orelse: list 
						element: Return 
							value: Name 
								id: str = result
								ctx: Load 
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = __imul__
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
							element: arg 
								arg: str = other
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Return 
							value: Call 
								func: Attribute 
									value: Name 
										id: str = self
										ctx: Load 
									attr: str = __mul__
									ctx: Load 
								args: list 
									element: Name 
										id: str = other
										ctx: Load 
								keywords: list 
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = __add__
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
							element: arg 
								arg: str = other
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Assign 
							targets: list 
								element: Name 
									id: str = result
									ctx: Store 
							value: Call 
								func: Name 
									id: str = Matrix
									ctx: Load 
								args: list 
									element: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = nRows
										ctx: Load 
									element: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = nCols
										ctx: Load 
								keywords: list 
						element: For 
							target: Name 
								id: str = iRow
								ctx: Store 
							iter: Call 
								func: Name 
									id: str = range
									ctx: Load 
								args: list 
									element: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = nRows
										ctx: Load 
								keywords: list 
							body: list 
								element: For 
									target: Name 
										id: str = iCol
										ctx: Store 
									iter: Call 
										func: Name 
											id: str = range
											ctx: Load 
										args: list 
											element: Attribute 
												value: Name 
													id: str = self
													ctx: Load 
												attr: str = nCols
												ctx: Load 
										keywords: list 
									body: list 
										element: Assign 
											targets: list 
												element: Subscript 
													value: Subscript 
														value: Attribute 
															value: Name 
																id: str = result
																ctx: Load 
															attr: str = _
															ctx: Load 
														slice: Index 
															value: Name 
																id: str = iRow
																ctx: Load 
														ctx: Load 
													slice: Index 
														value: Name 
															id: str = iCol
															ctx: Load 
													ctx: Store 
											value: BinOp 
												left: Subscript 
													value: Subscript 
														value: Attribute 
															value: Name 
																id: str = self
																ctx: Load 
															attr: str = _
															ctx: Load 
														slice: Index 
															value: Name 
																id: str = iRow
																ctx: Load 
														ctx: Load 
													slice: Index 
														value: Name 
															id: str = iCol
															ctx: Load 
													ctx: Load 
												op: Add 
												right: Subscript 
													value: Subscript 
														value: Attribute 
															value: Name 
																id: str = other
																ctx: Load 
															attr: str = _
															ctx: Load 
														slice: Index 
															value: Name 
																id: str = iRow
																ctx: Load 
														ctx: Load 
													slice: Index 
														value: Name 
															id: str = iCol
															ctx: Load 
													ctx: Load 
									orelse: list 
							orelse: list 
						element: Return 
							value: Name 
								id: str = result
								ctx: Load 
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = __getitem__
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
							element: arg 
								arg: str = index
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Return 
							value: Subscript 
								value: Attribute 
									value: Name 
										id: str = self
										ctx: Load 
									attr: str = _
									ctx: Load 
								slice: Index 
									value: Name 
										id: str = index
										ctx: Load 
								ctx: Load 
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = __setitem__
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
							element: arg 
								arg: str = index
								annotation: NoneType = None
							element: arg 
								arg: str = value
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Assign 
							targets: list 
								element: Subscript 
									value: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = _
										ctx: Load 
									slice: Index 
										value: Name 
											id: str = index
											ctx: Load 
									ctx: Store 
							value: Name 
								id: str = value
								ctx: Load 
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = __repr__
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Return 
							value: Call 
								func: Name 
									id: str = repr
									ctx: Load 
								args: list 
									element: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = _
										ctx: Load 
								keywords: list 
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = __floordiv__
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
							element: arg 
								arg: str = other
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Return 
							value: Str 
								s: str = Overloading __floordiv__ has no meaning for matrices
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = __truediv__
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
							element: arg 
								arg: str = other
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Return 
							value: Str 
								s: str = Overloading __truediv__ has no meaning for matrices
					decorator_list: list 
					returns: NoneType = None
			decorator_list: list 
		element: ClassDef 
			name: str = Functor
			bases: list 
			keywords: list 
			body: list 
				element: FunctionDef 
					name: str = __init__
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
							element: arg 
								arg: str = factor
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Assign 
							targets: list 
								element: Attribute 
									value: Name 
										id: str = self
										ctx: Load 
									attr: str = factor
									ctx: Store 
							value: Name 
								id: str = factor
								ctx: Load 
					decorator_list: list 
					returns: NoneType = None
				element: Expr 
					value: Call 
						func: Name 
							id: str = __pragma__
							ctx: Load 
						args: list 
							element: Str 
								s: str = kwargs
						keywords: list 
				element: FunctionDef 
					name: str = __call__
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
							element: arg 
								arg: str = x
								annotation: NoneType = None
							element: arg 
								arg: str = y
								annotation: NoneType = None
						vararg: arg 
							arg: str = args
							annotation: NoneType = None
						kwonlyargs: list 
							element: arg 
								arg: str = m
								annotation: NoneType = None
							element: arg 
								arg: str = n
								annotation: NoneType = None
						kw_defaults: list 
							element: UnaryOp 
								op: USub 
								operand: Num 
									n: int = 2
							element: NoneType = None
						kwarg: arg 
							arg: str = kwargs
							annotation: NoneType = None
						defaults: list 
							element: UnaryOp 
								op: USub 
								operand: Num 
									n: int = 1
					body: list 
						element: Return 
							value: Tuple 
								elts: list 
									element: BinOp 
										left: Attribute 
											value: Name 
												id: str = self
												ctx: Load 
											attr: str = factor
											ctx: Load 
										op: Mult 
										right: Name 
											id: str = x
											ctx: Load 
									element: BinOp 
										left: Attribute 
											value: Name 
												id: str = self
												ctx: Load 
											attr: str = factor
											ctx: Load 
										op: Mult 
										right: Name 
											id: str = y
											ctx: Load 
									element: ListComp 
										elt: BinOp 
											left: Attribute 
												value: Name 
													id: str = self
													ctx: Load 
												attr: str = factor
												ctx: Load 
											op: Mult 
											right: Name 
												id: str = arg
												ctx: Load 
										generators: list 
											element: comprehension 
												target: Name 
													id: str = arg
													ctx: Store 
												iter: Name 
													id: str = args
													ctx: Load 
												ifs: list 
												is_async: int = 0
									element: BinOp 
										left: Attribute 
											value: Name 
												id: str = self
												ctx: Load 
											attr: str = factor
											ctx: Load 
										op: Mult 
										right: Name 
											id: str = m
											ctx: Load 
									element: BinOp 
										left: Attribute 
											value: Name 
												id: str = self
												ctx: Load 
											attr: str = factor
											ctx: Load 
										op: Mult 
										right: Name 
											id: str = n
											ctx: Load 
								ctx: Load 
					decorator_list: list 
					returns: NoneType = None
				element: Expr 
					value: Call 
						func: Name 
							id: str = __pragma__
							ctx: Load 
						args: list 
							element: Str 
								s: str = nokwargs
						keywords: list 
			decorator_list: list 
		element: Assign 
			targets: list 
				element: Name 
					id: str = f
					ctx: Store 
			value: Call 
				func: Name 
					id: str = Functor
					ctx: Load 
				args: list 
					element: Num 
						n: int = 10
				keywords: list 
		element: Expr 
			value: Call 
				func: Name 
					id: str = __pragma__
					ctx: Load 
				args: list 
					element: Str 
						s: str = kwargs
				keywords: list 
		element: FunctionDef 
			name: str = g
			args: arguments 
				args: list 
					element: arg 
						arg: str = x
						annotation: NoneType = None
					element: arg 
						arg: str = y
						annotation: NoneType = None
				vararg: arg 
					arg: str = args
					annotation: NoneType = None
				kwonlyargs: list 
					element: arg 
						arg: str = m
						annotation: NoneType = None
					element: arg 
						arg: str = n
						annotation: NoneType = None
				kw_defaults: list 
					element: UnaryOp 
						op: USub 
						operand: Num 
							n: int = 2
					element: NoneType = None
				kwarg: arg 
					arg: str = kwargs
					annotation: NoneType = None
				defaults: list 
					element: UnaryOp 
						op: USub 
						operand: Num 
							n: int = 1
			body: list 
				element: Return 
					value: Tuple 
						elts: list 
							element: Name 
								id: str = x
								ctx: Load 
							element: Name 
								id: str = y
								ctx: Load 
							element: Name 
								id: str = args
								ctx: Load 
							element: Name 
								id: str = m
								ctx: Load 
							element: Name 
								id: str = n
								ctx: Load 
						ctx: Load 
			decorator_list: list 
			returns: NoneType = None
		element: Expr 
			value: Call 
				func: Name 
					id: str = __pragma__
					ctx: Load 
				args: list 
					element: Str 
						s: str = nokwargs
				keywords: list 
		element: FunctionDef 
			name: str = run
			args: arguments 
				args: list 
					element: arg 
						arg: str = autoTester
						annotation: NoneType = None
				vararg: NoneType = None
				kwonlyargs: list 
				kw_defaults: list 
				kwarg: NoneType = None
				defaults: list 
			body: list 
				element: Assign 
					targets: list 
						element: Name 
							id: str = m0
							ctx: Store 
					value: Call 
						func: Name 
							id: str = Matrix
							ctx: Load 
						args: list 
							element: Num 
								n: int = 3
							element: Num 
								n: int = 3
							element: List 
								elts: list 
									element: List 
										elts: list 
											element: Num 
												n: int = 1
											element: Num 
												n: int = 2
											element: Num 
												n: int = 3
										ctx: Load 
									element: List 
										elts: list 
											element: Num 
												n: int = 4
											element: Num 
												n: int = 5
											element: Num 
												n: int = 6
										ctx: Load 
									element: List 
										elts: list 
											element: Num 
												n: int = 7
											element: Num 
												n: int = 8
											element: Num 
												n: int = 10
										ctx: Load 
								ctx: Load 
						keywords: list 
				element: Assign 
					targets: list 
						element: Name 
							id: str = m1
							ctx: Store 
					value: Call 
						func: Name 
							id: str = Matrix
							ctx: Load 
						args: list 
							element: Num 
								n: int = 3
							element: Num 
								n: int = 3
							element: List 
								elts: list 
									element: List 
										elts: list 
											element: Num 
												n: int = 10
											element: Num 
												n: int = 20
											element: Num 
												n: int = 30
										ctx: Load 
									element: List 
										elts: list 
											element: Num 
												n: int = 40
											element: Num 
												n: int = 50
											element: Num 
												n: int = 60
										ctx: Load 
									element: List 
										elts: list 
											element: Num 
												n: int = 70
											element: Num 
												n: int = 80
											element: Num 
												n: int = 90
										ctx: Load 
								ctx: Load 
						keywords: list 
				element: Assign 
					targets: list 
						element: Name 
							id: str = m4
							ctx: Store 
					value: Call 
						func: Name 
							id: str = Matrix
							ctx: Load 
						args: list 
							element: Num 
								n: int = 3
							element: Num 
								n: int = 3
							element: List 
								elts: list 
									element: List 
										elts: list 
											element: Num 
												n: int = 1
											element: Num 
												n: int = 1
											element: Num 
												n: int = 2
										ctx: Load 
									element: List 
										elts: list 
											element: Num 
												n: int = 2
											element: Num 
												n: int = 2
											element: Num 
												n: int = 3
										ctx: Load 
									element: List 
										elts: list 
											element: Num 
												n: int = 3
											element: Num 
												n: int = 3
											element: UnaryOp 
												op: USub 
												operand: Num 
													n: int = 5
										ctx: Load 
								ctx: Load 
						keywords: list 
				element: Assign 
					targets: list 
						element: Name 
							id: str = m5
							ctx: Store 
					value: Call 
						func: Name 
							id: str = Matrix
							ctx: Load 
						args: list 
							element: Num 
								n: int = 3
							element: Num 
								n: int = 3
							element: List 
								elts: list 
									element: List 
										elts: list 
											element: Num 
												n: int = 1
											element: Num 
												n: int = 1
											element: Num 
												n: int = 2
										ctx: Load 
									element: List 
										elts: list 
											element: Num 
												n: int = 2
											element: Num 
												n: int = 2
											element: Num 
												n: int = 3
										ctx: Load 
									element: List 
										elts: list 
											element: Num 
												n: int = 3
											element: Num 
												n: int = 3
											element: UnaryOp 
												op: USub 
												operand: Num 
													n: int = 5
										ctx: Load 
								ctx: Load 
						keywords: list 
				element: Assign 
					targets: list 
						element: Name 
							id: str = x
							ctx: Store 
					value: Num 
						n: int = 3
				element: Assign 
					targets: list 
						element: Name 
							id: str = y
							ctx: Store 
					value: BinOp 
						left: BinOp 
							left: Name 
								id: str = x
								ctx: Load 
							op: Mult 
							right: Num 
								n: int = 4
						op: Mult 
						right: Name 
							id: str = x
							ctx: Load 
				element: Assign 
					targets: list 
						element: Name 
							id: str = fast
							ctx: Store 
					value: BinOp 
						left: Num 
							n: int = 2
						op: Mult 
						right: Num 
							n: int = 3
				element: AugAssign 
					target: Name 
						id: str = fast
						ctx: Store 
					op: Add 
					value: Num 
						n: int = 1
				element: Expr 
					value: Call 
						func: Name 
							id: str = __pragma__
							ctx: Load 
						args: list 
							element: Str 
								s: str = opov
						keywords: list 
				element: Assign 
					targets: list 
						element: Subscript 
							value: Subscript 
								value: Name 
									id: str = m1
									ctx: Load 
								slice: Index 
									value: Num 
										n: int = 1
								ctx: Load 
							slice: Index 
								value: Num 
									n: int = 2
							ctx: Store 
					value: Subscript 
						value: Subscript 
							value: Name 
								id: str = m0
								ctx: Load 
							slice: Index 
								value: Num 
									n: int = 1
							ctx: Load 
						slice: Index 
							value: Num 
								n: int = 2
						ctx: Load 
				element: Assign 
					targets: list 
						element: Name 
							id: str = slow
							ctx: Store 
					value: BinOp 
						left: Num 
							n: int = 2
						op: Add 
						right: Num 
							n: int = 3
				element: Assign 
					targets: list 
						element: Name 
							id: str = m2
							ctx: Store 
					value: BinOp 
						left: BinOp 
							left: Name 
								id: str = m0
								ctx: Load 
							op: Mult 
							right: Name 
								id: str = m1
								ctx: Load 
						op: Add 
						right: BinOp 
							left: Name 
								id: str = m1
								ctx: Load 
							op: Mult 
							right: BinOp 
								left: Name 
									id: str = m0
									ctx: Load 
								op: Add 
								right: Name 
									id: str = m1
									ctx: Load 
				element: Assign 
					targets: list 
						element: Name 
							id: str = m3
							ctx: Store 
					value: BinOp 
						left: BinOp 
							left: Num 
								n: int = 2
							op: Mult 
							right: BinOp 
								left: BinOp 
									left: BinOp 
										left: BinOp 
											left: Num 
												n: int = 2
											op: Mult 
											right: Name 
												id: str = m0
												ctx: Load 
										op: Mult 
										right: Num 
											n: int = 3
									op: Mult 
									right: Name 
										id: str = m1
										ctx: Load 
								op: Add 
								right: BinOp 
									left: Name 
										id: str = m2
										ctx: Load 
									op: Mult 
									right: Num 
										n: int = 4
						op: Mult 
						right: Num 
							n: int = 2
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: Subscript 
								value: Subscript 
									value: Name 
										id: str = m0
										ctx: Load 
									slice: Index 
										value: Num 
											n: int = 1
									ctx: Load 
								slice: Index 
									value: Num 
										n: int = 1
								ctx: Load 
							element: Subscript 
								value: Subscript 
									value: Name 
										id: str = m0
										ctx: Load 
									slice: Index 
										value: Num 
											n: int = 1
									ctx: Load 
								slice: Index 
									value: Num 
										n: int = 2
								ctx: Load 
							element: Subscript 
								value: Subscript 
									value: Name 
										id: str = m1
										ctx: Load 
									slice: Index 
										value: Num 
											n: int = 1
									ctx: Load 
								slice: Index 
									value: Num 
										n: int = 1
								ctx: Load 
							element: Subscript 
								value: Subscript 
									value: Name 
										id: str = m1
										ctx: Load 
									slice: Index 
										value: Num 
											n: int = 1
									ctx: Load 
								slice: Index 
									value: Num 
										n: int = 2
								ctx: Load 
						keywords: list 
				element: AugAssign 
					target: Name 
						id: str = m1
						ctx: Store 
					op: Add 
					value: Name 
						id: str = m0
						ctx: Load 
				element: AugAssign 
					target: Name 
						id: str = m2
						ctx: Store 
					op: Mult 
					value: Name 
						id: str = m1
						ctx: Load 
				element: AugAssign 
					target: Name 
						id: str = m5
						ctx: Store 
					op: MatMult 
					value: Name 
						id: str = m4
						ctx: Load 
				element: Assign 
					targets: list 
						element: Name 
							id: str = m6
							ctx: Store 
					value: BinOp 
						left: Name 
							id: str = m0
							ctx: Load 
						op: MatMult 
						right: Name 
							id: str = m1
							ctx: Load 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: BinOp 
								left: Name 
									id: str = m0
									ctx: Load 
								op: Div 
								right: Name 
									id: str = m1
									ctx: Load 
						keywords: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: BinOp 
								left: Name 
									id: str = m0
									ctx: Load 
								op: FloorDiv 
								right: Name 
									id: str = m1
									ctx: Load 
						keywords: list 
				element: Expr 
					value: Call 
						func: Name 
							id: str = __pragma__
							ctx: Load 
						args: list 
							element: Str 
								s: str = noopov
						keywords: list 
				element: Assign 
					targets: list 
						element: Name 
							id: str = fast2
							ctx: Store 
					value: BinOp 
						left: BinOp 
							left: Num 
								n: int = 16
							op: Mult 
							right: Name 
								id: str = y
								ctx: Load 
						op: Add 
						right: Num 
							n: int = 1
				element: AugAssign 
					target: Name 
						id: str = fast
						ctx: Store 
					op: Mult 
					value: Num 
						n: int = 2
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: Name 
								id: str = m0
								ctx: Load 
							element: Name 
								id: str = m1
								ctx: Load 
						keywords: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: Name 
								id: str = x
								ctx: Load 
							element: Name 
								id: str = y
								ctx: Load 
						keywords: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: Name 
								id: str = m2
								ctx: Load 
						keywords: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: Name 
								id: str = m3
								ctx: Load 
						keywords: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: Name 
								id: str = m5
								ctx: Load 
						keywords: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: Name 
								id: str = m6
								ctx: Load 
						keywords: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: Name 
								id: str = fast
								ctx: Load 
							element: Name 
								id: str = slow
								ctx: Load 
							element: Name 
								id: str = fast2
								ctx: Load 
						keywords: list 
				element: Assign 
					targets: list 
						element: Name 
							id: str = x
							ctx: Store 
					value: Str 
						s: str = marker
				element: Expr 
					value: Call 
						func: Name 
							id: str = __pragma__
							ctx: Load 
						args: list 
							element: Str 
								s: str = opov
						keywords: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: Call 
								func: Name 
									id: str = f
									ctx: Load 
								args: list 
									element: Num 
										n: int = 3
									element: Num 
										n: int = 4
									element: Num 
										n: int = 30
									element: Num 
										n: int = 40
								keywords: list 
									element: keyword 
										arg: str = m
										value: Num 
											n: int = 300
									element: keyword 
										arg: str = n
										value: Num 
											n: int = 400
									element: keyword 
										arg: str = p
										value: Num 
											n: int = 3000
									element: keyword 
										arg: str = q
										value: Num 
											n: int = 4000
						keywords: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: Call 
								func: Name 
									id: str = g
									ctx: Load 
								args: list 
									element: Num 
										n: int = 3
									element: Num 
										n: int = 4
									element: Num 
										n: int = 30
									element: Num 
										n: int = 40
								keywords: list 
									element: keyword 
										arg: str = m
										value: Num 
											n: int = 300
									element: keyword 
										arg: str = n
										value: Num 
											n: int = 400
									element: keyword 
										arg: str = p
										value: Num 
											n: int = 3000
									element: keyword 
										arg: str = q
										value: Num 
											n: int = 4000
						keywords: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: Compare 
								left: Call 
									func: Name 
										id: str = set
										ctx: Load 
									args: list 
										element: Tuple 
											elts: list 
												element: Num 
													n: int = 1
												element: Num 
													n: int = 2
												element: Num 
													n: int = 3
											ctx: Load 
									keywords: list 
								ops: list 
									element: Eq 
								comparators: list 
									element: Call 
										func: Name 
											id: str = set
											ctx: Load 
										args: list 
											element: Tuple 
												elts: list 
													element: Num 
														n: int = 3
													element: Num 
														n: int = 2
													element: Num 
														n: int = 1
												ctx: Load 
										keywords: list 
						keywords: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: Compare 
								left: Call 
									func: Name 
										id: str = set
										ctx: Load 
									args: list 
										element: Tuple 
											elts: list 
												element: Num 
													n: int = 1
												element: Num 
													n: int = 2
												element: Num 
													n: int = 3
											ctx: Load 
									keywords: list 
								ops: list 
									element: NotEq 
								comparators: list 
									element: Call 
										func: Name 
											id: str = set
											ctx: Load 
										args: list 
											element: Tuple 
												elts: list 
													element: Num 
														n: int = 3
													element: Num 
														n: int = 2
													element: Num 
														n: int = 1
												ctx: Load 
										keywords: list 
						keywords: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: Compare 
								left: Call 
									func: Name 
										id: str = set
										ctx: Load 
									args: list 
										element: Tuple 
											elts: list 
												element: Num 
													n: int = 1
												element: Num 
													n: int = 3
											ctx: Load 
									keywords: list 
								ops: list 
									element: Eq 
								comparators: list 
									element: Call 
										func: Name 
											id: str = set
											ctx: Load 
										args: list 
											element: Tuple 
												elts: list 
													element: Num 
														n: int = 3
													element: Num 
														n: int = 2
													element: Num 
														n: int = 1
												ctx: Load 
										keywords: list 
						keywords: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: Compare 
								left: Call 
									func: Name 
										id: str = set
										ctx: Load 
									args: list 
										element: Tuple 
											elts: list 
												element: Num 
													n: int = 1
												element: Num 
													n: int = 3
											ctx: Load 
									keywords: list 
								ops: list 
									element: NotEq 
								comparators: list 
									element: Call 
										func: Name 
											id: str = set
											ctx: Load 
										args: list 
											element: Tuple 
												elts: list 
													element: Num 
														n: int = 3
													element: Num 
														n: int = 2
													element: Num 
														n: int = 1
												ctx: Load 
										keywords: list 
						keywords: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: Compare 
								left: Call 
									func: Name 
										id: str = set
										ctx: Load 
									args: list 
										element: Tuple 
											elts: list 
												element: Num 
													n: int = 1
												element: Num 
													n: int = 2
											ctx: Load 
									keywords: list 
								ops: list 
									element: Lt 
								comparators: list 
									element: Call 
										func: Name 
											id: str = set
											ctx: Load 
										args: list 
											element: Tuple 
												elts: list 
													element: Num 
														n: int = 3
													element: Num 
														n: int = 2
													element: Num 
														n: int = 1
												ctx: Load 
										keywords: list 
						keywords: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: Compare 
								left: Call 
									func: Name 
										id: str = set
										ctx: Load 
									args: list 
										element: Tuple 
											elts: list 
												element: Num 
													n: int = 1
												element: Num 
													n: int = 2
												element: Num 
													n: int = 3
											ctx: Load 
									keywords: list 
								ops: list 
									element: LtE 
								comparators: list 
									element: Call 
										func: Name 
											id: str = set
											ctx: Load 
										args: list 
											element: Tuple 
												elts: list 
													element: Num 
														n: int = 3
													element: Num 
														n: int = 2
													element: Num 
														n: int = 1
												ctx: Load 
										keywords: list 
						keywords: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: Compare 
								left: Call 
									func: Name 
										id: str = set
										ctx: Load 
									args: list 
										element: Tuple 
											elts: list 
												element: Num 
													n: int = 1
												element: Num 
													n: int = 2
												element: Num 
													n: int = 3
											ctx: Load 
									keywords: list 
								ops: list 
									element: Gt 
								comparators: list 
									element: Call 
										func: Name 
											id: str = set
											ctx: Load 
										args: list 
											element: Tuple 
												elts: list 
													element: Num 
														n: int = 2
													element: Num 
														n: int = 1
												ctx: Load 
										keywords: list 
						keywords: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: Compare 
								left: Call 
									func: Name 
										id: str = set
										ctx: Load 
									args: list 
										element: Tuple 
											elts: list 
												element: Num 
													n: int = 1
												element: Num 
													n: int = 2
												element: Num 
													n: int = 3
											ctx: Load 
									keywords: list 
								ops: list 
									element: GtE 
								comparators: list 
									element: Call 
										func: Name 
											id: str = set
											ctx: Load 
										args: list 
											element: Tuple 
												elts: list 
													element: Num 
														n: int = 3
													element: Num 
														n: int = 2
													element: Num 
														n: int = 1
												ctx: Load 
										keywords: list 
						keywords: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: Compare 
								left: Tuple 
									elts: list 
										element: Num 
											n: int = 1
										element: Num 
											n: int = 2
										element: Num 
											n: int = 3
									ctx: Load 
								ops: list 
									element: Eq 
								comparators: list 
									element: Tuple 
										elts: list 
											element: Num 
												n: int = 1
											element: Num 
												n: int = 2
											element: Num 
												n: int = 3
										ctx: Load 
						keywords: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: Compare 
								left: List 
									elts: list 
										element: Num 
											n: int = 1
										element: Num 
											n: int = 2
										element: Num 
											n: int = 3
									ctx: Load 
								ops: list 
									element: Eq 
								comparators: list 
									element: List 
										elts: list 
											element: Num 
												n: int = 1
											element: Num 
												n: int = 2
											element: Num 
												n: int = 3
										ctx: Load 
						keywords: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: Compare 
								left: Tuple 
									elts: list 
										element: Num 
											n: int = 1
										element: Num 
											n: int = 2
										element: Num 
											n: int = 3
									ctx: Load 
								ops: list 
									element: NotEq 
								comparators: list 
									element: Tuple 
										elts: list 
											element: Num 
												n: int = 1
											element: Num 
												n: int = 2
											element: Num 
												n: int = 3
										ctx: Load 
						keywords: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: Compare 
								left: List 
									elts: list 
										element: Num 
											n: int = 1
										element: Num 
											n: int = 2
										element: Num 
											n: int = 3
									ctx: Load 
								ops: list 
									element: NotEq 
								comparators: list 
									element: List 
										elts: list 
											element: Num 
												n: int = 1
											element: Num 
												n: int = 2
											element: Num 
												n: int = 3
										ctx: Load 
						keywords: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: Compare 
								left: Tuple 
									elts: list 
										element: Num 
											n: int = 2
										element: Num 
											n: int = 1
										element: Num 
											n: int = 3
									ctx: Load 
								ops: list 
									element: Eq 
								comparators: list 
									element: Tuple 
										elts: list 
											element: Num 
												n: int = 1
											element: Num 
												n: int = 2
											element: Num 
												n: int = 3
										ctx: Load 
						keywords: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: Compare 
								left: List 
									elts: list 
										element: Num 
											n: int = 2
										element: Num 
											n: int = 1
										element: Num 
											n: int = 3
									ctx: Load 
								ops: list 
									element: Eq 
								comparators: list 
									element: List 
										elts: list 
											element: Num 
												n: int = 1
											element: Num 
												n: int = 2
											element: Num 
												n: int = 3
										ctx: Load 
						keywords: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: Compare 
								left: Tuple 
									elts: list 
										element: Num 
											n: int = 2
										element: Num 
											n: int = 1
										element: Num 
											n: int = 3
									ctx: Load 
								ops: list 
									element: NotEq 
								comparators: list 
									element: Tuple 
										elts: list 
											element: Num 
												n: int = 1
											element: Num 
												n: int = 2
											element: Num 
												n: int = 3
										ctx: Load 
						keywords: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: Compare 
								left: List 
									elts: list 
										element: Num 
											n: int = 2
										element: Num 
											n: int = 1
										element: Num 
											n: int = 3
									ctx: Load 
								ops: list 
									element: NotEq 
								comparators: list 
									element: List 
										elts: list 
											element: Num 
												n: int = 1
											element: Num 
												n: int = 2
											element: Num 
												n: int = 3
										ctx: Load 
						keywords: list 
				element: Expr 
					value: Call 
						func: Name 
							id: str = __pragma__
							ctx: Load 
						args: list 
							element: Str 
								s: str = noopov
						keywords: list 
				element: ClassDef 
					name: str = Bitwise
					bases: list 
					keywords: list 
					body: list 
						element: FunctionDef 
							name: str = __lshift__
							args: arguments 
								args: list 
									element: arg 
										arg: str = self
										annotation: NoneType = None
									element: arg 
										arg: str = other
										annotation: NoneType = None
								vararg: NoneType = None
								kwonlyargs: list 
								kw_defaults: list 
								kwarg: NoneType = None
								defaults: list 
							body: list 
								element: Expr 
									value: Call 
										func: Attribute 
											value: Name 
												id: str = autoTester
												ctx: Load 
											attr: str = check
											ctx: Load 
										args: list 
											element: Str 
												s: str = lshift
										keywords: list 
							decorator_list: list 
							returns: NoneType = None
						element: FunctionDef 
							name: str = __rlshift__
							args: arguments 
								args: list 
									element: arg 
										arg: str = self
										annotation: NoneType = None
									element: arg 
										arg: str = other
										annotation: NoneType = None
								vararg: NoneType = None
								kwonlyargs: list 
								kw_defaults: list 
								kwarg: NoneType = None
								defaults: list 
							body: list 
								element: Expr 
									value: Call 
										func: Attribute 
											value: Name 
												id: str = autoTester
												ctx: Load 
											attr: str = check
											ctx: Load 
										args: list 
											element: Str 
												s: str = rlshift
										keywords: list 
							decorator_list: list 
							returns: NoneType = None
						element: FunctionDef 
							name: str = __rshift__
							args: arguments 
								args: list 
									element: arg 
										arg: str = self
										annotation: NoneType = None
									element: arg 
										arg: str = other
										annotation: NoneType = None
								vararg: NoneType = None
								kwonlyargs: list 
								kw_defaults: list 
								kwarg: NoneType = None
								defaults: list 
							body: list 
								element: Expr 
									value: Call 
										func: Attribute 
											value: Name 
												id: str = autoTester
												ctx: Load 
											attr: str = check
											ctx: Load 
										args: list 
											element: Str 
												s: str = rshift
										keywords: list 
							decorator_list: list 
							returns: NoneType = None
						element: FunctionDef 
							name: str = __rrshift__
							args: arguments 
								args: list 
									element: arg 
										arg: str = self
										annotation: NoneType = None
									element: arg 
										arg: str = other
										annotation: NoneType = None
								vararg: NoneType = None
								kwonlyargs: list 
								kw_defaults: list 
								kwarg: NoneType = None
								defaults: list 
							body: list 
								element: Expr 
									value: Call 
										func: Attribute 
											value: Name 
												id: str = autoTester
												ctx: Load 
											attr: str = check
											ctx: Load 
										args: list 
											element: Str 
												s: str = rrshift
										keywords: list 
							decorator_list: list 
							returns: NoneType = None
						element: FunctionDef 
							name: str = __or__
							args: arguments 
								args: list 
									element: arg 
										arg: str = self
										annotation: NoneType = None
									element: arg 
										arg: str = other
										annotation: NoneType = None
								vararg: NoneType = None
								kwonlyargs: list 
								kw_defaults: list 
								kwarg: NoneType = None
								defaults: list 
							body: list 
								element: Expr 
									value: Call 
										func: Attribute 
											value: Name 
												id: str = autoTester
												ctx: Load 
											attr: str = check
											ctx: Load 
										args: list 
											element: Str 
												s: str = or
										keywords: list 
							decorator_list: list 
							returns: NoneType = None
						element: FunctionDef 
							name: str = __ror__
							args: arguments 
								args: list 
									element: arg 
										arg: str = self
										annotation: NoneType = None
									element: arg 
										arg: str = other
										annotation: NoneType = None
								vararg: NoneType = None
								kwonlyargs: list 
								kw_defaults: list 
								kwarg: NoneType = None
								defaults: list 
							body: list 
								element: Expr 
									value: Call 
										func: Attribute 
											value: Name 
												id: str = autoTester
												ctx: Load 
											attr: str = check
											ctx: Load 
										args: list 
											element: Str 
												s: str = ror
										keywords: list 
							decorator_list: list 
							returns: NoneType = None
						element: FunctionDef 
							name: str = __xor__
							args: arguments 
								args: list 
									element: arg 
										arg: str = self
										annotation: NoneType = None
									element: arg 
										arg: str = other
										annotation: NoneType = None
								vararg: NoneType = None
								kwonlyargs: list 
								kw_defaults: list 
								kwarg: NoneType = None
								defaults: list 
							body: list 
								element: Expr 
									value: Call 
										func: Attribute 
											value: Name 
												id: str = autoTester
												ctx: Load 
											attr: str = check
											ctx: Load 
										args: list 
											element: Str 
												s: str = xor
										keywords: list 
							decorator_list: list 
							returns: NoneType = None
						element: FunctionDef 
							name: str = __rxor__
							args: arguments 
								args: list 
									element: arg 
										arg: str = self
										annotation: NoneType = None
									element: arg 
										arg: str = other
										annotation: NoneType = None
								vararg: NoneType = None
								kwonlyargs: list 
								kw_defaults: list 
								kwarg: NoneType = None
								defaults: list 
							body: list 
								element: Expr 
									value: Call 
										func: Attribute 
											value: Name 
												id: str = autoTester
												ctx: Load 
											attr: str = check
											ctx: Load 
										args: list 
											element: Str 
												s: str = rxor
										keywords: list 
							decorator_list: list 
							returns: NoneType = None
						element: FunctionDef 
							name: str = __and__
							args: arguments 
								args: list 
									element: arg 
										arg: str = self
										annotation: NoneType = None
									element: arg 
										arg: str = other
										annotation: NoneType = None
								vararg: NoneType = None
								kwonlyargs: list 
								kw_defaults: list 
								kwarg: NoneType = None
								defaults: list 
							body: list 
								element: Expr 
									value: Call 
										func: Attribute 
											value: Name 
												id: str = autoTester
												ctx: Load 
											attr: str = check
											ctx: Load 
										args: list 
											element: Str 
												s: str = and
										keywords: list 
							decorator_list: list 
							returns: NoneType = None
						element: FunctionDef 
							name: str = __rand__
							args: arguments 
								args: list 
									element: arg 
										arg: str = self
										annotation: NoneType = None
									element: arg 
										arg: str = other
										annotation: NoneType = None
								vararg: NoneType = None
								kwonlyargs: list 
								kw_defaults: list 
								kwarg: NoneType = None
								defaults: list 
							body: list 
								element: Expr 
									value: Call 
										func: Attribute 
											value: Name 
												id: str = autoTester
												ctx: Load 
											attr: str = check
											ctx: Load 
										args: list 
											element: Str 
												s: str = rand
										keywords: list 
							decorator_list: list 
							returns: NoneType = None
					decorator_list: list 
				element: Assign 
					targets: list 
						element: Name 
							id: str = bitwise
							ctx: Store 
					value: Call 
						func: Name 
							id: str = Bitwise
							ctx: Load 
						args: list 
						keywords: list 
				element: Expr 
					value: Call 
						func: Name 
							id: str = __pragma__
							ctx: Load 
						args: list 
							element: Str 
								s: str = opov
						keywords: list 
				element: Expr 
					value: BinOp 
						left: Name 
							id: str = bitwise
							ctx: Load 
						op: LShift 
						right: List 
							elts: list 
							ctx: Load 
				element: Expr 
					value: BinOp 
						left: List 
							elts: list 
							ctx: Load 
						op: LShift 
						right: Name 
							id: str = bitwise
							ctx: Load 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: BinOp 
								left: Num 
									n: int = 32
								op: LShift 
								right: Num 
									n: int = 2
						keywords: list 
				element: Expr 
					value: BinOp 
						left: Name 
							id: str = bitwise
							ctx: Load 
						op: RShift 
						right: List 
							elts: list 
							ctx: Load 
				element: Expr 
					value: BinOp 
						left: List 
							elts: list 
							ctx: Load 
						op: RShift 
						right: Name 
							id: str = bitwise
							ctx: Load 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: BinOp 
								left: Num 
									n: int = 32
								op: RShift 
								right: Num 
									n: int = 2
						keywords: list 
				element: Expr 
					value: BinOp 
						left: Name 
							id: str = bitwise
							ctx: Load 
						op: BitOr 
						right: List 
							elts: list 
							ctx: Load 
				element: Expr 
					value: BinOp 
						left: List 
							elts: list 
							ctx: Load 
						op: BitOr 
						right: Name 
							id: str = bitwise
							ctx: Load 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: BinOp 
								left: Num 
									n: int = 1
								op: BitOr 
								right: Num 
									n: int = 4
						keywords: list 
				element: Expr 
					value: BinOp 
						left: Name 
							id: str = bitwise
							ctx: Load 
						op: BitXor 
						right: List 
							elts: list 
							ctx: Load 
				element: Expr 
					value: BinOp 
						left: List 
							elts: list 
							ctx: Load 
						op: BitXor 
						right: Name 
							id: str = bitwise
							ctx: Load 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: BinOp 
								left: Num 
									n: int = 11
								op: BitXor 
								right: Num 
									n: int = 13
						keywords: list 
				element: Expr 
					value: BinOp 
						left: Name 
							id: str = bitwise
							ctx: Load 
						op: BitAnd 
						right: List 
							elts: list 
							ctx: Load 
				element: Expr 
					value: BinOp 
						left: List 
							elts: list 
							ctx: Load 
						op: BitAnd 
						right: Name 
							id: str = bitwise
							ctx: Load 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: BinOp 
								left: Num 
									n: int = 12
								op: BitAnd 
								right: Num 
									n: int = 20
						keywords: list 
				element: Assign 
					targets: list 
						element: Name 
							id: str = a
							ctx: Store 
					value: Num 
						n: int = 32
				element: AugAssign 
					target: Name 
						id: str = a
						ctx: Store 
					op: LShift 
					value: Num 
						n: int = 2
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: Name 
								id: str = a
								ctx: Load 
						keywords: list 
				element: Expr 
					value: Call 
						func: Name 
							id: str = __pragma__
							ctx: Load 
						args: list 
							element: Str 
								s: str = noopov
						keywords: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: BinOp 
								left: Num 
									n: int = 32
								op: LShift 
								right: Num 
									n: int = 2
						keywords: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: BinOp 
								left: Num 
									n: int = 32
								op: RShift 
								right: Num 
									n: int = 2
						keywords: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: BinOp 
								left: Num 
									n: int = 1
								op: BitOr 
								right: Num 
									n: int = 4
						keywords: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: BinOp 
								left: Num 
									n: int = 11
								op: BitXor 
								right: Num 
									n: int = 13
						keywords: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: BinOp 
								left: Num 
									n: int = 12
								op: BitAnd 
								right: Num 
									n: int = 20
						keywords: list 
				element: Assign 
					targets: list 
						element: Name 
							id: str = a
							ctx: Store 
					value: Num 
						n: int = 32
				element: AugAssign 
					target: Name 
						id: str = a
						ctx: Store 
					op: LShift 
					value: Num 
						n: int = 2
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: Name 
								id: str = a
								ctx: Load 
						keywords: list 
				element: ClassDef 
					name: str = A
					bases: list 
					keywords: list 
					body: list 
						element: FunctionDef 
							name: str = __init__
							args: arguments 
								args: list 
									element: arg 
										arg: str = self
										annotation: NoneType = None
								vararg: NoneType = None
								kwonlyargs: list 
								kw_defaults: list 
								kwarg: NoneType = None
								defaults: list 
							body: list 
								element: Assign 
									targets: list 
										element: Attribute 
											value: Name 
												id: str = self
												ctx: Load 
											attr: str = b
											ctx: Store 
									value: Dict 
										keys: list 
										values: list 
							decorator_list: list 
							returns: NoneType = None
					decorator_list: list 
				element: Assign 
					targets: list 
						element: Name 
							id: str = a
							ctx: Store 
					value: Call 
						func: Name 
							id: str = A
							ctx: Load 
						args: list 
						keywords: list 
				element: Assign 
					targets: list 
						element: Subscript 
							value: Attribute 
								value: Name 
									id: str = a
									ctx: Load 
								attr: str = b
								ctx: Load 
							slice: Index 
								value: Str 
									s: str = c
							ctx: Store 
					value: Str 
						s: str = d
				element: Expr 
					value: Call 
						func: Name 
							id: str = __pragma__
							ctx: Load 
						args: list 
							element: Str 
								s: str = opov
						keywords: list 
				element: AugAssign 
					target: Subscript 
						value: Attribute 
							value: Name 
								id: str = a
								ctx: Load 
							attr: str = b
							ctx: Load 
						slice: Index 
							value: Str 
								s: str = c
						ctx: Store 
					op: Add 
					value: Str 
						s: str = e
				element: Expr 
					value: Call 
						func: Name 
							id: str = __pragma__
							ctx: Load 
						args: list 
							element: Str 
								s: str = noopov
						keywords: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: Subscript 
								value: Attribute 
									value: Name 
										id: str = a
										ctx: Load 
									attr: str = b
									ctx: Load 
								slice: Index 
									value: Str 
										s: str = c
								ctx: Load 
						keywords: list 
			decorator_list: list 
			returns: NoneType = None