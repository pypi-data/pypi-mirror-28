{
	"version": 3,
	"file": "D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/development/automated_tests/transcrypt/module_cmath/__javascript__/module_cmath.mod.js",
	"sources": [
		"D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/development/automated_tests/transcrypt/module_cmath/__init__.py"
	],
	"sourcesContent": [
		"from org.transcrypt.stubs.browser import __pragma__\nfrom cmath import *\n\ntwoPi = 2 * pi\nnDecs = 5\n\n__pragma__ ('opov')\n\ndef run (autoTester):\n    autoTester.check (phase (1 + 1j))\n    \n    aPolar = polar (3 + 5j)\n    autoTester.check (round (aPolar [0], nDecs), aPolar [1])\n    \n    aRect = rect (*aPolar)\n    autoTester.check (round (aRect.real), round (aRect.imag))\n    \n    anExp = exp (-2.2 - 3.3j)\n    autoTester.check (round (anExp.real, nDecs), round (anExp.imag, nDecs))\n    \n    aLog = log (anExp)\n    autoTester.check (round (aLog.real, nDecs), round (aLog.imag, nDecs))\n    \n    anExp10 = aLog ** 10\n    autoTester.check (round (anExp10.real, nDecs), round (anExp10.imag, nDecs))\n    \n    aLog10 = log10 (anExp10)\n    autoTester.check (round (aLog10.real, nDecs), round (aLog10.imag, nDecs))\n    \n    anExpRect = aLog ** aRect\n    autoTester.check (round (anExpRect.real, nDecs), round (anExpRect.imag, nDecs))\n    \n    aLogRect = log (anExpRect, aRect)\n    autoTester.check (round (aLogRect.real, nDecs), round (aLogRect.imag, nDecs))\n    \n    aSqrt = sqrt (1j)\n    autoTester.check (round (aSqrt.real, nDecs), round (aSqrt.imag, nDecs))\n    autoTester.check (sqrt (4))\n    anotherSqrt = sqrt (-4)\n    autoTester.check (round (anotherSqrt.real), round (anotherSqrt.imag))\n    \n    anAsin = asin (1 + 2j)\n    autoTester.check (round (anAsin.real, nDecs), round (anAsin.imag, nDecs))\n\n    anAcos = acos (-2 + 3j)\n    autoTester.check (round (anAcos.real, nDecs), round (anAcos.imag, nDecs))\n    \n    anAtan = atan (3 - 4j)\n    autoTester.check (round (anAtan.real, nDecs), round (anAtan.imag, nDecs))\n    \n    aSin = sin (anAsin)\n    autoTester.check (round (aSin.real), round (aSin.imag))\n    \n    aCos = cos (anAcos)\n    autoTester.check (round (aCos.real), round (aCos.imag))\n    \n    aTan = tan (anAtan)\n    autoTester.check (round (aTan.real), round (aTan.imag))\n    \n    anAsinh = asinh (aCos)\n    autoTester.check (round (anAsinh.real, nDecs), round (anAsinh.imag, nDecs))\n\n    anAcosh = acosh (aSin)\n    autoTester.check (round (anAcosh.real, nDecs), round (anAcosh.imag, nDecs))\n    \n    anAtanh = atanh (aTan)\n    autoTester.check (round (anAtanh.real, nDecs), round (anAtanh.imag, nDecs))\n    \n    aSinh = sinh (anAsinh)\n    autoTester.check (round (aSinh.real), round (aSinh.imag))\n    \n    aCosh = cosh (anAcosh)\n    autoTester.check (round (aCosh.real), round (aCosh.imag))\n    \n    aTanh = tanh (anAtanh)\n    autoTester.check (round (aTanh.real), round (aTanh.imag))\n    "
	],
	"mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAIA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA"
}