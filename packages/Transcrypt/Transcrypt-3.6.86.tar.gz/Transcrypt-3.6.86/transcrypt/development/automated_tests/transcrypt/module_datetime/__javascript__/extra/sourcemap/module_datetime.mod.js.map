{
	"version": 3,
	"file": "D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/development/automated_tests/transcrypt/module_datetime/__javascript__/module_datetime.mod.js",
	"sources": [
		"D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/development/automated_tests/transcrypt/module_datetime/__init__.py"
	],
	"sourcesContent": [
		"from datetime import date, timedelta, datetime, timezone\n\n# __pragma__('opov')\n\n\ndef fix_time (dt):\n    if dt.hour > 23:\n        dt = dt - timedelta (minutes=60)\n    if dt.minute > 50:\n        dt = dt - timedelta (minutes=10)\n    return dt\n\ndef run (autoTester):\n    # timezone\n    tz = timezone.utc\n    autoTester.check (repr (tz))\n\n    tz2 = timezone (timedelta (hours=-5), 'EST')\n    autoTester.check (repr (tz2))\n\n    now = fix_time (datetime.utcnow ())\n    now2 = fix_time (datetime.now (timezone.utc))\n    autoTester.check (now.day == now2.day)\n    autoTester.check (now.hour == now2.hour)\n    autoTester.check (now.replace (tzinfo=timezone.utc).astimezone (tz=None).hour)\n\n    # timedelta\n    delta = timedelta (days=8, minutes=15, microseconds=685)\n    delta2 = timedelta (days=8, minutes=15, microseconds=684)\n    autoTester.check (delta)\n    autoTester.check (delta2)\n\n    # timedelta comparisons\n    autoTester.check (delta == delta2)\n    autoTester.check (delta > delta2)\n    autoTester.check (delta < delta2)\n\n    # date\n    d = date (2017, 5, 5)\n    autoTester.check (d.day)\n    d = date.today ()\n    autoTester.check (d)\n    autoTester.check (d.day)\n    autoTester.check (d.weekday ())\n    autoTester.check (d.isoweekday ())\n    autoTester.check (d.isocalendar ())\n    autoTester.check (d.ctime ())\n    d = d.replace (day=28)\n    autoTester.check (d.day)\n    autoTester.check (d.strftime ('%Y.%m.%d'))\n    autoTester.check (d.ctime ())\n    autoTester.check (d.isoformat ())\n\n    # date comparisons\n    d2 = d + delta\n    d3 = d2 - delta\n    autoTester.check (d)\n    autoTester.check (d2)\n    autoTester.check (d3)\n    autoTester.check (d == d3)\n    autoTester.check (d > d3)\n    autoTester.check (d < d3)\n    autoTester.check (d == d2)\n    autoTester.check (d > d2)\n    autoTester.check (d < d2)\n\n    # datetime\n    now = fix_time (datetime.now ())\n    autoTester.check (now.day)\n    autoTester.check (now.hour)\n    autoTester.check ((now + timedelta (days=2)).day)\n\n    d = datetime (2010, 1, 1, tzinfo=timezone.utc)\n    autoTester.check (d)\n\n    d = datetime (2017, 9, 19, 15, 43, 8, 142)\n    autoTester.check (d)\n    autoTester.check (d - timedelta (minutes=150))\n\n    d = datetime.strptime ('2017-03-14 15:28:14', '%Y-%m-%d %H:%M:%S')\n    autoTester.check (d)\n    autoTester.check (d.strftime ('%Y.%m.%d %H:%M:%S'))\n    d = d + timedelta (hours=5, minutes=18, seconds=25)\n    autoTester.check (d.strftime ('%Y-%m-%d %H:%M:%S'))\n    d = d.replace (year=2016, month=1)\n    autoTester.check (d.ctime ())\n    autoTester.check (d.isoformat ())\n    autoTester.check (d.date ())\n    autoTester.check (d.time ())\n    # named tuples not supported, need to convert\n    autoTester.check (tuple (d.timetuple ()))\n    autoTester.check (tuple (d.utctimetuple ()))\n\n    # datetime comparisons\n    d2 = d + delta\n    d3 = d2 - delta\n    autoTester.check (d)\n    autoTester.check (d2)\n    autoTester.check (d3)\n    autoTester.check (d == d3)\n    autoTester.check (d > d3)\n    autoTester.check (d < d3)\n    autoTester.check (d == d2)\n    autoTester.check (d > d2)\n    autoTester.check (d < d2)"
	],
	"mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA"
}