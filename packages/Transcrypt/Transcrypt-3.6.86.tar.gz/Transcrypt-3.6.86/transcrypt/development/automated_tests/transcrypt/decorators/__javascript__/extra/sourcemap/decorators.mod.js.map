{
	"version": 3,
	"file": "D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/development/automated_tests/transcrypt/decorators/__javascript__/decorators.mod.js",
	"sources": [
		"D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/development/automated_tests/transcrypt/decorators/__init__.py"
	],
	"sourcesContent": [
		"from org.transcrypt.stubs.browser import __pragma__\n\ndef run (autoTester):\n    def repeat3 (bareFunc):\n        __pragma__ ('kwargs')\n        def innerFunc (*args, **kwargs):\n            autoTester.check ('BEGIN repeat3')\n            for i in range (3):\n                bareFunc (*args, **kwargs)\n            autoTester.check ('END repeat3')\n        __pragma__ ('nokwargs')\n        return innerFunc\n        \n    def repeatN (n):\n        def repeat (bareFunc):\n            __pragma__ ('kwargs')\n            def innerFunc (*args, **kwargs):\n                autoTester.check ('BEGIN repeatN ({})'.format (n))\n                for i in range (n):\n                    bareFunc (*args, **kwargs)\n                autoTester.check ('END repeatN ({})'.format (n))\n            __pragma__ ('nokwargs')\n            return innerFunc\n        return repeat\n\n    class Repeater:\n        def __init__ (self, n):\n            self.n = n\n            \n        def __call__ (self, bareFunc):\n            __pragma__ ('kwargs')\n            def innerFunc (*args, **kwargs):\n                autoTester.check ('BEGIN repeat3')\n                for i in range (self.n):\n                    bareFunc (*args, **kwargs)\n                autoTester.check ('END repeat3')\n            __pragma__ ('nokwargs')\n            return innerFunc\n        \n    @repeatN (4)\n    @repeat3\n    def funcNoArg ():\n        autoTester.check ('spam')\n        \n    funcNoArg ()\n    autoTester.check ()\n\n    __pragma__ ('kwargs')\n    @repeat3\n    @repeatN (2)\n    def funcArg (a):\n        autoTester.check ('eggs', a)\n    __pragma__ ('nokwargs')\n        \n    funcArg (3)\n    autoTester.check ()\n\n    funcArg (a = 4)\n    autoTester.check ()\n\n    __pragma__ ('opov')\n    @Repeater (3)\n    def funcNoArg2 ():\n        autoTester.check ('toast')\n    __pragma__ ('noopov')\n\n    funcNoArg2 ()\n    autoTester.check ()\n\n    __pragma__ ('opov')\n    __pragma__ ('kwargs')\n    @Repeater (5)\n    def funcArg2 (a):\n        autoTester.check ('jam', a)\n    __pragma__ ('nokwargs')\n    __pragma__ ('noopov')\n\n    funcArg2 (3)\n    autoTester.check ()\n\n    funcArg2 (a = 4)\n    autoTester.check ()\n\n    def next (bareFunc):\n        def innerFunc (value):\n            return bareFunc (value + 1)\n        return innerFunc\n        \n    @next\n    class Number:\n        def __init__ (self, value):\n            self.value = value\n            \n    autoTester.check ('two', Number (1) .value)\n    \n    class Test: \n        @classmethod\n        def f (cls, x, y):\n            autoTester.check (cls.__name__, x, y)\n            \n        def g (self, x, y):\n            autoTester.check (self.__class__.__name__, x, y)\n            \n    test = Test ()\n\n    test.f (1, 2)\n    test.g (3, 4)\n    \n    "
	],
	"mappings
}