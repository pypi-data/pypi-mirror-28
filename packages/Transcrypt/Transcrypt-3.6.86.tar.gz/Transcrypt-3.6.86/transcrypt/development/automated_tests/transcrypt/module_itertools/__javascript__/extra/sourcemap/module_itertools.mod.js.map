{
	"version": 3,
	"file": "D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/development/automated_tests/transcrypt/module_itertools/__javascript__/module_itertools.mod.js",
	"sources": [
		"D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/development/automated_tests/transcrypt/module_itertools/__init__.py"
	],
	"sourcesContent": [
		"from itertools import *\nfrom math import pow\n\ndef fibonacci():\n    a, b = 0, 1\n    for i in range (10):\n        yield a\n        a, b = b, a + b\n\nsquares = [i * i for i in range (10)]\n\nchars = 'thequickbrownfoxjumpsoverthelazydog'\n        \ndef run (autoTester):\n    autoTester.check ('islice count', list (islice (count (10, 2), 4, 40, 3)))\n    autoTester.check ('islice cycle', list (islice (cycle (fibonacci ()), 15)))\n    autoTester.check ('repeat', list (repeat (3.14, 15)))\n    autoTester.check ('islice repeat', list (islice (repeat (2.74), 15)))\n    autoTester.check ('accumulate', list (accumulate (range (5))))\n\n    def add (total, element):\n        return total + element\n    \n    autoTester.check ('accumulate', list (accumulate (['alamak', 'mirach', 'sirrah'], add)))\n    \n    autoTester.check ('chain', list (chain (fibonacci (), squares, chars)))\n    autoTester.check ('chain.from_iterable', list (chain.from_iterable (['ape', 'node', 'mice', 'vim', 'sus', 'jet'])))\n    \n    selectors = [True, True, False, True, False, False, True, True, False, True]\n    \n    autoTester.check ('compress', list (compress (\n        ['{}{}'.format (('take' if selector else 'leave'), index) for index, selector in enumerate (selectors)],\n        selectors\n    )))\n    \n    autoTester.check ('dropwhile', list (dropwhile (lambda x: x < 5, [1, 4, 6, 4, 1])))\n    autoTester.check ('filterfalse', list (filterfalse (lambda x: x % 2, range (10))))\n    \n    things = [('animal', 'bear'), ('animal', 'duck'), ('plant', 'cactus'), ('vehicle', 'speed boat'), ('vehicle', 'school bus')]\n\n    for key, group in groupby (things, lambda x: x [0]):\n        for thing in group:\n            autoTester.check ('A {} is a {}.' .format (thing[1], key))\n        autoTester.check (' ')\n        \n    autoTester.check ('islice', list (islice ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2, 9, 2)))\n        \n    autoTester.check ('starmap', [int (x) for x in starmap (pow, [(2, 5), (3, 2), (10, 3)])])\n    autoTester.check ('takewhile', list (takewhile (lambda x: x < 5, [1, 4, 6, 4, 1])))\n    \n    i1, i2 = tee (islice (count (), 5))\n    autoTester.check ('tee', list (i1), list (i1), list (i2))\n    \n    autoTester.check ('product', list (product ('ABCD', 'xy')), list (product (range (2), repeat = 3)))\n\n    autoTester.check ('permutations', list (permutations ('ABCD')), list (permutations ('ABCD', 2)))\n    \n    autoTester.check ('combinations',\n        list (combinations ('ABCD', 2)),\n        list (combinations ([1, 2, 3, 4, 5], 3)),\n        list (combinations (islice (count (), 6), 4))\n    )\n    \n    autoTester.check ('combinations_with_replacement',\n        list (combinations_with_replacement ('ABCD', 2)),\n        list (combinations_with_replacement ([1, 2, 3, 4, 5], 3)),\n        list (combinations_with_replacement (islice (count (), 6), 4))\n    )\n    "
	],
	"mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AAEA;AACA;AAEA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAEA;AAEA;AAKA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA"
}