{
	"version": 3,
	"file": "D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/development/automated_tests/transcrypt/classes/__javascript__/classes.mod.js",
	"sources": [
		"D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/development/automated_tests/transcrypt/classes/__init__.py"
	],
	"sourcesContent": [
		"def run (autoTester):\n    autoTester.check ('<br>General<br>')\n\n    class A:\n        p = 123\n        def __init__ (self, x):\n            self.x = x\n            autoTester.check (self.p)\n\n        def show (self, label):\n            autoTester.check ('A.show', label, self.x)\n            \n        def show2 (self, label):\n            autoTester.check ('A.show2', label, self.x)\n        \n    class B:\n        p, q = 456, 789\n        def __init__ (self, y):\n            autoTester.check ('In B constructor')\n            self.y = y\n            autoTester.check (self.p)\n            \n        def show (self, label):\n            autoTester.check ('B.show', label, self.y)\n            \n    class C (A, B):\n        def __init__ (self, x, y):\n            autoTester.check ('In C constructor')\n            A.__init__ (self, x)\n            B.__init__ (self, y)\n            \n        def show (self, label):\n            A.show (self, label)\n            B.show (self, label)\n            autoTester.check ('C.show', label, self.x, self.y)\n        \n    a = A (1001)\n    a.show ('america')\n    autoTester.check (A.p)\n    autoTester.check (a.p)\n\n    b = B (2002)\n    b.show ('russia')\n    autoTester.check (B.p)\n    autoTester.check (b.p)\n    autoTester.check (b.q)\n\n    autoTester.check (A.p)\n    autoTester.check (a.p)\n\n    c = C (3003, 4004)\n    c.show ('netherlands')\n    autoTester.check (C.p)\n    autoTester.check (c.p)\n    autoTester.check (c.q)\n\n    c.show2 ('amsterdam')\n    A.show2 (c, 'rotterdam')\n\n    show3 = c.show\n    show3 ('copy')\n    \n    autoTester.check (hasattr (a, 'x'))\n    autoTester.check (hasattr (a, 'y'))\n    autoTester.check (hasattr (a, 'p'))\n    autoTester.check (hasattr (a, 'q'))\n    \n    autoTester.check ('<br><br>Augmented isinstance and issubclass<br>')\n    # Augmented meaning: compatible with native JavaScript types\n        \n    simpleTypes = (dict, list, A, B, C, bool, str, float, int, object)\n    tupleTypes = ((dict, list), (bool, int), (bool, A), (C, B), (B, object))\n    for i, types in enumerate ((simpleTypes, tupleTypes)):\n        for j, aType in enumerate (types):\n            for k, anObject in enumerate (({'a': 1}, [], a, C, c, C, b, True, 'a', 1, 1.2)):\n                autoTester.check (i, j, k, isinstance (anObject, aType))\n                if types == simpleTypes:\n                    autoTester.check (i, j, k, isinstance (anObject, simpleTypes))\n\n    for i, types in enumerate ((simpleTypes, tupleTypes)):\n        for j, aType in enumerate (types):\n            for k, aClass in enumerate ((dict, list, A, C, B, bool, str, int, float)):\n                autoTester.check (i + 2, j, k, issubclass (aClass, aType))\n                if types == simpleTypes:\n                    autoTester.check (i + 2, j, k, issubclass (aClass, simpleTypes))\n                    \n    autoTester.check ('<br><br>Method resolution order<br>')\n    \n    def mro (aClass, result = None):\n        ''' Recursively assemble method resolution order from all base classes'''\n        last = 0\n        if result is None:\n            result = [aClass]\n            last = 1\n        for aBase in aClass.__bases__:\n            if not aBase in result and aBase != object:\n                result.append (aBase)\n                mro (aBase, result)\n        if last and object in aClass.__bases__:\n            aRoot.append (object)\n        return result\n        \n    autoTester.check ([aClass.__name__ for aClass in mro (C)])\n    "
	],
	"mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAPA;AAAA;AAAA;AASA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA"
}