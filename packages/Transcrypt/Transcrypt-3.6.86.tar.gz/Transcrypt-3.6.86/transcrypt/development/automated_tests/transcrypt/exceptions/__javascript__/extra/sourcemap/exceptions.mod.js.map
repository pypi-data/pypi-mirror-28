{
	"version": 3,
	"file": "D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/development/automated_tests/transcrypt/exceptions/__javascript__/exceptions.mod.js",
	"sources": [
		"D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/development/automated_tests/transcrypt/exceptions/__init__.py"
	],
	"sourcesContent": [
		"from org.transcrypt.stubs.browser import __envir__, __new__, __pragma__\n\nif __envir__.executor_name == __envir__.transpiler_name:\n    class BaseException:        # ??? Make part of __builtins__ for CPython compliance?\n        pass\n\nclass Ex1 (Exception):\n    pass\n        \nclass Ex2 (Ex1):\n    pass\n    \nclass Ex3 (Exception):\n    pass\n    \nclass Table (BaseException):    # Any Python exception MUST inherit from BaseException\n    def __init__ (self, *args):\n        self.fields = args\n        \n    def __repr__ (self):\n        return 'Table' + repr (self.fields) .replace (', ', ',') .replace ('\\'', '')\n\ndef test1 ():\n    raise (Exception ('mary'))\n    \ndef test2 (autoTester):\n    try:\n        test1 ()\n    except Ex1 as exception:\n        autoTester.check (111)\n        autoTester.check (exception)\n    except Exception as exception:\n        autoTester.check (222)\n        autoTester.check (exception)\n        \ndef run (autoTester):\n    test2 (autoTester)\n    \n    try:\n        raise Ex2 ('had')\n    except Ex1 as exception:\n        autoTester.check ('a')\n    except Exception as exception:\n        autoTester.check ('little')\n        autoTester.check (exception)\n        \n    autoTester.check (333)\n        \n    try:\n        raise Ex1 ('lamb')\n    except Ex2 as exception:\n        autoTester.check ('his')\n        autoTester.check (exception)\n    except Ex1 as exception:\n        autoTester.check ('fleece')\n        autoTester.check (exception)\n    except Exception as exception:\n        autoTester.check ('was')\n        autoTester.check (exception)\n    finally:\n        autoTester.check ('white')\n        \n    autoTester.check (444)\n\n    def test3 ():\n        raise Ex3 ('as')\n        \n    autoTester.check (555)\n\n    try:\n        test3 ()\n    except Ex1 as exception:\n        autoTester.check ('snow')\n        autoTester.check (exception)\n    except Exception as exception:\n        autoTester.check ('and')\n        autoTester.check (exception)\n    finally:\n        autoTester.check ('everywhere')\n        \n    autoTester.check (666)\n    \n    try:\n        raise Ex3 ('that')\n    except Ex1 as exception:\n        autoTester.check ('mary')\n        autoTester.check (exception)\n    except:\n        autoTester.check ('went')\n    finally:\n        autoTester.check ('the')\n    \n    autoTester.check (777)\n    \n    try:\n        try:\n            raise Ex3 ('lamb')\n        except Ex1 as exception:\n            autoTester.check ('was')\n            autoTester.check (exception)\n        finally:\n            autoTester.check ('to')\n    except Ex3 as exception:    # We should get here, exception not swallowed\n        autoTester.check ('go')\n        autoTester.check (exception)\n        \n    try:\n        raise __new__ (Table ('he', 'followed', 'her'))\n    except Ex1 as exception:\n        autoTester.check ('to')\n        autoTester.check (exception)\n    except Table as exception:  # Pure JavaScript exception, if no Python __class__\n        autoTester.check ('school')\n        autoTester.check (exception)\n    except Ex3 as exception:\n        autoTester.check ('one')\n        autoTester.check (exception)\n    finally:\n        autoTester.check ('day')\n    \n    try:\n        assert 2 * 8 / 4 == 2, 'Assert error 1'\n    except AssertionError as exception:\n        autoTester.check (exception)\n        \n    try:\n        assert 2 * 8 / 4 == 4, 'Assert error 2'\n    except AssertionError as exception:\n        autoTester.check (exception)\n        \n    try:\n        assert 2 * 8 / 4 == 2\n    except AssertionError as exception:\n        autoTester.check (exception)\n        \n    try:\n        assert 2 * 8 / 4 == 4\n    except AssertionError as exception:\n        autoTester.check (exception)\n        \n    autoTester.check (888)\n    \n    try:\n        autoTester.check ('hello world 1')\n    except:\n        autoTester.check ('error 1')\n    else:\n        autoTester.check ('no error 1')\n        \n    i = 1 + 2\n    try:\n        autoTester.check ('hello world 2')\n        if i == 3:  # Prevent unreachable code warning\n            raise Exception ()\n    except:\n        autoTester.check ('error 2')\n    else:\n        autoTester.check ('no error 2')\n        \n    for raiseIt in (False, True):\n        try:\n            try:\n                if raiseIt:\n                    raise Exception ()\n                autoTester.check ('no error 3')\n            finally:\n                autoTester.check ('anyhow 3')\n        except:\n            autoTester.check ('error 3')\n            "
	],
	"mappings
}