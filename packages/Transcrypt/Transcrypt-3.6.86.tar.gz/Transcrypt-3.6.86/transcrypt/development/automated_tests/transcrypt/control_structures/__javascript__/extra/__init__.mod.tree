file: Module 
	body: list 
		element: FunctionDef 
			name: str = run
			args: arguments 
				args: list 
					element: arg 
						arg: str = autoTester
						annotation: NoneType = None
				vararg: NoneType = None
				kwonlyargs: list 
				kw_defaults: list 
				kwarg: NoneType = None
				defaults: list 
			body: list 
				element: For 
					target: Name 
						id: str = index
						ctx: Store 
					iter: Call 
						func: Name 
							id: str = range
							ctx: Load 
						args: list 
							element: Num 
								n: int = 10
						keywords: list 
					body: list 
						element: Expr 
							value: Call 
								func: Attribute 
									value: Name 
										id: str = autoTester
										ctx: Load 
									attr: str = check
									ctx: Load 
								args: list 
									element: Name 
										id: str = index
										ctx: Load 
								keywords: list 
					orelse: list 
				element: For 
					target: Name 
						id: str = index
						ctx: Store 
					iter: Call 
						func: Name 
							id: str = range
							ctx: Load 
						args: list 
							element: Num 
								n: int = 8
							element: Num 
								n: int = 16
						keywords: list 
					body: list 
						element: Expr 
							value: Call 
								func: Attribute 
									value: Name 
										id: str = autoTester
										ctx: Load 
									attr: str = check
									ctx: Load 
								args: list 
									element: Name 
										id: str = index
										ctx: Load 
								keywords: list 
					orelse: list 
				element: For 
					target: Name 
						id: str = index
						ctx: Store 
					iter: Call 
						func: Name 
							id: str = range
							ctx: Load 
						args: list 
							element: Num 
								n: int = 8
							element: Num 
								n: int = 16
							element: Num 
								n: int = 2
						keywords: list 
					body: list 
						element: Expr 
							value: Call 
								func: Attribute 
									value: Name 
										id: str = autoTester
										ctx: Load 
									attr: str = check
									ctx: Load 
								args: list 
									element: Name 
										id: str = index
										ctx: Load 
								keywords: list 
					orelse: list 
				element: For 
					target: Name 
						id: str = index
						ctx: Store 
					iter: Call 
						func: Name 
							id: str = range
							ctx: Load 
						args: list 
							element: Num 
								n: int = 10
							element: Num 
								n: int = 0
							element: UnaryOp 
								op: USub 
								operand: Num 
									n: int = 1
						keywords: list 
					body: list 
						element: Expr 
							value: Call 
								func: Attribute 
									value: Name 
										id: str = autoTester
										ctx: Load 
									attr: str = check
									ctx: Load 
								args: list 
									element: Name 
										id: str = index
										ctx: Load 
								keywords: list 
					orelse: list 
				element: For 
					target: Name 
						id: str = index
						ctx: Store 
					iter: Call 
						func: Name 
							id: str = range
							ctx: Load 
						args: list 
							element: Num 
								n: int = 16
							element: Num 
								n: int = 8
							element: UnaryOp 
								op: USub 
								operand: Num 
									n: int = 2
						keywords: list 
					body: list 
						element: Expr 
							value: Call 
								func: Attribute 
									value: Name 
										id: str = autoTester
										ctx: Load 
									attr: str = check
									ctx: Load 
								args: list 
									element: Name 
										id: str = index
										ctx: Load 
								keywords: list 
					orelse: list 
				element: For 
					target: Name 
						id: str = animal
						ctx: Store 
					iter: Tuple 
						elts: list 
							element: Str 
								s: str = cat
							element: Str 
								s: str = dog
							element: Str 
								s: str = turtle
							element: Str 
								s: str = goldfish
						ctx: Load 
					body: list 
						element: Expr 
							value: Call 
								func: Attribute 
									value: Name 
										id: str = autoTester
										ctx: Load 
									attr: str = check
									ctx: Load 
								args: list 
									element: Name 
										id: str = animal
										ctx: Load 
								keywords: list 
					orelse: list 
				element: For 
					target: Tuple 
						elts: list 
							element: Name 
								id: str = index
								ctx: Store 
							element: Name 
								id: str = square
								ctx: Store 
						ctx: Store 
					iter: Call 
						func: Name 
							id: str = enumerate
							ctx: Load 
						args: list 
							element: ListComp 
								elt: BinOp 
									left: Name 
										id: str = x
										ctx: Load 
									op: Mult 
									right: Name 
										id: str = x
										ctx: Load 
								generators: list 
									element: comprehension 
										target: Name 
											id: str = x
											ctx: Store 
										iter: Call 
											func: Name 
												id: str = range
												ctx: Load 
											args: list 
												element: Num 
													n: int = 10
											keywords: list 
										ifs: list 
											element: BinOp 
												left: Name 
													id: str = x
													ctx: Load 
												op: Mod 
												right: Num 
													n: int = 2
										is_async: int = 0
						keywords: list 
					body: list 
						element: For 
							target: Name 
								id: str = y
								ctx: Store 
							iter: Tuple 
								elts: list 
									element: Num 
										n: int = 1
									element: Num 
										n: int = 2
									element: Num 
										n: int = 3
								ctx: Load 
							body: list 
								element: For 
									target: Name 
										id: str = z
										ctx: Store 
									iter: Tuple 
										elts: list 
											element: Num 
												n: int = 10
											element: Num 
												n: int = 20
											element: Num 
												n: int = 30
										ctx: Load 
									body: list 
										element: Expr 
											value: Call 
												func: Attribute 
													value: Name 
														id: str = autoTester
														ctx: Load 
													attr: str = check
													ctx: Load 
												args: list 
													element: BinOp 
														left: Name 
															id: str = square
															ctx: Load 
														op: Add 
														right: Name 
															id: str = y
															ctx: Load 
													element: Name 
														id: str = z
														ctx: Load 
												keywords: list 
									orelse: list 
							orelse: list 
					orelse: list 
				element: Assign 
					targets: list 
						element: Name 
							id: str = vehicles
							ctx: Store 
					value: List 
						elts: list 
							element: Str 
								s: str = bike
							element: Str 
								s: str = train
							element: Str 
								s: str = boat
							element: Str 
								s: str = car
							element: Str 
								s: str = plane
							element: Str 
								s: str = bus
						ctx: Load 
				element: For 
					target: Name 
						id: str = doBreak
						ctx: Store 
					iter: Tuple 
						elts: list 
							element: NameConstant 
								value: bool = False
							element: NameConstant 
								value: bool = True
						ctx: Load 
					body: list 
						element: For 
							target: Name 
								id: str = doContinue
								ctx: Store 
							iter: Tuple 
								elts: list 
									element: NameConstant 
										value: bool = False
									element: NameConstant 
										value: bool = True
								ctx: Load 
							body: list 
								element: For 
									target: Name 
										id: str = index
										ctx: Store 
									iter: Call 
										func: Name 
											id: str = range
											ctx: Load 
										args: list 
											element: Num 
												n: int = 10
										keywords: list 
									body: list 
										element: For 
											target: Name 
												id: str = index2
												ctx: Store 
											iter: Call 
												func: Name 
													id: str = range
													ctx: Load 
												args: list 
													element: Num 
														n: int = 0
													element: Num 
														n: int = 100
													element: Num 
														n: int = 10
												keywords: list 
											body: list 
												element: If 
													test: BoolOp 
														op: And 
														values: list 
															element: Name 
																id: str = doBreak
																ctx: Load 
															element: Compare 
																left: Name 
																	id: str = index2
																	ctx: Load 
																ops: list 
																	element: Eq 
																comparators: list 
																	element: Num 
																		n: int = 50
													body: list 
														element: Expr 
															value: Call 
																func: Attribute 
																	value: Name 
																		id: str = autoTester
																		ctx: Load 
																	attr: str = check
																	ctx: Load 
																args: list 
																	element: Str 
																		s: str = break2
																keywords: list 
														element: Break 
													orelse: list 
												element: If 
													test: BoolOp 
														op: And 
														values: list 
															element: Name 
																id: str = doContinue
																ctx: Load 
															element: Compare 
																left: Name 
																	id: str = index2
																	ctx: Load 
																ops: list 
																	element: Eq 
																comparators: list 
																	element: Num 
																		n: int = 50
													body: list 
														element: Expr 
															value: Call 
																func: Attribute 
																	value: Name 
																		id: str = autoTester
																		ctx: Load 
																	attr: str = check
																	ctx: Load 
																args: list 
																	element: Str 
																		s: str = continue2
																keywords: list 
														element: Continue 
													orelse: list 
											orelse: list 
												element: Expr 
													value: Call 
														func: Attribute 
															value: Name 
																id: str = autoTester
																ctx: Load 
															attr: str = check
															ctx: Load 
														args: list 
															element: Str 
																s: str = noBreak2
														keywords: list 
										element: If 
											test: BoolOp 
												op: And 
												values: list 
													element: Name 
														id: str = doBreak
														ctx: Load 
													element: Compare 
														left: Name 
															id: str = index
															ctx: Load 
														ops: list 
															element: Eq 
														comparators: list 
															element: Num 
																n: int = 5
											body: list 
												element: Expr 
													value: Call 
														func: Attribute 
															value: Name 
																id: str = autoTester
																ctx: Load 
															attr: str = check
															ctx: Load 
														args: list 
															element: Str 
																s: str = break
														keywords: list 
												element: Break 
											orelse: list 
										element: If 
											test: BoolOp 
												op: And 
												values: list 
													element: Name 
														id: str = doContinue
														ctx: Load 
													element: Compare 
														left: Name 
															id: str = index
															ctx: Load 
														ops: list 
															element: Eq 
														comparators: list 
															element: Num 
																n: int = 5
											body: list 
												element: Expr 
													value: Call 
														func: Attribute 
															value: Name 
																id: str = autoTester
																ctx: Load 
															attr: str = check
															ctx: Load 
														args: list 
															element: Str 
																s: str = continue
														keywords: list 
												element: Continue 
											orelse: list 
									orelse: list 
										element: Expr 
											value: Call 
												func: Attribute 
													value: Name 
														id: str = autoTester
														ctx: Load 
													attr: str = check
													ctx: Load 
												args: list 
													element: Str 
														s: str = noBreak
												keywords: list 
								element: Assign 
									targets: list 
										element: Name 
											id: str = index
											ctx: Store 
									value: Num 
										n: int = 0
								element: While 
									test: BoolOp 
										op: And 
										values: list 
											element: Compare 
												left: Name 
													id: str = index
													ctx: Load 
												ops: list 
													element: Lt 
												comparators: list 
													element: Call 
														func: Name 
															id: str = len
															ctx: Load 
														args: list 
															element: Name 
																id: str = vehicles
																ctx: Load 
														keywords: list 
											element: Compare 
												left: Subscript 
													value: Name 
														id: str = vehicles
														ctx: Load 
													slice: Index 
														value: Name 
															id: str = index
															ctx: Load 
													ctx: Load 
												ops: list 
													element: NotEq 
												comparators: list 
													element: Str 
														s: str = bus
									body: list 
										element: Expr 
											value: Call 
												func: Attribute 
													value: Name 
														id: str = autoTester
														ctx: Load 
													attr: str = check
													ctx: Load 
												args: list 
													element: Name 
														id: str = index
														ctx: Load 
													element: Subscript 
														value: Name 
															id: str = vehicles
															ctx: Load 
														slice: Index 
															value: Name 
																id: str = index
																ctx: Load 
														ctx: Load 
												keywords: list 
										element: If 
											test: BoolOp 
												op: And 
												values: list 
													element: Name 
														id: str = doBreak
														ctx: Load 
													element: Compare 
														left: Subscript 
															value: Name 
																id: str = vehicles
																ctx: Load 
															slice: Index 
																value: Name 
																	id: str = index
																	ctx: Load 
															ctx: Load 
														ops: list 
															element: Eq 
														comparators: list 
															element: Str 
																s: str = car
											body: list 
												element: Expr 
													value: Call 
														func: Attribute 
															value: Name 
																id: str = autoTester
																ctx: Load 
															attr: str = check
															ctx: Load 
														args: list 
															element: Str 
																s: str = breakWhile
														keywords: list 
												element: Break 
											orelse: list 
										element: If 
											test: BoolOp 
												op: And 
												values: list 
													element: Name 
														id: str = doContinue
														ctx: Load 
													element: Compare 
														left: Subscript 
															value: Name 
																id: str = vehicles
																ctx: Load 
															slice: Index 
																value: Name 
																	id: str = index
																	ctx: Load 
															ctx: Load 
														ops: list 
															element: Eq 
														comparators: list 
															element: Str 
																s: str = car
											body: list 
												element: Expr 
													value: Call 
														func: Attribute 
															value: Name 
																id: str = autoTester
																ctx: Load 
															attr: str = check
															ctx: Load 
														args: list 
															element: Str 
																s: str = continueWhile
														keywords: list 
												element: AugAssign 
													target: Name 
														id: str = index
														ctx: Store 
													op: Add 
													value: Num 
														n: int = 1
												element: Continue 
											orelse: list 
										element: AugAssign 
											target: Name 
												id: str = index
												ctx: Store 
											op: Add 
											value: Num 
												n: int = 1
									orelse: list 
										element: Expr 
											value: Call 
												func: Attribute 
													value: Name 
														id: str = autoTester
														ctx: Load 
													attr: str = check
													ctx: Load 
												args: list 
													element: Str 
														s: str = noBreakWhile
												keywords: list 
							orelse: list 
						element: For 
							target: Name 
								id: str = vehicle
								ctx: Store 
							iter: Name 
								id: str = vehicles
								ctx: Load 
							body: list 
								element: If 
									test: Compare 
										left: Name 
											id: str = vehicle
											ctx: Load 
										ops: list 
											element: Eq 
										comparators: list 
											element: Str 
												s: str = bike
									body: list 
										element: Expr 
											value: Call 
												func: Attribute 
													value: Name 
														id: str = autoTester
														ctx: Load 
													attr: str = check
													ctx: Load 
												args: list 
													element: Str 
														s: str = netherlands
												keywords: list 
									orelse: list 
										element: If 
											test: Compare 
												left: Name 
													id: str = vehicle
													ctx: Load 
												ops: list 
													element: Eq 
												comparators: list 
													element: Str 
														s: str = car
											body: list 
												element: Expr 
													value: Call 
														func: Attribute 
															value: Name 
																id: str = autoTester
																ctx: Load 
															attr: str = check
															ctx: Load 
														args: list 
															element: Str 
																s: str = america
														keywords: list 
											orelse: list 
												element: If 
													test: Compare 
														left: Name 
															id: str = vehicle
															ctx: Load 
														ops: list 
															element: Eq 
														comparators: list 
															element: Str 
																s: str = boat
													body: list 
														element: Expr 
															value: Call 
																func: Attribute 
																	value: Name 
																		id: str = autoTester
																		ctx: Load 
																	attr: str = check
																	ctx: Load 
																args: list 
																	element: Str 
																		s: str = oceania
																keywords: list 
													orelse: list 
														element: Expr 
															value: Call 
																func: Attribute 
																	value: Name 
																		id: str = autoTester
																		ctx: Load 
																	attr: str = check
																	ctx: Load 
																args: list 
																	element: Str 
																		s: str = anywhere
																keywords: list 
							orelse: list 
					orelse: list 
			decorator_list: list 
			returns: NoneType = None