file: Module 
	body: list 
		element: ImportFrom 
			module: str = random
			names: list 
				element: alias 
					name: str = *
					asname: NoneType = None
			level: int = 0
		element: Assign 
			targets: list 
				element: Name 
					id: str = result
					ctx: Store 
			value: Str 
				s: str = 
		element: FunctionDef 
			name: str = output
			args: arguments 
				args: list 
					element: arg 
						arg: str = any
						annotation: NoneType = None
				vararg: NoneType = None
				kwonlyargs: list 
				kw_defaults: list 
				kwarg: NoneType = None
				defaults: list 
			body: list 
				element: AugAssign 
					target: Name 
						id: str = result
						ctx: Store 
					op: Add 
					value: BinOp 
						left: Name 
							id: str = any
							ctx: Load 
						op: Add 
						right: Str 
							s: str = <br>

			decorator_list: list 
			returns: NoneType = None
		element: For 
			target: Name 
				id: str = fixedSeed
				ctx: Store 
			iter: Tuple 
				elts: list 
					element: NameConstant 
						value: bool = False
					element: NameConstant 
						value: bool = True
				ctx: Load 
			body: list 
				element: If 
					test: Name 
						id: str = fixedSeed
						ctx: Load 
					body: list 
						element: Expr 
							value: Call 
								func: Name 
									id: str = seed
									ctx: Load 
								args: list 
									element: Num 
										n: int = 3
								keywords: list 
					orelse: list 
						element: Expr 
							value: Call 
								func: Name 
									id: str = seed
									ctx: Load 
								args: list 
								keywords: list 
				element: Expr 
					value: Call 
						func: Name 
							id: str = output
							ctx: Load 
						args: list 
							element: Call 
								func: Attribute 
									value: Str 
										s: str = ------ {} ------
									attr: str = format
									ctx: Load 
								args: list 
									element: IfExp 
										test: Name 
											id: str = fixedSeed
											ctx: Load 
										body: Str 
											s: str = fixed seed
										orelse: Str 
											s: str = auto seed
								keywords: list 
						keywords: list 
				element: Expr 
					value: Call 
						func: Name 
							id: str = output
							ctx: Load 
						args: list 
							element: Str 
								s: str = --- randint ---
						keywords: list 
				element: For 
					target: Name 
						id: str = i
						ctx: Store 
					iter: Call 
						func: Name 
							id: str = range
							ctx: Load 
						args: list 
							element: Num 
								n: int = 20
						keywords: list 
					body: list 
						element: Expr 
							value: Call 
								func: Name 
									id: str = output
									ctx: Load 
								args: list 
									element: Call 
										func: Name 
											id: str = randint
											ctx: Load 
										args: list 
											element: Num 
												n: int = 10
											element: Num 
												n: int = 20
										keywords: list 
								keywords: list 
					orelse: list 
				element: Expr 
					value: Call 
						func: Name 
							id: str = output
							ctx: Load 
						args: list 
							element: Str 
								s: str = <br>
--- choice ---
						keywords: list 
				element: For 
					target: Name 
						id: str = i
						ctx: Store 
					iter: Call 
						func: Name 
							id: str = range
							ctx: Load 
						args: list 
							element: Num 
								n: int = 20
						keywords: list 
					body: list 
						element: Expr 
							value: Call 
								func: Name 
									id: str = output
									ctx: Load 
								args: list 
									element: Call 
										func: Name 
											id: str = choice
											ctx: Load 
										args: list 
											element: List 
												elts: list 
													element: Num 
														n: int = 1
													element: Num 
														n: int = 2
													element: Num 
														n: int = 3
													element: Num 
														n: int = 4
													element: Num 
														n: int = 5
												ctx: Load 
										keywords: list 
								keywords: list 
					orelse: list 
				element: Expr 
					value: Call 
						func: Name 
							id: str = output
							ctx: Load 
						args: list 
							element: Str 
								s: str = <br>
--- random ---
						keywords: list 
				element: For 
					target: Name 
						id: str = i
						ctx: Store 
					iter: Call 
						func: Name 
							id: str = range
							ctx: Load 
						args: list 
							element: Num 
								n: int = 20
						keywords: list 
					body: list 
						element: Expr 
							value: Call 
								func: Name 
									id: str = output
									ctx: Load 
								args: list 
									element: Call 
										func: Name 
											id: str = random
											ctx: Load 
										args: list 
										keywords: list 
								keywords: list 
					orelse: list 
				element: Expr 
					value: Call 
						func: Name 
							id: str = output
							ctx: Load 
						args: list 
							element: Str 
								s: str = <br>
--- shuffle ---
						keywords: list 
				element: Assign 
					targets: list 
						element: Name 
							id: str = aList
							ctx: Store 
					value: List 
						elts: list 
							element: Num 
								n: int = 0
							element: Num 
								n: int = 1
							element: Num 
								n: int = 2
							element: Num 
								n: int = 3
							element: Num 
								n: int = 4
							element: Num 
								n: int = 5
							element: Num 
								n: int = 6
						ctx: Load 
				element: Expr 
					value: Call 
						func: Name 
							id: str = output
							ctx: Load 
						args: list 
							element: Name 
								id: str = aList
								ctx: Load 
						keywords: list 
				element: For 
					target: Name 
						id: str = i
						ctx: Store 
					iter: Call 
						func: Name 
							id: str = range
							ctx: Load 
						args: list 
							element: Num 
								n: int = 7
						keywords: list 
					body: list 
						element: Expr 
							value: Call 
								func: Name 
									id: str = shuffle
									ctx: Load 
								args: list 
									element: Name 
										id: str = aList
										ctx: Load 
								keywords: list 
						element: Expr 
							value: Call 
								func: Name 
									id: str = output
									ctx: Load 
								args: list 
									element: Name 
										id: str = aList
										ctx: Load 
								keywords: list 
					orelse: list 
				element: Expr 
					value: Call 
						func: Name 
							id: str = output
							ctx: Load 
						args: list 
							element: Str 
								s: str = <br>

						keywords: list 
			orelse: list 
		element: Assign 
			targets: list 
				element: Attribute 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = document
								ctx: Load 
							attr: str = getElementById
							ctx: Load 
						args: list 
							element: Str 
								s: str = output
						keywords: list 
					attr: str = innerHTML
					ctx: Store 
			value: Name 
				id: str = result
				ctx: Load 