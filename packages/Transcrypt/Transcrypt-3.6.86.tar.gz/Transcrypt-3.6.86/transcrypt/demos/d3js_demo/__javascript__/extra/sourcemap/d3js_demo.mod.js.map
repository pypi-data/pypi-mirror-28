{
	"version": 3,
	"file": "D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/demos/d3js_demo/__javascript__/d3js_demo.mod.js",
	"sources": [
		"D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/demos/d3js_demo/d3js_demo.py"
	],
	"sourcesContent": [
		"class Spawn:\n    def __init__ (self, width, height):\n        self.width, self.height, self.spacing = self.fill = width, height, 100, d3.scale.category20 ()\n\n        self.svg = d3.select ('body'\n        ) .append ('svg'\n        ) .attr ('width', self.width\n        ) .attr ('height', self.height\n        ) .on ('mousemove', self.mousemove\n        ) .on ('mousedown', self.mousedown)\n        \n        self.svg.append ('rect'\n        ) .attr ('width', self.width\n        ) .attr ('height', self.height)\n\n        self.cursor = self.svg.append ('circle'\n        ) .attr ('r', self.spacing\n        ) .attr ('transform', 'translate ({}, {})' .format (self.width / 2, self.height / 2)\n        ) .attr ('class', 'cursor')\n\n        self.force = d3.layout.force (\n        ) .size ([self.width, self.height]\n        ) .nodes ([{}]\n        ) .linkDistance (self.spacing\n        ) .charge (-1000\n        ) .on ('tick', self.tick)       \n\n        self.nodes, self.links, self.node, self.link = self.force.nodes (), self.force.links (), self.svg.selectAll ('.node'), self.svg.selectAll ('.link')\n        \n        self.restart ()\n        \n    def mousemove (self):\n        self.cursor.attr ('transform', 'translate (' + d3.mouse (self.svg.node ()) + ')')\n\n    def mousedown (self):\n        def pushLink (target):\n            x, y = target.x - node.x, target.y - node.y\n            if Math.sqrt (x * x + y * y) < self.spacing:\n                spawn.links.push ({'source': node, 'target': target})\n                \n        point = d3.mouse (self.svg.node ())\n        node = {'x': point [0], 'y': point [1]}\n        self.nodes.push (node)\n        self.nodes.forEach (pushLink)\n        self.restart ()     \n            \n    def tick (self):\n        self.link.attr ('x1', lambda d: d.source.x\n        ) .attr ('y1', lambda d: d.source.y\n        ) .attr ('x2', lambda d: d.target.x\n        ) .attr ('y2', lambda d: d.target.y)\n            \n        self.node.attr ('cx', lambda d: d.x\n        ) .attr ('cy', lambda d: d.y)\n\n    def restart (self):\n        self.link = self.link.data (self.links)\n        \n        self.link.enter (\n        ) .insert ('line', '.node'\n        ) .attr('class', 'link')\n\n        self.node = self.node.data (self.nodes)\n            \n        self.node.enter (\n        ) .insert ('circle', '.cursor'\n        ) .attr ('class', 'node'\n        ) .attr ('r', 7\n        ) .call (self.force.drag)\n\n        self.force.start ()\n\nspawn = Spawn (window.innerWidth, window.innerHeight)\n"
	],
	"mappings": "AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAOA;AAMA;AAGA;AAOA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAEA;AAIA;AAEA;AAMA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA"
}