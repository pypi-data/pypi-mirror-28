{
	"version": 3,
	"file": "D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/demos/plotly_demo/__javascript__/plotly_demo.mod.js",
	"sources": [
		"D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/demos/plotly_demo/plotly_demo.py"
	],
	"sourcesContent": [
		"__pragma__ ('jskeys')   # For convenience, allow JS style unquoted string literals as dictionary keys\n\nimport random\nimport math\nimport itertools\n\nxValues = [2 * math.pi * step / 200 for step in range (201)]\nyValuesList = [\n    [math.sin (xValue) + 0.5 * math.sin (xValue * 3 + 0.25 * math.sin (xValue * 5)) for xValue in xValues],\n    [1 if xValue <= math.pi else -1 for xValue in xValues]\n]\nkind = 'linear'\nPlotly.plot (\n    kind,\n    [\n        {\n            x: xValues,\n            y: yValues\n        }\n        for yValues in yValuesList\n    ],\n    {\n        title: kind,\n        xaxis: {title: 'U (t) [V]'},\n        yaxis: {title: 't [s]'}\n    }\n)       \n\ntry:\n    xValues = list (range (10))\n    yValues = [math.exp (x**2) for x in xValues] \n    kind = 'logarithmic'\n    Plotly.plot (\n        kind,\n        [\n            {\n                x: xValues,\n                y: yValues\n            }\n        ],\n        {\n            title: kind,\n            xaxis: {title: 'x'},\n            yaxis: {type: 'log', tickformat: '2e', title: 'exp (x**2)'}\n        }\n    )\nexcept: # Microsoft Edge bug in exp function\n    pass\n    \ntangentialValues = list (range (-180, 180))\nradialValuesList = [\n    [abs (t) for t in tangentialValues],\n    [180 - abs (t) for t in tangentialValues],\n    [abs (2 * t) for t in tangentialValues]\n]\nkind = 'polar'\nPlotly.plot (\n    kind,\n    [\n        {\n            t: tangentialValues,\n            r: radialValues,\n            name: 'Cardioid {}'.format (i),\n        }\n        for i, radialValues in enumerate (radialValuesList)\n    ],\n    {\n        title: kind\n    }\n)\n\ndenseGrid = [8 * math.pi * step / 200 for step in range (-100, 101)]\nsparseGrid = [8 * math.pi * step / 200 for step in range (-100, 101, 10)]\n\ndef getZValues (xGrid, yGrid):\n    return [\n        [math.sin (r) / r for  r in [math.sqrt (x * x + y * y) for x in xGrid]] # One row\n        for y in yGrid                                                          # For all rows\n    ]\n\nkind = 'wireframe'\n\n__pragma__ ('ifdef', '__esv6__')\n\ndocument.getElementById (kind) .innerHTML = 'Plotly {} not yet functional for JS6'.format (kind)\n\n__pragma__ ('else')\n\ntype = 'scatter3d'\nPlotly.plot (\n    kind,\n    itertools.chain (\n        [\n            {\n                x: denseGrid,\n                y: [sparseGrid [i] for value in denseGrid],\n                z: getZValues (denseGrid, sparseGrid) [i],\n                type: type,\n                mode: 'lines',\n                line: {color:'rgb(0,0,255)'},\n                zmin: -0.2,\n                zmax: 1,\n                showscale: not i,\n            }\n            for i in range (20)\n        ],\n        [\n            {\n                x: [sparseGrid [i] for value in denseGrid],\n                y: denseGrid,\n                z: zip (*getZValues (sparseGrid, denseGrid)) [i],   # Poor man's transpose to avoid dependency of demo on Numscrypt\n                type: type,\n                mode: 'lines',\n                line: {color:'rgb(0,0,255)'},\n                zmin: -0.2,\n                zmax: 1,\n                showscale: not i,\n            } for i in range (20)\n        ]\n    ),\n    {\n        title: kind,\n        showlegend: False\n    }\n)\n\n__pragma__ ('endif')\n\nkind = 'ribbon'\nPlotly.plot (\n    kind,\n    [\n        {\n            x: denseGrid,\n            y: list (range (i * 20, (i + 0.7) * 20)),\n            z: getZValues (denseGrid, denseGrid) [i * 20 : (i + 0.7) * 20], # Take the right 'band' out of the data\n            type: 'surface',\n            zmin: -0.2,\n            zmax: 1,\n            showscale: not i,\n        }\n        for i in range (10)\n    ],\n    {\n        title: kind\n    }\n)\n\nkind = 'surface'\nPlotly.plot (\n    kind,\n    [\n        {\n            x: denseGrid,\n            y: denseGrid,\n            z: getZValues (denseGrid, denseGrid),\n            type: kind,\n            zmin: -0.2,\n            zmax: 1\n        }\n    ],\n    {\n        title: kind\n    }\n)\n\nlabels = ['much', 'more', 'most']\nkind = 'bar'\nPlotly.plot (\n    kind,\n    [\n        {\n            name: 'rare',\n            x: labels,\n            y: [1, 2, 4],\n            type: kind\n        },\n        {\n            name: 'common',\n            x: labels,\n            y: [8, 16, 32],\n            type: kind\n        }\n    ],\n    {\n        title: kind,\n        barmode: 'group'\n    }\n)\n\nkind = 'pie'\nPlotly.plot (\n    kind,\n    [\n        {\n            values: [1, 2, 3, 4, 5, 6],\n            labels: ['least', 'less', 'little', 'much', 'more', 'most'],\n            type: kind\n        }\n    ],\n    {\n        title: kind\n    }\n)\n\nkind = 'scatter3d'\ndef getRandoms (aMax):\n    return [random.randint (0, aMax) for i in range (20)]\nPlotly.plot (\n    kind,\n    [\n        {\n            x: getRandoms (aMax),\n            y: getRandoms (aMax),\n            z: getRandoms (aMax),\n            mode: 'markers',\n            marker: {\n                color: 'rgb({}, 127, {})'.format (127 - aMax * 12, aMax * 12),\n                size: 12,\n                symbol: 'circle',\n                line: {\n                    color: 'rgb({}, 255, {})'.format (255 - aMax * 25, aMax * 25),\n                    width: 1\n                }\n            },\n            type: kind\n        }\n        for aMax in (2, 5, 10)\n    ],\n    {\n        title: kind\n    }\n)\n"
	],
	"mappings": "AAAA;AA6NA;AAAA;AAAA;AA7NA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAGA;AAIA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAeA;AAAA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAQA;AAFA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAIA;AA4CA;AACA;AAAA;AAGA;AAGA;AAAA;AAAA;AAAA;AAaA;AAOA;AAWA;AACA;AACA;AAsBA;AACA;AAcA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAGA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA"
}