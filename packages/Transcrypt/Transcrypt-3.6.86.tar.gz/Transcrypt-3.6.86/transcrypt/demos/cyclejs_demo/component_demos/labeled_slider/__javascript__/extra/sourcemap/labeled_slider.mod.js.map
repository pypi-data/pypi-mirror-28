{
	"version": 3,
	"file": "D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/demos/cyclejs_demo/component_demos/labeled_slider/__javascript__/labeled_slider.mod.js",
	"sources": [
		"D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/demos/cyclejs_demo/component_demos/labeled_slider/labeled_slider.py"
	],
	"sourcesContent": [
		"# This is the second 'http' example, demoing the interplay of 'drivers'\nfrom snabbdom import makeDOMDriver, span, input, div\nd = dict\n\ndef log(f):\n    '''\n    debug tool, you can insert .map(log) anywhere\n    I used it to compare first buggy version with the js version, which I\n    configured to the \"jsapp\" DOM element.\n    Both worked concurrently.\n    '''\n    console.log(f)\n    return f\n\ndef LabeledSlider(sources):\n    'A cycle js component'\n    dom_source = sources.DOM\n    propsS = sources.props\n\n    new_valueS = dom_source \\\n            .select('.slider') \\\n            .events('input') \\\n            .map(lambda ev: ev.target.value)\n\n    stateS = propsS \\\n            .map(lambda props: new_valueS \\\n                .map(lambda val: {\n                    'label': props.label,\n                    'unit' : props.unit,\n                    'min'  : props.min,\n                    'max'  : props.max,\n                    'value': val}) \\\n                .startWith(props)\n                ) \\\n            .flatten() \\\n            .remember() # https://github.com/staltz/xstream/wiki/Migrating-from-RxJS\n                        # all streams are hot, the start with would be forgotten w/o this:\n\n    vdomS = stateS \\\n            .map(lambda state: \\\n                div('.labeled-slider', [\n                    span('.label',\n                        state.label + ' ' + state.value + state.unit),\n                    input('.slider', {'attrs': {\n                        'type': 'range', 'min': state.min,\n                        'max': state.max, 'value': state.value}}),\n                    ]))\n    sinks = d(DOM=vdomS, value=stateS.map(lambda state: state.value))\n    return sinks\n\n\ndef main(sources):\n    xs = xstream['default']\n    propsS = xs.of( d(label='Radius', unit='', min=20, value=50, max=80) )\n    labeled_slider  = LabeledSlider({'DOM': sources.DOM, 'props': propsS})\n    child_vdomS     = labeled_slider.DOM\n    child_valueS    = labeled_slider.value\n\n    def render(v):\n        value, child_vdom = v\n        return div([\n                child_vdom,\n                div({'style': {\n                    'backgroundColor': 'green',\n                    'width': str(value) + 'px',\n                    'height': str(value) + 'px',\n                    'borderRadius': str(value * 0.5) + 'px'\n                    }})])\n\n\n    vdomS = xs.combine(child_valueS, child_vdomS).map(log).map(render)\n    return {'DOM': vdomS}\n\n\n\nCycle.run(main, {\n  'DOM': makeDOMDriver('#app')\n});\n"
	],
	"mappings": "AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAOA;AACA;AAAA;AAEA;AAEA;AACA;AAEA;AAAA;AAAA;AAKA;AACA;AAAA;AAAA;AAAA;AAaA;AAKA;AAAA;AAIA;AAAA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAOA;AAAA;AAIA;AACA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA"
}