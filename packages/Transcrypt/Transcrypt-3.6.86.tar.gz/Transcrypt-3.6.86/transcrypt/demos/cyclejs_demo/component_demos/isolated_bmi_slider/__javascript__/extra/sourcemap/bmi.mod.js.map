{
	"version": 3,
	"file": "D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/demos/cyclejs_demo/component_demos/isolated_bmi_slider/__javascript__/bmi.mod.js",
	"sources": [
		"D:/activ_tosh/geatec/transcrypt/qquick/Transcrypt/transcrypt/demos/cyclejs_demo/component_demos/isolated_bmi_slider/bmi.py"
	],
	"sourcesContent": [
		"# The BMI example with isolation\n\nfrom components.labeled_slider import ILabeledSlider\nd, dom = dict, CycleDOM\nisolate = CycleIsolate['default']\n\ndef main(sources):\n    xs = xstream['default']\n    weight_propsS = xs.of(\n            d(label='Weight', unit='kg', min=40, value=70, max=150) )\n    height_propsS = xs.of(\n            d(label='Height', unit='cm', min=140, value=170, max=210) )\n\n    # isolation as suggested by Andre' done in the component lib:\n    def ils(propsS):\n        return ILabeledSlider({'DOM': sources.DOM, 'props': propsS})\n\n    weight_slider  =  ils(weight_propsS)\n    height_slider  =  ils(height_propsS)\n\n    weight_vdomS   =  weight_slider.DOM\n    height_vdomS   =  height_slider.DOM\n\n    weight_valueS  =  weight_slider.value\n    height_valueS  =  height_slider.value\n\n    def bmi(wh):\n        return round(wh[0] / (wh[1] * 0.01)**2, 2)\n\n    bmiS = xs.combine(weight_valueS, height_valueS).map(bmi)\n\n    def render(v):\n        bmi, weight_vdom, height_vdom = v\n        return dom.div([weight_vdom, height_vdom, dom.h2('BMI is ' + bmi)])\n\n    vdomS = xs.combine(bmiS, weight_vdomS, height_vdomS).map(render)\n\n    return {'DOM': vdomS}\n\n\n\nCycle.run(main, {'DOM': dom.makeDOMDriver('#app')})\n"
	],
	"mappings": "AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AAEA;AAGA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAEA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA"
}