file: Module 
	body: list 
		element: ImportFrom 
			module: str = riot_tag
			names: list 
				element: alias 
					name: str = RiotTag
					asname: NoneType = None
			level: int = 0
		element: ClassDef 
			name: str = P
			bases: list 
				element: Name 
					id: str = RiotTag
					ctx: Load 
			keywords: list 
			body: list 
				element: Assign 
					targets: list 
						element: Name 
							id: str = debug
							ctx: Store 
					value: Num 
						n: int = 1
				element: Assign 
					targets: list 
						element: Name 
							id: str = lv
							ctx: Store 
					value: List 
						elts: list 
							element: Dict 
								keys: list 
									element: Str 
										s: str = name
								values: list 
									element: Str 
										s: str = n0
						ctx: Load 
				element: Assign 
					targets: list 
						element: Name 
							id: str = counter
							ctx: Store 
					value: Num 
						n: int = 1
				element: Assign 
					targets: list 
						element: Name 
							id: str = template
							ctx: Store 
					value: Str 
						s: str =  <div><h1>Riot Transcrypt Tag Instance {label}</h1>
                         <div>INNER</div></div> 
				element: FunctionDef 
					name: str = count_up
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Assign 
							targets: list 
								element: Attribute 
									value: Name 
										id: str = self
										ctx: Load 
									attr: str = counter
									ctx: Store 
							value: BinOp 
								left: Attribute 
									value: Name 
										id: str = self
										ctx: Load 
									attr: str = counter
									ctx: Load 
								op: Add 
								right: Num 
									n: int = 1
						element: Expr 
							value: Call 
								func: Attribute 
									value: Name 
										id: str = self
										ctx: Load 
									attr: str = pp
									ctx: Load 
								args: list 
									element: Str 
										s: str = counter:
									element: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = counter
										ctx: Load 
									element: Str 
										s: str = len lv:
									element: Call 
										func: Name 
											id: str = len
											ctx: Load 
										args: list 
											element: Attribute 
												value: Name 
													id: str = self
													ctx: Load 
												attr: str = lv
												ctx: Load 
										keywords: list 
									element: Str 
										s: str = adding one lv
								keywords: list 
						element: Expr 
							value: Call 
								func: Attribute 
									value: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = lv
										ctx: Load 
									attr: str = append
									ctx: Load 
								args: list 
									element: Dict 
										keys: list 
											element: Str 
												s: str = name
										values: list 
											element: BinOp 
												left: Str 
													s: str = n
												op: Add 
												right: Attribute 
													value: Name 
														id: str = self
														ctx: Load 
													attr: str = counter
													ctx: Load 
								keywords: list 
						element: Return 
							value: Attribute 
								value: Name 
									id: str = self
									ctx: Load 
								attr: str = counter
								ctx: Load 
					decorator_list: list 
					returns: NoneType = None
			decorator_list: list 
		element: ClassDef 
			name: str = Sample2
			bases: list 
				element: Name 
					id: str = P
					ctx: Load 
			keywords: list 
			body: list 
				element: Assign 
					targets: list 
						element: Name 
							id: str = template
							ctx: Store 
					value: Call 
						func: Attribute 
							value: Attribute 
								value: Name 
									id: str = P
									ctx: Load 
								attr: str = template
								ctx: Load 
							attr: str = replace
							ctx: Load 
						args: list 
							element: Str 
								s: str = INNER
							element: Str 
								s: str = 
    <div>
    <h5 each="{lv}">name: {name} - counter: {count_up()}</h5>
    </div>
    
						keywords: list 
				element: Assign 
					targets: list 
						element: Name 
							id: str = style
							ctx: Store 
					value: Str 
						s: str = sample2 h5 {color: green}
				element: FunctionDef 
					name: str = __init__
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
							element: arg 
								arg: str = tag
								annotation: NoneType = None
							element: arg 
								arg: str = opts
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Assign 
							targets: list 
								element: Attribute 
									value: Name 
										id: str = self
										ctx: Load 
									attr: str = label
									ctx: Store 
							value: Call 
								func: Attribute 
									value: Attribute 
										value: Name 
											id: str = opts
											ctx: Load 
										attr: str = label
										ctx: Load 
									attr: str = capitalize
									ctx: Load 
								args: list 
								keywords: list 
						element: Expr 
							value: Call 
								func: Attribute 
									value: Name 
										id: str = RiotTag
										ctx: Load 
									attr: str = __init__
									ctx: Load 
								args: list 
									element: Name 
										id: str = self
										ctx: Load 
									element: Name 
										id: str = tag
										ctx: Load 
									element: Name 
										id: str = opts
										ctx: Load 
								keywords: list 
						element: Expr 
							value: Call 
								func: Attribute 
									value: Name 
										id: str = self
										ctx: Load 
									attr: str = pp
									ctx: Load 
								args: list 
									element: Str 
										s: str = tag init
									element: Str 
										s: str = adding 2 lv
								keywords: list 
						element: Expr 
							value: Call 
								func: Attribute 
									value: Attribute 
										value: Name 
											id: str = self
											ctx: Load 
										attr: str = lv
										ctx: Load 
									attr: str = extend
									ctx: Load 
								args: list 
									element: List 
										elts: list 
											element: Dict 
												keys: list 
													element: Str 
														s: str = name
												values: list 
													element: Str 
														s: str = n1
											element: Dict 
												keys: list 
													element: Str 
														s: str = name
												values: list 
													element: Str 
														s: str = n2
										ctx: Load 
								keywords: list 
					decorator_list: list 
					returns: NoneType = None
				element: FunctionDef 
					name: str = update
					args: arguments 
						args: list 
							element: arg 
								arg: str = self
								annotation: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Expr 
							value: Call 
								func: Attribute 
									value: Name 
										id: str = self
										ctx: Load 
									attr: str = pp
									ctx: Load 
								args: list 
									element: Str 
										s: str = update handler in the custom tag, calling super
								keywords: list 
						element: Expr 
							value: Call 
								func: Attribute 
									value: Name 
										id: str = RiotTag
										ctx: Load 
									attr: str = update
									ctx: Load 
								args: list 
									element: Name 
										id: str = self
										ctx: Load 
								keywords: list 
					decorator_list: list 
					returns: NoneType = None
			decorator_list: list 