# -*- snakemake -*-
import os
from pytest_ngsfixtures import ROOT_DIR

wildcard_constraints:
    size = "(tiny|medium|yuge)"

SAMPLES = ["CHS.HG00512", "CHS.HG00513", "PUR.HG00731", "PUR.HG00733",
           "YRI.NA19238", "YRI.NA19239"]

MEDIUMBAMFILES = expand("{sample}.medium.sort.bam", sample=SAMPLES)
YUGEBAMFILES = expand("{sample}.yuge.sort.bam", sample=SAMPLES)
TINYBAMFILES = expand("{sample}.tiny.bam", sample=SAMPLES[2:4])
TINY_SORT_BAMFILES = expand("{sample}.tiny.sort.bam", sample=SAMPLES[2:4])
SAVEFILES = TINYBAMFILES + TINY_SORT_BAMFILES + [x + ".bai" for x in TINY_SORT_BAMFILES] + ["medium.bam", "medium.bam.bai"]

rule all:
    input: ["yuge.bam", "medium.bam", "medium.bam.bai",\
            "PUR.HG00731.tiny.bam", "PUR.HG00731.tiny.sort.bam",\
            "PUR.HG00733.tiny.bam", "PUR.HG00733.tiny.sort.bam"]

##############################
# Prerequisite temporary files
#
# - large bams for generating result files for parsing
##############################
rule link_ref:
    input: os.path.join(ROOT_DIR, config["basedir"], "ref" , config["input"]["ref"])
    output: temporary("scaffoldsN.fa")
    shell: "ln -s {input} {output}"

rule link_ref_index:
    input: os.path.join(ROOT_DIR, config["basedir"], "ref" , config["input"]["ref"] + ".fai")
    output: temporary("scaffoldsN.fa.fai")
    shell: "ln -s {input} {output}"

rule link_ref_dict:
    input: os.path.join(ROOT_DIR, config["basedir"], "ref" , config["input"]["dict"])
    output: temporary("scaffoldsN.dict")
    shell: "ln -s {input} {output}"

rule bwa_index:
    input: "{prefix}.fa"
    output: "{prefix}.fa.sa"
    shell: "bwa index {input}"

rule picard_add_rg:
    input: "{prefix}.{size}.mem.bam"
    output: "{prefix}.{size}.bam"
    shell: "picard AddOrReplaceReadGroups INPUT={input} OUTPUT={output} RGID={wildcards.prefix} RGSM={wildcards.prefix} RGPL=Illumina RGPU=pu RGLB=lib"

rule picard_index:
    input: "{prefix}.bam"
    output: "{prefix}.bai"
    shell: "picard BuildBamIndex I={input} O={output}"
           
rule samtools_index:
    input: "{prefix}.bam"
    output: "{prefix}.bam.bai"
    shell: "samtools index {input}"

rule samtools_sort:
    input: "{prefix}.bam"
    output: "{prefix}.sort.bam"
    shell: "samtools sort {input} -o {output}"

rule samtools_sortn:
    input: "{prefix}.bam"
    output: "{prefix}.sortn.bam"
    shell: "samtools sort -n {input} -o {output}"

rule yuge_test_bam:
    input: "yuge.bam.fofn"
    output: "yuge.bam"
    shell: "samtools merge -f {output} -b {input}"

rule yuge_bam_fofn:
    input: YUGEBAMFILES
    output: "yuge.bam.fofn"
    shell: "ls -1 {input} > {output}"

rule medium_bam_fofn:
    input: MEDIUMBAMFILES
    output: "medium.bam.fofn"
    shell: "ls -1 {input} > {output}"

rule test_bam:
    input: "{size}.bam.fofn"
    output: "{size}.bam"
    shell: "samtools merge -f {output} -b {input}"

SAVEFILES.append("tiny.bam.fofn")           
rule tiny_bamfiles:
    input: TINYBAMFILES
    output: "tiny.bam.fofn"
    shell: "ls -1 {input} > {output}"

SAVEFILES.append("tiny.sort.bam.fofn")           
rule tiny_sort_bamfiles:
    input: TINY_SORT_BAMFILES
    output: "tiny.sort.bam.fofn"
    shell: "ls -1 {input} > {output}"
           

##############################
# File types
##############################
rule tiny_bam_fofn:
    input: TINY_SORT_BAMFILES

##############################
# Output files to save
##############################
rule save:
    input: SAVEFILES


##############################
# Application rules
##############################


####################
# vcf files
####################
rule gatk_haplotype_caller:
    input: bam = "{prefix}.bam", bai="{prefix}.bam.bai", ref = "scaffoldsN.fa",
           refidx = "scaffoldsN.fa.fai", dict = "scaffoldsN.dict"
    output: vcf = "{prefix}.haplotype_caller.vcf"
    shell: "gatk -T HaplotypeCaller -I {input.bam} -R {input.ref} -o {output.vcf}"

rule freebayes:
    input: bam = "{prefix}.bam", ref = "scaffoldsN.fa"
    output: "{prefix}.freebayes.vcf"
    shell: "freebayes -f {input.ref} {input.bam} > {output}"

rule htslib_bgzip:
    input: vcf = "{prefix}.vcf"
    output: bgzip = "{prefix}.vcf.gz"
    shell: "bgzip -i -@ 1 {input.vcf}"
    
rule samtools_tabix:
    input: "{prefix}.vcf.gz"
    output: "{prefix}.vcf.gz.tbi"
    shell: "tabix -p vcf {input}"
           
##############################
# clean etc
##############################
rule clean:
    shell:
        "rm -f yuge*;"
        "rm -f *.yuge.*bam; "
        "rm -f *.yuge.bai; "
        "rm -f *.bam.log; "
        "rm -f ref*; "
        "rm -f scaffold*; "
        "rm -f *.medium*;"
        "rm -rf .snakemake;"
        "rm -f *.mem.bam;"
