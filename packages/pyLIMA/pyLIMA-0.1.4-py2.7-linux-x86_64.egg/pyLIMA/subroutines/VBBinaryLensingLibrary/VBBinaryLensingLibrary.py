# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_VBBinaryLensingLibrary')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_VBBinaryLensingLibrary')
    _VBBinaryLensingLibrary = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_VBBinaryLensingLibrary', [dirname(__file__)])
        except ImportError:
            import _VBBinaryLensingLibrary
            return _VBBinaryLensingLibrary
        if fp is not None:
            try:
                _mod = imp.load_module('_VBBinaryLensingLibrary', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _VBBinaryLensingLibrary = swig_import_helper()
    del swig_import_helper
else:
    import _VBBinaryLensingLibrary
del _swig_python_version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class doubleArray(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _VBBinaryLensingLibrary.new_doubleArray(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VBBinaryLensingLibrary.delete_doubleArray
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _VBBinaryLensingLibrary.doubleArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _VBBinaryLensingLibrary.doubleArray___setitem__(self, index, value)

    def cast(self):
        return _VBBinaryLensingLibrary.doubleArray_cast(self)
    frompointer = staticmethod(_VBBinaryLensingLibrary.doubleArray_frompointer)
doubleArray_swigregister = _VBBinaryLensingLibrary.doubleArray_swigregister
doubleArray_swigregister(doubleArray)

def doubleArray_frompointer(t):
    return _VBBinaryLensingLibrary.doubleArray_frompointer(t)
doubleArray_frompointer = _VBBinaryLensingLibrary.doubleArray_frompointer

_NP = _VBBinaryLensingLibrary._NP
class VBBinaryLensing(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Tol = _swig_property(_VBBinaryLensingLibrary.VBBinaryLensing_Tol_get, _VBBinaryLensingLibrary.VBBinaryLensing_Tol_set)
    satellite = _swig_property(_VBBinaryLensingLibrary.VBBinaryLensing_satellite_get, _VBBinaryLensingLibrary.VBBinaryLensing_satellite_set)
    parallaxsystem = _swig_property(_VBBinaryLensingLibrary.VBBinaryLensing_parallaxsystem_get, _VBBinaryLensingLibrary.VBBinaryLensing_parallaxsystem_set)
    nsat = _swig_property(_VBBinaryLensingLibrary.VBBinaryLensing_nsat_get, _VBBinaryLensingLibrary.VBBinaryLensing_nsat_set)
    minannuli = _swig_property(_VBBinaryLensingLibrary.VBBinaryLensing_minannuli_get, _VBBinaryLensingLibrary.VBBinaryLensing_minannuli_set)
    nannuli = _swig_property(_VBBinaryLensingLibrary.VBBinaryLensing_nannuli_get, _VBBinaryLensingLibrary.VBBinaryLensing_nannuli_set)
    y_1 = _swig_property(_VBBinaryLensingLibrary.VBBinaryLensing_y_1_get, _VBBinaryLensingLibrary.VBBinaryLensing_y_1_set)
    y_2 = _swig_property(_VBBinaryLensingLibrary.VBBinaryLensing_y_2_get, _VBBinaryLensingLibrary.VBBinaryLensing_y_2_set)
    av = _swig_property(_VBBinaryLensingLibrary.VBBinaryLensing_av_get, _VBBinaryLensingLibrary.VBBinaryLensing_av_set)

    def PlotCrit(self, arg2, arg3):
        return _VBBinaryLensingLibrary.VBBinaryLensing_PlotCrit(self, arg2, arg3)

    def PrintCau(self, arg2, arg3):
        return _VBBinaryLensingLibrary.VBBinaryLensing_PrintCau(self, arg2, arg3)

    def BinaryMag0(self, *args):
        return _VBBinaryLensingLibrary.VBBinaryLensing_BinaryMag0(self, *args)

    def BinaryMag(self, *args):
        return _VBBinaryLensingLibrary.VBBinaryLensing_BinaryMag(self, *args)

    def BinaryMagDark(self, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
        return _VBBinaryLensingLibrary.VBBinaryLensing_BinaryMagDark(self, arg2, arg3, arg4, arg5, arg6, arg7, arg8)

    def SetObjectCoordinates(self, arg2, arg3):
        return _VBBinaryLensingLibrary.VBBinaryLensing_SetObjectCoordinates(self, arg2, arg3)

    def PSPLCurve(self, arg2, arg3):
        return _VBBinaryLensingLibrary.VBBinaryLensing_PSPLCurve(self, arg2, arg3)

    def PSPLParallaxCurve(self, arg2, arg3):
        return _VBBinaryLensingLibrary.VBBinaryLensing_PSPLParallaxCurve(self, arg2, arg3)

    def ESPLCurve(self, arg2, arg3):
        return _VBBinaryLensingLibrary.VBBinaryLensing_ESPLCurve(self, arg2, arg3)

    def ESPLParallaxCurve(self, arg2, arg3):
        return _VBBinaryLensingLibrary.VBBinaryLensing_ESPLParallaxCurve(self, arg2, arg3)

    def BinaryLightCurve(self, arg2, arg3):
        return _VBBinaryLensingLibrary.VBBinaryLensing_BinaryLightCurve(self, arg2, arg3)

    def BinaryLightCurveW(self, arg2, arg3):
        return _VBBinaryLensingLibrary.VBBinaryLensing_BinaryLightCurveW(self, arg2, arg3)

    def BinaryLightCurveParallax(self, arg2, arg3):
        return _VBBinaryLensingLibrary.VBBinaryLensing_BinaryLightCurveParallax(self, arg2, arg3)

    def BinaryLightCurveOrbital(self, arg2, arg3):
        return _VBBinaryLensingLibrary.VBBinaryLensing_BinaryLightCurveOrbital(self, arg2, arg3)

    def BinSourceMag(self, arg2, arg3):
        return _VBBinaryLensingLibrary.VBBinaryLensing_BinSourceMag(self, arg2, arg3)

    def BinSourceParallaxMag(self, arg2, arg3):
        return _VBBinaryLensingLibrary.VBBinaryLensing_BinSourceParallaxMag(self, arg2, arg3)

    def BinSourceXallarapMag(self, arg2, arg3):
        return _VBBinaryLensingLibrary.VBBinaryLensing_BinSourceXallarapMag(self, arg2, arg3)

    def __init__(self):
        this = _VBBinaryLensingLibrary.new_VBBinaryLensing()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VBBinaryLensingLibrary.delete_VBBinaryLensing
    __del__ = lambda self: None
VBBinaryLensing_swigregister = _VBBinaryLensingLibrary.VBBinaryLensing_swigregister
VBBinaryLensing_swigregister(VBBinaryLensing)

class annulus(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    bin = _swig_property(_VBBinaryLensingLibrary.annulus_bin_get, _VBBinaryLensingLibrary.annulus_bin_set)
    cum = _swig_property(_VBBinaryLensingLibrary.annulus_cum_get, _VBBinaryLensingLibrary.annulus_cum_set)
    Mag = _swig_property(_VBBinaryLensingLibrary.annulus_Mag_get, _VBBinaryLensingLibrary.annulus_Mag_set)
    err = _swig_property(_VBBinaryLensingLibrary.annulus_err_get, _VBBinaryLensingLibrary.annulus_err_set)
    f = _swig_property(_VBBinaryLensingLibrary.annulus_f_get, _VBBinaryLensingLibrary.annulus_f_set)
    nim = _swig_property(_VBBinaryLensingLibrary.annulus_nim_get, _VBBinaryLensingLibrary.annulus_nim_set)
    prev = _swig_property(_VBBinaryLensingLibrary.annulus_prev_get, _VBBinaryLensingLibrary.annulus_prev_set)
    next = _swig_property(_VBBinaryLensingLibrary.annulus_next_get, _VBBinaryLensingLibrary.annulus_next_set)

    def __init__(self):
        this = _VBBinaryLensingLibrary.new_annulus()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VBBinaryLensingLibrary.delete_annulus
    __del__ = lambda self: None
annulus_swigregister = _VBBinaryLensingLibrary.annulus_swigregister
annulus_swigregister(annulus)

class _theta(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    th = _swig_property(_VBBinaryLensingLibrary._theta_th_get, _VBBinaryLensingLibrary._theta_th_set)
    maxerr = _swig_property(_VBBinaryLensingLibrary._theta_maxerr_get, _VBBinaryLensingLibrary._theta_maxerr_set)
    Mag = _swig_property(_VBBinaryLensingLibrary._theta_Mag_get, _VBBinaryLensingLibrary._theta_Mag_set)
    errworst = _swig_property(_VBBinaryLensingLibrary._theta_errworst_get, _VBBinaryLensingLibrary._theta_errworst_set)
    prev = _swig_property(_VBBinaryLensingLibrary._theta_prev_get, _VBBinaryLensingLibrary._theta_prev_set)
    next = _swig_property(_VBBinaryLensingLibrary._theta_next_get, _VBBinaryLensingLibrary._theta_next_set)

    def __init__(self, arg2):
        this = _VBBinaryLensingLibrary.new__theta(arg2)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VBBinaryLensingLibrary.delete__theta
    __del__ = lambda self: None
_theta_swigregister = _VBBinaryLensingLibrary._theta_swigregister
_theta_swigregister(_theta)

class _thetas(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    first = _swig_property(_VBBinaryLensingLibrary._thetas_first_get, _VBBinaryLensingLibrary._thetas_first_set)
    last = _swig_property(_VBBinaryLensingLibrary._thetas_last_get, _VBBinaryLensingLibrary._thetas_last_set)
    length = _swig_property(_VBBinaryLensingLibrary._thetas_length_get, _VBBinaryLensingLibrary._thetas_length_set)

    def __init__(self):
        this = _VBBinaryLensingLibrary.new__thetas()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VBBinaryLensingLibrary.delete__thetas
    __del__ = lambda self: None

    def insert(self, arg2):
        return _VBBinaryLensingLibrary._thetas_insert(self, arg2)
_thetas_swigregister = _VBBinaryLensingLibrary._thetas_swigregister
_thetas_swigregister(_thetas)

class complex(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    re = _swig_property(_VBBinaryLensingLibrary.complex_re_get, _VBBinaryLensingLibrary.complex_re_set)
    im = _swig_property(_VBBinaryLensingLibrary.complex_im_get, _VBBinaryLensingLibrary.complex_im_set)

    def __init__(self, *args):
        this = _VBBinaryLensingLibrary.new_complex(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VBBinaryLensingLibrary.delete_complex
    __del__ = lambda self: None
complex_swigregister = _VBBinaryLensingLibrary.complex_swigregister
complex_swigregister(complex)

class _point(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    x1 = _swig_property(_VBBinaryLensingLibrary._point_x1_get, _VBBinaryLensingLibrary._point_x1_set)
    x2 = _swig_property(_VBBinaryLensingLibrary._point_x2_get, _VBBinaryLensingLibrary._point_x2_set)
    parab = _swig_property(_VBBinaryLensingLibrary._point_parab_get, _VBBinaryLensingLibrary._point_parab_set)
    ds = _swig_property(_VBBinaryLensingLibrary._point_ds_get, _VBBinaryLensingLibrary._point_ds_set)
    dJ = _swig_property(_VBBinaryLensingLibrary._point_dJ_get, _VBBinaryLensingLibrary._point_dJ_set)
    d = _swig_property(_VBBinaryLensingLibrary._point_d_get, _VBBinaryLensingLibrary._point_d_set)
    theta = _swig_property(_VBBinaryLensingLibrary._point_theta_get, _VBBinaryLensingLibrary._point_theta_set)

    def __init__(self, arg2, arg3, arg4):
        this = _VBBinaryLensingLibrary.new__point(arg2, arg3, arg4)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    next = _swig_property(_VBBinaryLensingLibrary._point_next_get, _VBBinaryLensingLibrary._point_next_set)
    prev = _swig_property(_VBBinaryLensingLibrary._point_prev_get, _VBBinaryLensingLibrary._point_prev_set)

    def __sub__(self, arg2):
        return _VBBinaryLensingLibrary._point___sub__(self, arg2)
    __swig_destroy__ = _VBBinaryLensingLibrary.delete__point
    __del__ = lambda self: None
_point_swigregister = _VBBinaryLensingLibrary._point_swigregister
_point_swigregister(_point)

class _curve(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    length = _swig_property(_VBBinaryLensingLibrary._curve_length_get, _VBBinaryLensingLibrary._curve_length_set)
    first = _swig_property(_VBBinaryLensingLibrary._curve_first_get, _VBBinaryLensingLibrary._curve_first_set)
    last = _swig_property(_VBBinaryLensingLibrary._curve_last_get, _VBBinaryLensingLibrary._curve_last_set)
    next = _swig_property(_VBBinaryLensingLibrary._curve_next_get, _VBBinaryLensingLibrary._curve_next_set)
    prev = _swig_property(_VBBinaryLensingLibrary._curve_prev_get, _VBBinaryLensingLibrary._curve_prev_set)
    partneratstart = _swig_property(_VBBinaryLensingLibrary._curve_partneratstart_get, _VBBinaryLensingLibrary._curve_partneratstart_set)
    partneratend = _swig_property(_VBBinaryLensingLibrary._curve_partneratend_get, _VBBinaryLensingLibrary._curve_partneratend_set)
    parabstart = _swig_property(_VBBinaryLensingLibrary._curve_parabstart_get, _VBBinaryLensingLibrary._curve_parabstart_set)

    def __init__(self, *args):
        this = _VBBinaryLensingLibrary.new__curve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VBBinaryLensingLibrary.delete__curve
    __del__ = lambda self: None

    def divide(self, arg2):
        return _VBBinaryLensingLibrary._curve_divide(self, arg2)

    def drop(self, arg2):
        return _VBBinaryLensingLibrary._curve_drop(self, arg2)

    def append(self, *args):
        return _VBBinaryLensingLibrary._curve_append(self, *args)

    def prepend(self, arg2, arg3):
        return _VBBinaryLensingLibrary._curve_prepend(self, arg2, arg3)

    def join(self, arg2):
        return _VBBinaryLensingLibrary._curve_join(self, arg2)

    def joinbefore(self, arg2):
        return _VBBinaryLensingLibrary._curve_joinbefore(self, arg2)

    def reverse(self):
        return _VBBinaryLensingLibrary._curve_reverse(self)

    def closest(self, arg2, arg3):
        return _VBBinaryLensingLibrary._curve_closest(self, arg2, arg3)

    def closest2(self, arg2, arg3):
        return _VBBinaryLensingLibrary._curve_closest2(self, arg2, arg3)

    def complement(self, arg2, arg3, arg4, arg5):
        return _VBBinaryLensingLibrary._curve_complement(self, arg2, arg3, arg4, arg5)
_curve_swigregister = _VBBinaryLensingLibrary._curve_swigregister
_curve_swigregister(_curve)

class _sols(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    length = _swig_property(_VBBinaryLensingLibrary._sols_length_get, _VBBinaryLensingLibrary._sols_length_set)
    first = _swig_property(_VBBinaryLensingLibrary._sols_first_get, _VBBinaryLensingLibrary._sols_first_set)
    last = _swig_property(_VBBinaryLensingLibrary._sols_last_get, _VBBinaryLensingLibrary._sols_last_set)

    def __init__(self):
        this = _VBBinaryLensingLibrary.new__sols()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VBBinaryLensingLibrary.delete__sols
    __del__ = lambda self: None

    def drop(self, arg2):
        return _VBBinaryLensingLibrary._sols_drop(self, arg2)

    def append(self, arg2):
        return _VBBinaryLensingLibrary._sols_append(self, arg2)

    def prepend(self, arg2):
        return _VBBinaryLensingLibrary._sols_prepend(self, arg2)

    def join(self, arg2):
        return _VBBinaryLensingLibrary._sols_join(self, arg2)
_sols_swigregister = _VBBinaryLensingLibrary._sols_swigregister
_sols_swigregister(_sols)

MR = _VBBinaryLensingLibrary.MR
MT = _VBBinaryLensingLibrary.MT
MAXIT = _VBBinaryLensingLibrary.MAXIT
MAXM = _VBBinaryLensingLibrary.MAXM

def rf(x, y, z):
    return _VBBinaryLensingLibrary.rf(x, y, z)
rf = _VBBinaryLensingLibrary.rf

def rd(x, y, z):
    return _VBBinaryLensingLibrary.rd(x, y, z)
rd = _VBBinaryLensingLibrary.rd

def rj(x, y, z, p):
    return _VBBinaryLensingLibrary.rj(x, y, z, p)
rj = _VBBinaryLensingLibrary.rj

def rc(x, y):
    return _VBBinaryLensingLibrary.rc(x, y)
rc = _VBBinaryLensingLibrary.rc

def ellf(phi, ak):
    return _VBBinaryLensingLibrary.ellf(phi, ak)
ellf = _VBBinaryLensingLibrary.ellf

def elle(phi, ak):
    return _VBBinaryLensingLibrary.elle(phi, ak)
elle = _VBBinaryLensingLibrary.elle

def ellpi(phi, en, ak):
    return _VBBinaryLensingLibrary.ellpi(phi, en, ak)
ellpi = _VBBinaryLensingLibrary.ellpi


