{
	"version": 3,
	"file": "D:/activ_tosh/geatec/Numscrypt/numscrypt/development/automated_tests/ndarray/basics/__javascript__/basics.mod.js",
	"sources": [
		"D:/activ_tosh/geatec/Numscrypt/numscrypt/development/automated_tests/ndarray/basics/__init__.py"
	],
	"sourcesContent": [
		"from org.transcrypt.stubs.browser import *\nfrom org.transcrypt.stubs.browser import __main__, __envir__, __pragma__\n\n# Imports for Transcrypt, resolved run time\nif __envir__.executor_name == __envir__.transpiler_name:\n\timport numscrypt as num\n\n# Imports for CPython, resolved compile time\n__pragma__ ('skip')\nimport numpy as num\n__pragma__ ('noskip')\n\ndef run (autoTester):\n\tz = num.zeros ((4, 3), 'int32')\n\tautoTester.check ('Zeros', z.tolist (), '<br>')\n\t\n\to = num.ones ((4, 5))\n\tautoTester.check ('Ones', o.astype ('int32') .tolist ())\n\t\n\ti = num.identity (3, 'int32')\n\tautoTester.check ('Identity', i.tolist (), '<br>')\n\t\n\ta = num.array ([\n\t\t[1, 1, 2, 3],\n\t\t[4, 5, 6, 7],\n\t\t[8, 9, 10, 12]\n\t])\n\t\n\tautoTester.check ('Matrix a', a.tolist (), '<br>')\n\t\n\tautoTester.check ('Transpose of a', a.transpose () .tolist (), '<br>')\n\t\n\tb = num.array ([\n\t\t[2, 2, 4, 6],\n\t\t[8, 10, 12, 14],\n\t\t[16, 18, 20, 24]\n\t])\n\t\n\tbp =  b.transpose ()\n\t\n\tautoTester.check ('Matrix b', b.tolist (), '<br>')\n\tautoTester.check ('Permutation of b', bp.tolist (), '<br>')\n\t\t\n\tc = num.array ([\n\t\t[1, 2, 3, 4],\n\t\t[5, 6, 7, 8],\n\t\t[9, 10, 11, 12],\n\t], 'int32')\n\t\n\tautoTester.check ('Shape c', tuple (c.shape), '<br>')\n\tautoTester.check ('Matrix c', c.tolist (), '<br>')\n\t\n\tct = c.transpose ()\n\tautoTester.check ('Shape ct', tuple (ct.shape), '<br>')\n\tautoTester.check ('Transpose of c', ct .tolist (), '<br>')\n\n\tcs0, cs1 = num.hsplit (c, 2)\n\tautoTester.check ('Matrix cs0', cs0.tolist (), '<br>')\n\tautoTester.check ('Matrix cs1', cs1.tolist (), '<br>')\n\n\tci = num.hstack ((cs1, cs0))\n\tautoTester.check ('Matrix ci', ci.tolist (), '<br>')\n\t\n\tcts0, cts1, cts2 = num.hsplit (ct, 3)\n\tautoTester.check ('Matrix cts0', cts0.tolist (), '<br>')\n\tautoTester.check ('Matrix cts1', cts1.tolist (), '<br>')\n\tautoTester.check ('Matrix cts2', cts2.tolist (), '<br>')\n\n\tcti = num.hstack ((cts2, cts1, cts0))\n\tautoTester.check ('Matrix ci', cti.tolist (), '<br>')\n\t\n\td = num.array ([\n\t\t[13, 14],\n\t\t[15, 16],\n\t\t[17, 18],\n\t\t[19, 20]\n\t], 'int32')\n\t\n\tautoTester.check ('Matrix d', d.tolist (), '<br>')\n\tdt = d.transpose ()\n\tautoTester.check ('Permutation of d', dt.tolist (), '<br>')\n\t\n\tds0, ds1, ds2, ds3 = num.vsplit (d, 4)\n\tautoTester.check ('Matrix ds0', ds0.tolist (), '<br>')\n\tautoTester.check ('Matrix ds1', ds1.tolist (), '<br>')\n\tautoTester.check ('Matrix ds2', ds2.tolist (), '<br>')\n\tautoTester.check ('Matrix ds3', ds3.tolist (), '<br>')\n\n\tdi = num.vstack ((ds3, ds2, ds1, ds0))\n\tautoTester.check ('Matrix di', di.tolist (), '<br>')\n\t\n\tdts0, dts1 = num.vsplit (dt, 2)\n\tautoTester.check ('Matrix dts0', dts0.tolist (), '<br>')\n\tautoTester.check ('Matrix dts1', dts1.tolist (), '<br>')\n\n\tdti = num.vstack ((dts1, dts0))\n\tautoTester.check ('Matrix dti', dti.tolist (), '<br>')\n\t\n\tv0 = num.array (range (10))\t\n\tv1 = num.array ((1, 2, 3, 1, 2, 3, 1, 2, 3, 1))\n\n\t__pragma__ ('opov')\n\t\n\ta [1, 0] = 177\n\tel = b [1, 2]\n\t\n\tbsl0 = b [1, 1 : 3]\n\tbsl1 = b [1 : 2, 1 : 3]\n\tbsl2 = b [1 : 2, 1]\n\tbsl3 = b [1, 1 : 3]\n\tbsl4 = b [ : , 1]\n\tbsl5 = b [1, 1 : 3]\n\tbsl6 = b [1, 1 : 3]\n\tbsl7 = b [1, 2 : 3]\n\n\tbpsl0 = bp [1, 1 : 3]\n\tbpsl1 = bp [1 : 2, 1 : 3]\n\tbpsl2 = bp [1, 0 : ]\n\tbpsl3 = bp [1, 1 : 3]\n\tbpsl4 = bp [ : , 1]\n\tbpsl5 = bp [3, 1 : 3]\n\tbpsl6 = bp [2 : 4, 1 : 3]\n\tbpsl7 = bp [2 : 4, 2 : 3]\n\t\n\tsum = a + b\n\tdif = a - b\n\tprod = a * b\n\tquot = a / b\n\tdot = c @ d\n\tvsum = v0 + v1\n\tvel = vsum [6]\n\tvsum [6] = 70\n\t\n\tmul_a3 = a * 3\n\tmul_3a = 3 * a\n\tdiv_a3 = a / 3.1234567\n\tdiv_3a = 3.1234567 / a\n\tadd_a3 = a + 3\n\tadd_3a = 3 + a\n\tsub_a3 = a - 3\n\tsub_3a = 3 - a\n\tneg_a = -a\n\t\n\t__pragma__ ('noopov')\n\t\t\n\tautoTester.check ('El a [1, 2, 3] alt', a.tolist (), '<br>')\n\tautoTester.check ('El b [1, 2, 3]', el, '<br>')\n\t\n\tautoTester.check ('Sl b0', bsl0.tolist (), '<br>')\n\tautoTester.check ('Sl b1', bsl1.tolist (), '<br>')\n\tautoTester.check ('Sl b2', bsl2.tolist (), '<br>')\n\tautoTester.check ('Sl b3', bsl3.tolist (), '<br>')\n\tautoTester.check ('Sl b4', bsl4.tolist (), '<br>')\n\tautoTester.check ('Sl b5', bsl5.tolist (), '<br>')\n\tautoTester.check ('Sl b6', bsl6.tolist (), '<br>')\n\tautoTester.check ('Sl b7', bsl7.tolist (), '<br>')\n\t\n\tautoTester.check ('Sl bp0', bpsl0.tolist (), '<br>')\n\tautoTester.check ('Sl bp1', bpsl1.tolist (), '<br>')\n\tautoTester.check ('Sl bp2', bpsl2.tolist (), '<br>')\n\tautoTester.check ('Sl bp3', bpsl3.tolist (), '<br>')\n\tautoTester.check ('Sl bp4', bpsl4.tolist (), '<br>')\n\tautoTester.check ('Sl bp5', bpsl5.tolist (), '<br>')\n\tautoTester.check ('Sl bp6', bpsl6.tolist (), '<br>')\n\tautoTester.check ('Sl bp7', bpsl7.tolist (), '<br>')\n\t\n\tautoTester.check ('Matrix sum', sum.tolist (), '<br>')\n\tautoTester.check ('Matrix difference', dif.tolist (), '<br>')\n\tautoTester.check ('Matrix product', prod.tolist (), '<br>')\n\tautoTester.check ('Matrix quotient', quot.tolist (), '<br>')\n\tautoTester.check ('Matrix dotproduct', dot.tolist (), '<br>')\n\t\n\tautoTester.check ('Vector', v0.tolist (), '<br>')\n\tautoTester.check ('Vector', v1.tolist (), '<br>')\n\tautoTester.check ('El sum old', vel, '<br>')\n\tautoTester.check ('Vector sum new', vsum.tolist (), '<br>')\n\t\n\tautoTester.check ('mul_a3', mul_a3.tolist (), '<br>')\n\tautoTester.check ('mul_3a', mul_3a.tolist (), '<br>')\n\tautoTester.check ('div_a3', num.round (div_a3, 2).tolist (), '<br>')\n\tautoTester.check ('div_3a', num.round (div_3a, 2).tolist (), '<br>')\n\tautoTester.check ('add_a3', add_a3.tolist (), '<br>')\n\tautoTester.check ('add_3a', add_3a.tolist (), '<br>')\n\tautoTester.check ('sub_a3', sub_a3.tolist (), '<br>')\n\tautoTester.check ('sub_3a', sub_3a.tolist (), '<br>')\n\tautoTester.check ('neg_a', neg_a.tolist (), '<br>')\n\t\n\t__pragma__ ('opov')\n\tcomp_a = num.array ([\n\t\t[1 + 2j, 2 - 1j, 3],\n\t\t[4, 5 + 3j, 7]\n\t], 'complex128')\t\n\tcomp_b = num.array ([\n\t\t[6, 8 - 1j],\n\t\t[9 + 3j, 10],\n\t\t[11, 12 - 6j]\n\t], 'complex128')\n\tcomp_c = comp_a @ comp_b\n\t__pragma__ ('noopov')\n\t\n\tautoTester.check ('comp_a', comp_a.tolist (), '<br>')\n\tautoTester.check ('comp_b', comp_b.tolist (), '<br>')\n\tautoTester.check ('comp_c', comp_c.tolist (), '<br>')\n\t\n\t__pragma__ ('opov')\n\t\n\tcomp_a_square = comp_a [ : , : 2]\n\tcomp_b_square = comp_b [1 : , : ]\n\t\n\tcomp_c_square = comp_a_square * comp_b_square\n\tcomp_d_square = comp_a_square / comp_b_square\n\tcomp_e_square = comp_a_square + comp_b_square\n\tcomp_f_square = comp_a_square - comp_b_square\n\t\n\t__pragma__ ('noopov')\n\t\n\tautoTester.check ('comp_a_square', comp_a_square.tolist (), '<br>')\n\tautoTester.check ('comp_b_square', comp_b_square.tolist (), '<br>')\n\tautoTester.check ('comp_c_square', comp_c_square.tolist (), '<br>')\n\tautoTester.check ('comp_d_square', num.round (comp_d_square, 2).tolist (), '<br>')\n\tautoTester.check ('comp_e_square', comp_e_square.tolist (), '<br>')\n\tautoTester.check ('comp_f_square', comp_f_square.tolist (), '<br>')\n\t\n\t__pragma__ ('opov')\n\tsliceable_a = num.array ([\n\t\t[1, 2, 3, 4],\n\t\t[5, 6, 7, 8],\n\t\t[9, 10, 11, 12],\n\t\t[13, 14, 15, 16]\n\t])\n\tautoTester.check ('sliceable_a', sliceable_a.tolist ())\n\n\tslice_a = sliceable_a [1 : , 1 : ]\n\tautoTester.check ('slice_a')\n\t\n\tsliceable_at = sliceable_a.transpose ()\n\tslice_at = sliceable_at [1 : ]\n\t\n\t__pragma__ ('noopov')\n\t"
	],
	"mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AAOA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAMA;AAEA;AAEA;AAMA;AAEA;AACA;AAEA;AAMA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAOA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAIA;AAKA;AAGA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAGA;AAMA;AAEA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA"
}