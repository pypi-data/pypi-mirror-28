# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_survival', [dirname(__file__)])
        except ImportError:
            import _survival
            return _survival
        if fp is not None:
            try:
                _mod = imp.load_module('_survival', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _survival = swig_import_helper()
    del swig_import_helper
else:
    import _survival
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



_survival.SHARED_PTR_DISOWN_swigconstant(_survival)
SHARED_PTR_DISOWN = _survival.SHARED_PTR_DISOWN
import tick.base
import tick.array.build.array
class Model(object):
    """Proxy of C++ Model class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(Model self) -> Model"""
        this = _survival.new_Model()
        try:
            self.this.append(this)
        except:
            self.this = this

    def grad(self, coeffs: 'ArrayDouble const &', out: 'ArrayDouble &') -> "void":
        """grad(Model self, ArrayDouble const & coeffs, ArrayDouble & out)"""
        return _survival.Model_grad(self, coeffs, out)


    def loss(self, coeffs: 'ArrayDouble const &') -> "double":
        """loss(Model self, ArrayDouble const & coeffs) -> double"""
        return _survival.Model_loss(self, coeffs)


    def get_epoch_size(self) -> "unsigned long":
        """get_epoch_size(Model self) -> unsigned long"""
        return _survival.Model_get_epoch_size(self)


    def is_sparse(self) -> "bool":
        """is_sparse(Model self) -> bool"""
        return _survival.Model_is_sparse(self)

    __swig_destroy__ = _survival.delete_Model
    __del__ = lambda self: None
Model_swigregister = _survival.Model_swigregister
Model_swigregister(Model)

class ModelLabelsFeatures(Model):
    """Proxy of C++ ModelLabelsFeatures class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayDouble2dPtr const', labels: 'SArrayDoublePtr const'):
        """__init__(ModelLabelsFeatures self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels) -> ModelLabelsFeatures"""
        this = _survival.new_ModelLabelsFeatures(features, labels)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get_n_samples(self) -> "unsigned long":
        """get_n_samples(ModelLabelsFeatures self) -> unsigned long"""
        return _survival.ModelLabelsFeatures_get_n_samples(self)


    def get_n_features(self) -> "unsigned long":
        """get_n_features(ModelLabelsFeatures self) -> unsigned long"""
        return _survival.ModelLabelsFeatures_get_n_features(self)

    __swig_destroy__ = _survival.delete_ModelLabelsFeatures
    __del__ = lambda self: None
ModelLabelsFeatures_swigregister = _survival.ModelLabelsFeatures_swigregister
ModelLabelsFeatures_swigregister(ModelLabelsFeatures)

class ModelLipschitz(Model):
    """Proxy of C++ ModelLipschitz class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(ModelLipschitz self) -> ModelLipschitz"""
        this = _survival.new_ModelLipschitz()
        try:
            self.this.append(this)
        except:
            self.this = this

    def get_lip_max(self) -> "double":
        """get_lip_max(ModelLipschitz self) -> double"""
        return _survival.ModelLipschitz_get_lip_max(self)


    def get_lip_mean(self) -> "double":
        """get_lip_mean(ModelLipschitz self) -> double"""
        return _survival.ModelLipschitz_get_lip_mean(self)

    __swig_destroy__ = _survival.delete_ModelLipschitz
    __del__ = lambda self: None
ModelLipschitz_swigregister = _survival.ModelLipschitz_swigregister
ModelLipschitz_swigregister(ModelLipschitz)

class ModelGeneralizedLinear(ModelLabelsFeatures):
    """Proxy of C++ ModelGeneralizedLinear class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayDouble2dPtr const', labels: 'SArrayDoublePtr const', fit_intercept: 'bool const', n_threads: 'int const'=1):
        """
        __init__(ModelGeneralizedLinear self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept, int const n_threads=1) -> ModelGeneralizedLinear
        __init__(ModelGeneralizedLinear self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept) -> ModelGeneralizedLinear
        """
        this = _survival.new_ModelGeneralizedLinear(features, labels, fit_intercept, n_threads)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get_n_coeffs(self) -> "unsigned long":
        """get_n_coeffs(ModelGeneralizedLinear self) -> unsigned long"""
        return _survival.ModelGeneralizedLinear_get_n_coeffs(self)


    def set_fit_intercept(self, fit_intercept: 'bool') -> "void":
        """set_fit_intercept(ModelGeneralizedLinear self, bool fit_intercept)"""
        return _survival.ModelGeneralizedLinear_set_fit_intercept(self, fit_intercept)


    def sdca_primal_dual_relation(self, l_l2sq: 'double const', dual_vector: 'ArrayDouble const &', out_primal_vector: 'ArrayDouble &') -> "void":
        """sdca_primal_dual_relation(ModelGeneralizedLinear self, double const l_l2sq, ArrayDouble const & dual_vector, ArrayDouble & out_primal_vector)"""
        return _survival.ModelGeneralizedLinear_sdca_primal_dual_relation(self, l_l2sq, dual_vector, out_primal_vector)

    __swig_destroy__ = _survival.delete_ModelGeneralizedLinear
    __del__ = lambda self: None
ModelGeneralizedLinear_swigregister = _survival.ModelGeneralizedLinear_swigregister
ModelGeneralizedLinear_swigregister(ModelGeneralizedLinear)

class ModelCoxRegPartialLik(Model):
    """Proxy of C++ ModelCoxRegPartialLik class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayDouble2dPtr const', times: 'SArrayDoublePtr const', censoring: 'SArrayUShortPtr const'):
        """__init__(ModelCoxRegPartialLik self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const times, SArrayUShortPtr const censoring) -> ModelCoxRegPartialLik"""
        this = _survival.new_ModelCoxRegPartialLik(features, times, censoring)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _survival.delete_ModelCoxRegPartialLik
    __del__ = lambda self: None
ModelCoxRegPartialLik_swigregister = _survival.ModelCoxRegPartialLik_swigregister
ModelCoxRegPartialLik_swigregister(ModelCoxRegPartialLik)

class ModelSCCS(Model):
    """Proxy of C++ ModelSCCS class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayDouble2dPtrList1D const &', labels: 'SArrayIntPtrList1D const &', censoring: 'SBaseArrayULongPtr const', n_lags: 'ulong'):
        """__init__(ModelSCCS self, SBaseArrayDouble2dPtrList1D const & features, SArrayIntPtrList1D const & labels, SBaseArrayULongPtr const censoring, ulong n_lags) -> ModelSCCS"""
        this = _survival.new_ModelSCCS(features, labels, censoring, n_lags)
        try:
            self.this.append(this)
        except:
            self.this = this

    def loss(self, coeffs: 'ArrayDouble &') -> "double":
        """loss(ModelSCCS self, ArrayDouble & coeffs) -> double"""
        return _survival.ModelSCCS_loss(self, coeffs)


    def grad(self, coeffs: 'ArrayDouble &', out: 'ArrayDouble &') -> "void":
        """grad(ModelSCCS self, ArrayDouble & coeffs, ArrayDouble & out)"""
        return _survival.ModelSCCS_grad(self, coeffs, out)


    def compute_lip_consts(self) -> "void":
        """compute_lip_consts(ModelSCCS self)"""
        return _survival.ModelSCCS_compute_lip_consts(self)


    def get_rand_max(self) -> "unsigned long":
        """get_rand_max(ModelSCCS self) -> unsigned long"""
        return _survival.ModelSCCS_get_rand_max(self)


    def get_epoch_size(self) -> "unsigned long":
        """get_epoch_size(ModelSCCS self) -> unsigned long"""
        return _survival.ModelSCCS_get_epoch_size(self)


    def get_n_coeffs(self) -> "unsigned long":
        """get_n_coeffs(ModelSCCS self) -> unsigned long"""
        return _survival.ModelSCCS_get_n_coeffs(self)


    def get_lip_max(self) -> "double":
        """get_lip_max(ModelSCCS self) -> double"""
        return _survival.ModelSCCS_get_lip_max(self)

    __swig_destroy__ = _survival.delete_ModelSCCS
    __del__ = lambda self: None
ModelSCCS_swigregister = _survival.ModelSCCS_swigregister
ModelSCCS_swigregister(ModelSCCS)



