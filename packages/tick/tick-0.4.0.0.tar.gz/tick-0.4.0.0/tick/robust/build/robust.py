# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_robust', [dirname(__file__)])
        except ImportError:
            import _robust
            return _robust
        if fp is not None:
            try:
                _mod = imp.load_module('_robust', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _robust = swig_import_helper()
    del swig_import_helper
else:
    import _robust
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



_robust.SHARED_PTR_DISOWN_swigconstant(_robust)
SHARED_PTR_DISOWN = _robust.SHARED_PTR_DISOWN
import tick.base
import tick.array.build.array
class Model(object):
    """Proxy of C++ Model class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(Model self) -> Model"""
        this = _robust.new_Model()
        try:
            self.this.append(this)
        except:
            self.this = this

    def grad(self, coeffs: 'ArrayDouble const &', out: 'ArrayDouble &') -> "void":
        """grad(Model self, ArrayDouble const & coeffs, ArrayDouble & out)"""
        return _robust.Model_grad(self, coeffs, out)


    def loss(self, coeffs: 'ArrayDouble const &') -> "double":
        """loss(Model self, ArrayDouble const & coeffs) -> double"""
        return _robust.Model_loss(self, coeffs)


    def get_epoch_size(self) -> "unsigned long":
        """get_epoch_size(Model self) -> unsigned long"""
        return _robust.Model_get_epoch_size(self)


    def is_sparse(self) -> "bool":
        """is_sparse(Model self) -> bool"""
        return _robust.Model_is_sparse(self)

    __swig_destroy__ = _robust.delete_Model
    __del__ = lambda self: None
Model_swigregister = _robust.Model_swigregister
Model_swigregister(Model)

class ModelLabelsFeatures(Model):
    """Proxy of C++ ModelLabelsFeatures class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayDouble2dPtr const', labels: 'SArrayDoublePtr const'):
        """__init__(ModelLabelsFeatures self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels) -> ModelLabelsFeatures"""
        this = _robust.new_ModelLabelsFeatures(features, labels)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get_n_samples(self) -> "unsigned long":
        """get_n_samples(ModelLabelsFeatures self) -> unsigned long"""
        return _robust.ModelLabelsFeatures_get_n_samples(self)


    def get_n_features(self) -> "unsigned long":
        """get_n_features(ModelLabelsFeatures self) -> unsigned long"""
        return _robust.ModelLabelsFeatures_get_n_features(self)

    __swig_destroy__ = _robust.delete_ModelLabelsFeatures
    __del__ = lambda self: None
ModelLabelsFeatures_swigregister = _robust.ModelLabelsFeatures_swigregister
ModelLabelsFeatures_swigregister(ModelLabelsFeatures)

class ModelLipschitz(Model):
    """Proxy of C++ ModelLipschitz class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(ModelLipschitz self) -> ModelLipschitz"""
        this = _robust.new_ModelLipschitz()
        try:
            self.this.append(this)
        except:
            self.this = this

    def get_lip_max(self) -> "double":
        """get_lip_max(ModelLipschitz self) -> double"""
        return _robust.ModelLipschitz_get_lip_max(self)


    def get_lip_mean(self) -> "double":
        """get_lip_mean(ModelLipschitz self) -> double"""
        return _robust.ModelLipschitz_get_lip_mean(self)

    __swig_destroy__ = _robust.delete_ModelLipschitz
    __del__ = lambda self: None
ModelLipschitz_swigregister = _robust.ModelLipschitz_swigregister
ModelLipschitz_swigregister(ModelLipschitz)

class ModelGeneralizedLinear(ModelLabelsFeatures):
    """Proxy of C++ ModelGeneralizedLinear class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayDouble2dPtr const', labels: 'SArrayDoublePtr const', fit_intercept: 'bool const', n_threads: 'int const'=1):
        """
        __init__(ModelGeneralizedLinear self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept, int const n_threads=1) -> ModelGeneralizedLinear
        __init__(ModelGeneralizedLinear self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept) -> ModelGeneralizedLinear
        """
        this = _robust.new_ModelGeneralizedLinear(features, labels, fit_intercept, n_threads)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get_n_coeffs(self) -> "unsigned long":
        """get_n_coeffs(ModelGeneralizedLinear self) -> unsigned long"""
        return _robust.ModelGeneralizedLinear_get_n_coeffs(self)


    def set_fit_intercept(self, fit_intercept: 'bool') -> "void":
        """set_fit_intercept(ModelGeneralizedLinear self, bool fit_intercept)"""
        return _robust.ModelGeneralizedLinear_set_fit_intercept(self, fit_intercept)


    def sdca_primal_dual_relation(self, l_l2sq: 'double const', dual_vector: 'ArrayDouble const &', out_primal_vector: 'ArrayDouble &') -> "void":
        """sdca_primal_dual_relation(ModelGeneralizedLinear self, double const l_l2sq, ArrayDouble const & dual_vector, ArrayDouble & out_primal_vector)"""
        return _robust.ModelGeneralizedLinear_sdca_primal_dual_relation(self, l_l2sq, dual_vector, out_primal_vector)

    __swig_destroy__ = _robust.delete_ModelGeneralizedLinear
    __del__ = lambda self: None
ModelGeneralizedLinear_swigregister = _robust.ModelGeneralizedLinear_swigregister
ModelGeneralizedLinear_swigregister(ModelGeneralizedLinear)

class ModelHinge(ModelGeneralizedLinear):
    """Proxy of C++ ModelHinge class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayDouble2dPtr const', labels: 'SArrayDoublePtr const', fit_intercept: 'bool const', n_threads: 'int const'):
        """__init__(ModelHinge self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept, int const n_threads) -> ModelHinge"""
        this = _robust.new_ModelHinge(features, labels, fit_intercept, n_threads)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _robust.delete_ModelHinge
    __del__ = lambda self: None
ModelHinge_swigregister = _robust.ModelHinge_swigregister
ModelHinge_swigregister(ModelHinge)

class ModelQuadraticHinge(ModelGeneralizedLinear, ModelLipschitz):
    """Proxy of C++ ModelQuadraticHinge class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayDouble2dPtr const', labels: 'SArrayDoublePtr const', fit_intercept: 'bool const', n_threads: 'int const'):
        """__init__(ModelQuadraticHinge self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept, int const n_threads) -> ModelQuadraticHinge"""
        this = _robust.new_ModelQuadraticHinge(features, labels, fit_intercept, n_threads)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _robust.delete_ModelQuadraticHinge
    __del__ = lambda self: None
ModelQuadraticHinge_swigregister = _robust.ModelQuadraticHinge_swigregister
ModelQuadraticHinge_swigregister(ModelQuadraticHinge)

class ModelSmoothedHinge(ModelGeneralizedLinear, ModelLipschitz):
    """Proxy of C++ ModelSmoothedHinge class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayDouble2dPtr const', labels: 'SArrayDoublePtr const', fit_intercept: 'bool const', smoothness: 'double const', n_threads: 'int const'):
        """__init__(ModelSmoothedHinge self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept, double const smoothness, int const n_threads) -> ModelSmoothedHinge"""
        this = _robust.new_ModelSmoothedHinge(features, labels, fit_intercept, smoothness, n_threads)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get_smoothness(self) -> "double":
        """get_smoothness(ModelSmoothedHinge self) -> double"""
        return _robust.ModelSmoothedHinge_get_smoothness(self)


    def set_smoothness(self, smoothness: 'double') -> "void":
        """set_smoothness(ModelSmoothedHinge self, double smoothness)"""
        return _robust.ModelSmoothedHinge_set_smoothness(self, smoothness)

    __swig_destroy__ = _robust.delete_ModelSmoothedHinge
    __del__ = lambda self: None
ModelSmoothedHinge_swigregister = _robust.ModelSmoothedHinge_swigregister
ModelSmoothedHinge_swigregister(ModelSmoothedHinge)

class ModelLinReg(ModelGeneralizedLinear, ModelLipschitz):
    """Proxy of C++ ModelLinReg class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayDouble2dPtr const', labels: 'SArrayDoublePtr const', fit_intercept: 'bool const', n_threads: 'int const'):
        """__init__(ModelLinReg self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept, int const n_threads) -> ModelLinReg"""
        this = _robust.new_ModelLinReg(features, labels, fit_intercept, n_threads)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _robust.delete_ModelLinReg
    __del__ = lambda self: None
ModelLinReg_swigregister = _robust.ModelLinReg_swigregister
ModelLinReg_swigregister(ModelLinReg)

class ModelLogReg(ModelGeneralizedLinear, ModelLipschitz):
    """Proxy of C++ ModelLogReg class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayDouble2dPtr const', labels: 'SArrayDoublePtr const', fit_intercept: 'bool const', n_threads: 'int const'):
        """__init__(ModelLogReg self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept, int const n_threads) -> ModelLogReg"""
        this = _robust.new_ModelLogReg(features, labels, fit_intercept, n_threads)
        try:
            self.this.append(this)
        except:
            self.this = this

    def sigmoid(x: 'ArrayDouble const &', out: 'ArrayDouble &') -> "void":
        """sigmoid(ArrayDouble const & x, ArrayDouble & out)"""
        return _robust.ModelLogReg_sigmoid(x, out)

    sigmoid = staticmethod(sigmoid)

    def logistic(x: 'ArrayDouble const &', out: 'ArrayDouble &') -> "void":
        """logistic(ArrayDouble const & x, ArrayDouble & out)"""
        return _robust.ModelLogReg_logistic(x, out)

    logistic = staticmethod(logistic)
    __swig_destroy__ = _robust.delete_ModelLogReg
    __del__ = lambda self: None
ModelLogReg_swigregister = _robust.ModelLogReg_swigregister
ModelLogReg_swigregister(ModelLogReg)

def ModelLogReg_sigmoid(x: 'ArrayDouble const &', out: 'ArrayDouble &') -> "void":
    """ModelLogReg_sigmoid(ArrayDouble const & x, ArrayDouble & out)"""
    return _robust.ModelLogReg_sigmoid(x, out)

def ModelLogReg_logistic(x: 'ArrayDouble const &', out: 'ArrayDouble &') -> "void":
    """ModelLogReg_logistic(ArrayDouble const & x, ArrayDouble & out)"""
    return _robust.ModelLogReg_logistic(x, out)


_robust.LinkType_identity_swigconstant(_robust)
LinkType_identity = _robust.LinkType_identity

_robust.LinkType_exponential_swigconstant(_robust)
LinkType_exponential = _robust.LinkType_exponential
class ModelPoisReg(ModelGeneralizedLinear):
    """Proxy of C++ ModelPoisReg class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayDouble2dPtr const', labels: 'SArrayDoublePtr const', link_type: 'LinkType const', fit_intercept: 'bool const', n_threads: 'int const'):
        """__init__(ModelPoisReg self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, LinkType const link_type, bool const fit_intercept, int const n_threads) -> ModelPoisReg"""
        this = _robust.new_ModelPoisReg(features, labels, link_type, fit_intercept, n_threads)
        try:
            self.this.append(this)
        except:
            self.this = this

    def set_link_type(self, link_type: 'LinkType') -> "void":
        """set_link_type(ModelPoisReg self, LinkType link_type)"""
        return _robust.ModelPoisReg_set_link_type(self, link_type)

    __swig_destroy__ = _robust.delete_ModelPoisReg
    __del__ = lambda self: None
ModelPoisReg_swigregister = _robust.ModelPoisReg_swigregister
ModelPoisReg_swigregister(ModelPoisReg)

class ModelEpsilonInsensitive(ModelGeneralizedLinear):
    """Proxy of C++ ModelEpsilonInsensitive class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayDouble2dPtr const', labels: 'SArrayDoublePtr const', fit_intercept: 'bool const', threshold: 'double const', n_threads: 'int const'):
        """__init__(ModelEpsilonInsensitive self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept, double const threshold, int const n_threads) -> ModelEpsilonInsensitive"""
        this = _robust.new_ModelEpsilonInsensitive(features, labels, fit_intercept, threshold, n_threads)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get_threshold(self) -> "double":
        """get_threshold(ModelEpsilonInsensitive self) -> double"""
        return _robust.ModelEpsilonInsensitive_get_threshold(self)


    def set_threshold(self, threshold: 'double const') -> "void":
        """set_threshold(ModelEpsilonInsensitive self, double const threshold)"""
        return _robust.ModelEpsilonInsensitive_set_threshold(self, threshold)

    __swig_destroy__ = _robust.delete_ModelEpsilonInsensitive
    __del__ = lambda self: None
ModelEpsilonInsensitive_swigregister = _robust.ModelEpsilonInsensitive_swigregister
ModelEpsilonInsensitive_swigregister(ModelEpsilonInsensitive)

class ModelHuber(ModelGeneralizedLinear, ModelLipschitz):
    """Proxy of C++ ModelHuber class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayDouble2dPtr const', labels: 'SArrayDoublePtr const', fit_intercept: 'bool const', threshold: 'double const', n_threads: 'int const'):
        """__init__(ModelHuber self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept, double const threshold, int const n_threads) -> ModelHuber"""
        this = _robust.new_ModelHuber(features, labels, fit_intercept, threshold, n_threads)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get_threshold(self) -> "double":
        """get_threshold(ModelHuber self) -> double"""
        return _robust.ModelHuber_get_threshold(self)


    def set_threshold(self, threshold: 'double const') -> "void":
        """set_threshold(ModelHuber self, double const threshold)"""
        return _robust.ModelHuber_set_threshold(self, threshold)

    __swig_destroy__ = _robust.delete_ModelHuber
    __del__ = lambda self: None
ModelHuber_swigregister = _robust.ModelHuber_swigregister
ModelHuber_swigregister(ModelHuber)

class ModelModifiedHuber(ModelGeneralizedLinear, ModelLipschitz):
    """Proxy of C++ ModelModifiedHuber class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayDouble2dPtr const', labels: 'SArrayDoublePtr const', fit_intercept: 'bool const', n_threads: 'int const'):
        """__init__(ModelModifiedHuber self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept, int const n_threads) -> ModelModifiedHuber"""
        this = _robust.new_ModelModifiedHuber(features, labels, fit_intercept, n_threads)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _robust.delete_ModelModifiedHuber
    __del__ = lambda self: None
ModelModifiedHuber_swigregister = _robust.ModelModifiedHuber_swigregister
ModelModifiedHuber_swigregister(ModelModifiedHuber)

class ModelAbsoluteRegression(ModelGeneralizedLinear):
    """Proxy of C++ ModelAbsoluteRegression class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayDouble2dPtr const', labels: 'SArrayDoublePtr const', fit_intercept: 'bool const', n_threads: 'int const'=1):
        """
        __init__(ModelAbsoluteRegression self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept, int const n_threads=1) -> ModelAbsoluteRegression
        __init__(ModelAbsoluteRegression self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept) -> ModelAbsoluteRegression
        """
        this = _robust.new_ModelAbsoluteRegression(features, labels, fit_intercept, n_threads)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _robust.delete_ModelAbsoluteRegression
    __del__ = lambda self: None
ModelAbsoluteRegression_swigregister = _robust.ModelAbsoluteRegression_swigregister
ModelAbsoluteRegression_swigregister(ModelAbsoluteRegression)

class ModelGeneralizedLinearWithIntercepts(ModelGeneralizedLinear):
    """Proxy of C++ ModelGeneralizedLinearWithIntercepts class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayDouble2dPtr const', labels: 'SArrayDoublePtr const', fit_intercept: 'bool const', n_threads: 'int const'=1):
        """
        __init__(ModelGeneralizedLinearWithIntercepts self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept, int const n_threads=1) -> ModelGeneralizedLinearWithIntercepts
        __init__(ModelGeneralizedLinearWithIntercepts self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept) -> ModelGeneralizedLinearWithIntercepts
        """
        this = _robust.new_ModelGeneralizedLinearWithIntercepts(features, labels, fit_intercept, n_threads)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _robust.delete_ModelGeneralizedLinearWithIntercepts
    __del__ = lambda self: None
ModelGeneralizedLinearWithIntercepts_swigregister = _robust.ModelGeneralizedLinearWithIntercepts_swigregister
ModelGeneralizedLinearWithIntercepts_swigregister(ModelGeneralizedLinearWithIntercepts)

class ModelLinRegWithIntercepts(ModelGeneralizedLinearWithIntercepts, ModelLinReg):
    """Proxy of C++ ModelLinRegWithIntercepts class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayDouble2dPtr const', labels: 'SArrayDoublePtr const', fit_intercept: 'bool const', n_threads: 'int const'):
        """__init__(ModelLinRegWithIntercepts self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept, int const n_threads) -> ModelLinRegWithIntercepts"""
        this = _robust.new_ModelLinRegWithIntercepts(features, labels, fit_intercept, n_threads)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _robust.delete_ModelLinRegWithIntercepts
    __del__ = lambda self: None
ModelLinRegWithIntercepts_swigregister = _robust.ModelLinRegWithIntercepts_swigregister
ModelLinRegWithIntercepts_swigregister(ModelLinRegWithIntercepts)



