# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_prox')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_prox')
    _prox = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_prox', [dirname(__file__)])
        except ImportError:
            import _prox
            return _prox
        try:
            _mod = imp.load_module('_prox', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _prox = swig_import_helper()
    del swig_import_helper
else:
    import _prox
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


SHARED_PTR_DISOWN = _prox.SHARED_PTR_DISOWN
import tick.base
import tick.array.build.array
class Prox(object):
    """Proxy of C++ Prox class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Prox self, double strength, bool positive) -> Prox
        __init__(Prox self, double strength, unsigned long start, unsigned long end, bool positive) -> Prox
        """
        this = _prox.new_Prox(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def call(self, coeffs: 'ArrayDouble const &', step: 'double', out: 'ArrayDouble &') -> "void":
        """call(Prox self, ArrayDouble const & coeffs, double step, ArrayDouble & out)"""
        return _prox.Prox_call(self, coeffs, step, out)


    def value(self, coeffs: 'ArrayDouble const &') -> "double":
        """value(Prox self, ArrayDouble const & coeffs) -> double"""
        return _prox.Prox_value(self, coeffs)


    def get_strength(self) -> "double":
        """get_strength(Prox self) -> double"""
        return _prox.Prox_get_strength(self)


    def set_strength(self, strength: 'double') -> "void":
        """set_strength(Prox self, double strength)"""
        return _prox.Prox_set_strength(self, strength)


    def get_start(self) -> "ulong":
        """get_start(Prox self) -> ulong"""
        return _prox.Prox_get_start(self)


    def get_end(self) -> "ulong":
        """get_end(Prox self) -> ulong"""
        return _prox.Prox_get_end(self)


    def set_start_end(self, start: 'ulong', end: 'ulong') -> "void":
        """set_start_end(Prox self, ulong start, ulong end)"""
        return _prox.Prox_set_start_end(self, start, end)


    def get_positive(self) -> "bool":
        """get_positive(Prox self) -> bool"""
        return _prox.Prox_get_positive(self)


    def set_positive(self, positive: 'bool') -> "void":
        """set_positive(Prox self, bool positive)"""
        return _prox.Prox_set_positive(self, positive)

    __swig_destroy__ = _prox.delete_Prox
    __del__ = lambda self: None
Prox_swigregister = _prox.Prox_swigregister
Prox_swigregister(Prox)

class ProxSeparable(Prox):
    """Proxy of C++ ProxSeparable class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(ProxSeparable self, double strength, bool positive) -> ProxSeparable
        __init__(ProxSeparable self, double strength, unsigned long start, unsigned long end, bool positive) -> ProxSeparable
        """
        this = _prox.new_ProxSeparable(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def call(self, *args) -> "void":
        """
        call(ProxSeparable self, ArrayDouble const & coeffs, double step, ArrayDouble & out)
        call(ProxSeparable self, ArrayDouble const & coeffs, ArrayDouble const & step, ArrayDouble & out)
        """
        return _prox.ProxSeparable_call(self, *args)

    __swig_destroy__ = _prox.delete_ProxSeparable
    __del__ = lambda self: None
ProxSeparable_swigregister = _prox.ProxSeparable_swigregister
ProxSeparable_swigregister(ProxSeparable)

class ProxZero(Prox):
    """Proxy of C++ ProxZero class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(ProxZero self, double strength) -> ProxZero
        __init__(ProxZero self, double strength, unsigned long start, unsigned long end) -> ProxZero
        """
        this = _prox.new_ProxZero(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _prox.delete_ProxZero
    __del__ = lambda self: None
ProxZero_swigregister = _prox.ProxZero_swigregister
ProxZero_swigregister(ProxZero)

class ProxPositive(Prox):
    """Proxy of C++ ProxPositive class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(ProxPositive self, double strength) -> ProxPositive
        __init__(ProxPositive self, double strength, ulong start, ulong end) -> ProxPositive
        """
        this = _prox.new_ProxPositive(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _prox.delete_ProxPositive
    __del__ = lambda self: None
ProxPositive_swigregister = _prox.ProxPositive_swigregister
ProxPositive_swigregister(ProxPositive)

class ProxL2Sq(ProxSeparable):
    """Proxy of C++ ProxL2Sq class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(ProxL2Sq self, double strength, bool positive) -> ProxL2Sq
        __init__(ProxL2Sq self, double strength, ulong start, ulong end, bool positive) -> ProxL2Sq
        """
        this = _prox.new_ProxL2Sq(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _prox.delete_ProxL2Sq
    __del__ = lambda self: None
ProxL2Sq_swigregister = _prox.ProxL2Sq_swigregister
ProxL2Sq_swigregister(ProxL2Sq)

class ProxL2(Prox):
    """Proxy of C++ ProxL2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(ProxL2 self, double strength, bool positive) -> ProxL2
        __init__(ProxL2 self, double strength, unsigned long start, unsigned long end, bool positive) -> ProxL2
        """
        this = _prox.new_ProxL2(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _prox.delete_ProxL2
    __del__ = lambda self: None
ProxL2_swigregister = _prox.ProxL2_swigregister
ProxL2_swigregister(ProxL2)

class ProxL1(Prox):
    """Proxy of C++ ProxL1 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(ProxL1 self, double strength, bool positive) -> ProxL1
        __init__(ProxL1 self, double strength, ulong start, ulong end, bool positive) -> ProxL1
        """
        this = _prox.new_ProxL1(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _prox.delete_ProxL1
    __del__ = lambda self: None
ProxL1_swigregister = _prox.ProxL1_swigregister
ProxL1_swigregister(ProxL1)

class ProxL1w(Prox):
    """Proxy of C++ ProxL1w class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(ProxL1w self, double strength, SArrayDoublePtr weights, bool positive) -> ProxL1w
        __init__(ProxL1w self, double strength, SArrayDoublePtr weights, ulong start, ulong end, bool positive) -> ProxL1w
        """
        this = _prox.new_ProxL1w(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set_weights(self, weights: 'SArrayDoublePtr') -> "void":
        """set_weights(ProxL1w self, SArrayDoublePtr weights)"""
        return _prox.ProxL1w_set_weights(self, weights)

    __swig_destroy__ = _prox.delete_ProxL1w
    __del__ = lambda self: None
ProxL1w_swigregister = _prox.ProxL1w_swigregister
ProxL1w_swigregister(ProxL1w)

class ProxTV(Prox):
    """Proxy of C++ ProxTV class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(ProxTV self, double strength, bool positive) -> ProxTV
        __init__(ProxTV self, double strength, unsigned long start, unsigned long end, bool positive) -> ProxTV
        """
        this = _prox.new_ProxTV(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _prox.delete_ProxTV
    __del__ = lambda self: None
ProxTV_swigregister = _prox.ProxTV_swigregister
ProxTV_swigregister(ProxTV)

class ProxElasticNet(ProxSeparable):
    """Proxy of C++ ProxElasticNet class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(ProxElasticNet self, double strength, double ratio, bool positive) -> ProxElasticNet
        __init__(ProxElasticNet self, double strength, double ratio, ulong start, ulong end, bool positive) -> ProxElasticNet
        """
        this = _prox.new_ProxElasticNet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_ratio(self) -> "double":
        """get_ratio(ProxElasticNet self) -> double"""
        return _prox.ProxElasticNet_get_ratio(self)


    def set_ratio(self, ratio: 'double') -> "void":
        """set_ratio(ProxElasticNet self, double ratio)"""
        return _prox.ProxElasticNet_set_ratio(self, ratio)

    __swig_destroy__ = _prox.delete_ProxElasticNet
    __del__ = lambda self: None
ProxElasticNet_swigregister = _prox.ProxElasticNet_swigregister
ProxElasticNet_swigregister(ProxElasticNet)

class ProxSlope(Prox):
    """Proxy of C++ ProxSlope class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(ProxSlope self, double arg2, double fdr, bool positive) -> ProxSlope
        __init__(ProxSlope self, double arg2, double fdr, unsigned long start, unsigned long end, bool positive) -> ProxSlope
        """
        this = _prox.new_ProxSlope(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_false_discovery_rate(self) -> "double":
        """get_false_discovery_rate(ProxSlope self) -> double"""
        return _prox.ProxSlope_get_false_discovery_rate(self)


    def set_false_discovery_rate(self, fdr: 'double') -> "void":
        """set_false_discovery_rate(ProxSlope self, double fdr)"""
        return _prox.ProxSlope_set_false_discovery_rate(self, fdr)


    def get_weight_i(self, i: 'unsigned long') -> "double":
        """get_weight_i(ProxSlope self, unsigned long i) -> double"""
        return _prox.ProxSlope_get_weight_i(self, i)

    __swig_destroy__ = _prox.delete_ProxSlope
    __del__ = lambda self: None
ProxSlope_swigregister = _prox.ProxSlope_swigregister
ProxSlope_swigregister(ProxSlope)

class SwigPyIterator(object):
    """Proxy of C++ swig::SwigPyIterator class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _prox.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        """value(SwigPyIterator self) -> PyObject *"""
        return _prox.SwigPyIterator_value(self)


    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        """
        incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator
        incr(SwigPyIterator self) -> SwigPyIterator
        """
        return _prox.SwigPyIterator_incr(self, n)


    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        """
        decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator
        decr(SwigPyIterator self) -> SwigPyIterator
        """
        return _prox.SwigPyIterator_decr(self, n)


    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        """distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t"""
        return _prox.SwigPyIterator_distance(self, x)


    def equal(self, x: 'SwigPyIterator') -> "bool":
        """equal(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _prox.SwigPyIterator_equal(self, x)


    def copy(self) -> "swig::SwigPyIterator *":
        """copy(SwigPyIterator self) -> SwigPyIterator"""
        return _prox.SwigPyIterator_copy(self)


    def next(self) -> "PyObject *":
        """next(SwigPyIterator self) -> PyObject *"""
        return _prox.SwigPyIterator_next(self)


    def __next__(self) -> "PyObject *":
        """__next__(SwigPyIterator self) -> PyObject *"""
        return _prox.SwigPyIterator___next__(self)


    def previous(self) -> "PyObject *":
        """previous(SwigPyIterator self) -> PyObject *"""
        return _prox.SwigPyIterator_previous(self)


    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        """advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _prox.SwigPyIterator_advance(self, n)


    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        """__eq__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _prox.SwigPyIterator___eq__(self, x)


    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        """__ne__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _prox.SwigPyIterator___ne__(self, x)


    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        """__iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _prox.SwigPyIterator___iadd__(self, n)


    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        """__isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _prox.SwigPyIterator___isub__(self, n)


    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        """__add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _prox.SwigPyIterator___add__(self, n)


    def __sub__(self, *args) -> "ptrdiff_t":
        """
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator
        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t
        """
        return _prox.SwigPyIterator___sub__(self, *args)

    def __iter__(self):
        return self
SwigPyIterator_swigregister = _prox.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class ProxPtrVector(object):
    """Proxy of C++ std::vector<(ProxPtr)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(ProxPtrVector self) -> SwigPyIterator"""
        return _prox.ProxPtrVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(ProxPtrVector self) -> bool"""
        return _prox.ProxPtrVector___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(ProxPtrVector self) -> bool"""
        return _prox.ProxPtrVector___bool__(self)


    def __len__(self) -> "std::vector< std::shared_ptr< Prox > >::size_type":
        """__len__(ProxPtrVector self) -> std::vector< std::shared_ptr< Prox > >::size_type"""
        return _prox.ProxPtrVector___len__(self)


    def __getslice__(self, i: 'std::vector< std::shared_ptr< Prox > >::difference_type', j: 'std::vector< std::shared_ptr< Prox > >::difference_type') -> "std::vector< std::shared_ptr< Prox >,std::allocator< std::shared_ptr< Prox > > > *":
        """__getslice__(ProxPtrVector self, std::vector< std::shared_ptr< Prox > >::difference_type i, std::vector< std::shared_ptr< Prox > >::difference_type j) -> ProxPtrVector"""
        return _prox.ProxPtrVector___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(ProxPtrVector self, std::vector< std::shared_ptr< Prox > >::difference_type i, std::vector< std::shared_ptr< Prox > >::difference_type j)
        __setslice__(ProxPtrVector self, std::vector< std::shared_ptr< Prox > >::difference_type i, std::vector< std::shared_ptr< Prox > >::difference_type j, ProxPtrVector v)
        """
        return _prox.ProxPtrVector___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< std::shared_ptr< Prox > >::difference_type', j: 'std::vector< std::shared_ptr< Prox > >::difference_type') -> "void":
        """__delslice__(ProxPtrVector self, std::vector< std::shared_ptr< Prox > >::difference_type i, std::vector< std::shared_ptr< Prox > >::difference_type j)"""
        return _prox.ProxPtrVector___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(ProxPtrVector self, std::vector< std::shared_ptr< Prox > >::difference_type i)
        __delitem__(ProxPtrVector self, PySliceObject * slice)
        """
        return _prox.ProxPtrVector___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< std::shared_ptr< Prox > >::value_type const &":
        """
        __getitem__(ProxPtrVector self, PySliceObject * slice) -> ProxPtrVector
        __getitem__(ProxPtrVector self, std::vector< std::shared_ptr< Prox > >::difference_type i) -> std::vector< std::shared_ptr< Prox > >::value_type const &
        """
        return _prox.ProxPtrVector___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(ProxPtrVector self, PySliceObject * slice, ProxPtrVector v)
        __setitem__(ProxPtrVector self, PySliceObject * slice)
        __setitem__(ProxPtrVector self, std::vector< std::shared_ptr< Prox > >::difference_type i, std::vector< std::shared_ptr< Prox > >::value_type const & x)
        """
        return _prox.ProxPtrVector___setitem__(self, *args)


    def pop(self) -> "std::vector< std::shared_ptr< Prox > >::value_type":
        """pop(ProxPtrVector self) -> std::vector< std::shared_ptr< Prox > >::value_type"""
        return _prox.ProxPtrVector_pop(self)


    def append(self, x: 'std::vector< std::shared_ptr< Prox > >::value_type const &') -> "void":
        """append(ProxPtrVector self, std::vector< std::shared_ptr< Prox > >::value_type const & x)"""
        return _prox.ProxPtrVector_append(self, x)


    def empty(self) -> "bool":
        """empty(ProxPtrVector self) -> bool"""
        return _prox.ProxPtrVector_empty(self)


    def size(self) -> "std::vector< std::shared_ptr< Prox > >::size_type":
        """size(ProxPtrVector self) -> std::vector< std::shared_ptr< Prox > >::size_type"""
        return _prox.ProxPtrVector_size(self)


    def swap(self, v: 'ProxPtrVector') -> "void":
        """swap(ProxPtrVector self, ProxPtrVector v)"""
        return _prox.ProxPtrVector_swap(self, v)


    def begin(self) -> "std::vector< std::shared_ptr< Prox > >::iterator":
        """begin(ProxPtrVector self) -> std::vector< std::shared_ptr< Prox > >::iterator"""
        return _prox.ProxPtrVector_begin(self)


    def end(self) -> "std::vector< std::shared_ptr< Prox > >::iterator":
        """end(ProxPtrVector self) -> std::vector< std::shared_ptr< Prox > >::iterator"""
        return _prox.ProxPtrVector_end(self)


    def rbegin(self) -> "std::vector< std::shared_ptr< Prox > >::reverse_iterator":
        """rbegin(ProxPtrVector self) -> std::vector< std::shared_ptr< Prox > >::reverse_iterator"""
        return _prox.ProxPtrVector_rbegin(self)


    def rend(self) -> "std::vector< std::shared_ptr< Prox > >::reverse_iterator":
        """rend(ProxPtrVector self) -> std::vector< std::shared_ptr< Prox > >::reverse_iterator"""
        return _prox.ProxPtrVector_rend(self)


    def clear(self) -> "void":
        """clear(ProxPtrVector self)"""
        return _prox.ProxPtrVector_clear(self)


    def get_allocator(self) -> "std::vector< std::shared_ptr< Prox > >::allocator_type":
        """get_allocator(ProxPtrVector self) -> std::vector< std::shared_ptr< Prox > >::allocator_type"""
        return _prox.ProxPtrVector_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(ProxPtrVector self)"""
        return _prox.ProxPtrVector_pop_back(self)


    def erase(self, *args) -> "std::vector< std::shared_ptr< Prox > >::iterator":
        """
        erase(ProxPtrVector self, std::vector< std::shared_ptr< Prox > >::iterator pos) -> std::vector< std::shared_ptr< Prox > >::iterator
        erase(ProxPtrVector self, std::vector< std::shared_ptr< Prox > >::iterator first, std::vector< std::shared_ptr< Prox > >::iterator last) -> std::vector< std::shared_ptr< Prox > >::iterator
        """
        return _prox.ProxPtrVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(ProxPtr)> self) -> ProxPtrVector
        __init__(std::vector<(ProxPtr)> self, ProxPtrVector arg2) -> ProxPtrVector
        __init__(std::vector<(ProxPtr)> self, std::vector< std::shared_ptr< Prox > >::size_type size) -> ProxPtrVector
        __init__(std::vector<(ProxPtr)> self, std::vector< std::shared_ptr< Prox > >::size_type size, std::vector< std::shared_ptr< Prox > >::value_type const & value) -> ProxPtrVector
        """
        this = _prox.new_ProxPtrVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'std::vector< std::shared_ptr< Prox > >::value_type const &') -> "void":
        """push_back(ProxPtrVector self, std::vector< std::shared_ptr< Prox > >::value_type const & x)"""
        return _prox.ProxPtrVector_push_back(self, x)


    def front(self) -> "std::vector< std::shared_ptr< Prox > >::value_type const &":
        """front(ProxPtrVector self) -> std::vector< std::shared_ptr< Prox > >::value_type const &"""
        return _prox.ProxPtrVector_front(self)


    def back(self) -> "std::vector< std::shared_ptr< Prox > >::value_type const &":
        """back(ProxPtrVector self) -> std::vector< std::shared_ptr< Prox > >::value_type const &"""
        return _prox.ProxPtrVector_back(self)


    def assign(self, n: 'std::vector< std::shared_ptr< Prox > >::size_type', x: 'std::vector< std::shared_ptr< Prox > >::value_type const &') -> "void":
        """assign(ProxPtrVector self, std::vector< std::shared_ptr< Prox > >::size_type n, std::vector< std::shared_ptr< Prox > >::value_type const & x)"""
        return _prox.ProxPtrVector_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(ProxPtrVector self, std::vector< std::shared_ptr< Prox > >::size_type new_size)
        resize(ProxPtrVector self, std::vector< std::shared_ptr< Prox > >::size_type new_size, std::vector< std::shared_ptr< Prox > >::value_type const & x)
        """
        return _prox.ProxPtrVector_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(ProxPtrVector self, std::vector< std::shared_ptr< Prox > >::iterator pos, std::vector< std::shared_ptr< Prox > >::value_type const & x) -> std::vector< std::shared_ptr< Prox > >::iterator
        insert(ProxPtrVector self, std::vector< std::shared_ptr< Prox > >::iterator pos, std::vector< std::shared_ptr< Prox > >::size_type n, std::vector< std::shared_ptr< Prox > >::value_type const & x)
        """
        return _prox.ProxPtrVector_insert(self, *args)


    def reserve(self, n: 'std::vector< std::shared_ptr< Prox > >::size_type') -> "void":
        """reserve(ProxPtrVector self, std::vector< std::shared_ptr< Prox > >::size_type n)"""
        return _prox.ProxPtrVector_reserve(self, n)


    def capacity(self) -> "std::vector< std::shared_ptr< Prox > >::size_type":
        """capacity(ProxPtrVector self) -> std::vector< std::shared_ptr< Prox > >::size_type"""
        return _prox.ProxPtrVector_capacity(self)

    __swig_destroy__ = _prox.delete_ProxPtrVector
    __del__ = lambda self: None
ProxPtrVector_swigregister = _prox.ProxPtrVector_swigregister
ProxPtrVector_swigregister(ProxPtrVector)

class ProxMulti(Prox):
    """Proxy of C++ ProxMulti class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, proxs: 'ProxPtrVector'):
        """__init__(ProxMulti self, ProxPtrVector proxs) -> ProxMulti"""
        this = _prox.new_ProxMulti(proxs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _prox.delete_ProxMulti
    __del__ = lambda self: None
ProxMulti_swigregister = _prox.ProxMulti_swigregister
ProxMulti_swigregister(ProxMulti)

class ProxEquality(Prox):
    """Proxy of C++ ProxEquality class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(ProxEquality self, double strength, bool positive) -> ProxEquality
        __init__(ProxEquality self, double strength, ulong start, ulong end, bool positive) -> ProxEquality
        """
        this = _prox.new_ProxEquality(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _prox.delete_ProxEquality
    __del__ = lambda self: None
ProxEquality_swigregister = _prox.ProxEquality_swigregister
ProxEquality_swigregister(ProxEquality)

class ProxBinarsity(Prox):
    """Proxy of C++ ProxBinarsity class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(ProxBinarsity self, double strength, SArrayULongPtr blocks_start, SArrayULongPtr blocks_length, bool positive) -> ProxBinarsity
        __init__(ProxBinarsity self, double strength, SArrayULongPtr blocks_start, SArrayULongPtr blocks_length, ulong start, ulong end, bool positive) -> ProxBinarsity
        """
        this = _prox.new_ProxBinarsity(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set_positive(self, positive: 'bool') -> "void":
        """set_positive(ProxBinarsity self, bool positive)"""
        return _prox.ProxBinarsity_set_positive(self, positive)


    def set_blocks_start(self, blocks_start: 'SArrayULongPtr') -> "void":
        """set_blocks_start(ProxBinarsity self, SArrayULongPtr blocks_start)"""
        return _prox.ProxBinarsity_set_blocks_start(self, blocks_start)


    def set_blocks_length(self, blocks_length: 'SArrayULongPtr') -> "void":
        """set_blocks_length(ProxBinarsity self, SArrayULongPtr blocks_length)"""
        return _prox.ProxBinarsity_set_blocks_length(self, blocks_length)

    __swig_destroy__ = _prox.delete_ProxBinarsity
    __del__ = lambda self: None
ProxBinarsity_swigregister = _prox.ProxBinarsity_swigregister
ProxBinarsity_swigregister(ProxBinarsity)

class ProxGroupL1(Prox):
    """Proxy of C++ ProxGroupL1 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(ProxGroupL1 self, double strength, SArrayULongPtr blocks_start, SArrayULongPtr blocks_length, bool positive) -> ProxGroupL1
        __init__(ProxGroupL1 self, double strength, SArrayULongPtr blocks_start, SArrayULongPtr blocks_length, ulong start, ulong end, bool positive) -> ProxGroupL1
        """
        this = _prox.new_ProxGroupL1(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set_positive(self, positive: 'bool') -> "void":
        """set_positive(ProxGroupL1 self, bool positive)"""
        return _prox.ProxGroupL1_set_positive(self, positive)


    def set_blocks_start(self, blocks_start: 'SArrayULongPtr') -> "void":
        """set_blocks_start(ProxGroupL1 self, SArrayULongPtr blocks_start)"""
        return _prox.ProxGroupL1_set_blocks_start(self, blocks_start)


    def set_blocks_length(self, blocks_length: 'SArrayULongPtr') -> "void":
        """set_blocks_length(ProxGroupL1 self, SArrayULongPtr blocks_length)"""
        return _prox.ProxGroupL1_set_blocks_length(self, blocks_length)

    __swig_destroy__ = _prox.delete_ProxGroupL1
    __del__ = lambda self: None
ProxGroupL1_swigregister = _prox.ProxGroupL1_swigregister
ProxGroupL1_swigregister(ProxGroupL1)



