# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_solver')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_solver')
    _solver = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_solver', [dirname(__file__)])
        except ImportError:
            import _solver
            return _solver
        try:
            _mod = imp.load_module('_solver', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _solver = swig_import_helper()
    del swig_import_helper
else:
    import _solver
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


SHARED_PTR_DISOWN = _solver.SHARED_PTR_DISOWN
import tick.base
import tick.array.build.array
RandType_unif = _solver.RandType_unif
RandType_perm = _solver.RandType_perm
class StoSolver(object):
    """Proxy of C++ StoSolver class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, epoch_size: 'unsigned long', tol: 'double', rand_type: 'RandType'):
        """__init__(StoSolver self, unsigned long epoch_size, double tol, RandType rand_type) -> StoSolver"""
        this = _solver.new_StoSolver(epoch_size, tol, rand_type)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def solve(self) -> "void":
        """solve(StoSolver self)"""
        return _solver.StoSolver_solve(self)


    def get_minimizer(self, out: 'ArrayDouble &') -> "void":
        """get_minimizer(StoSolver self, ArrayDouble & out)"""
        return _solver.StoSolver_get_minimizer(self, out)


    def get_iterate(self, out: 'ArrayDouble &') -> "void":
        """get_iterate(StoSolver self, ArrayDouble & out)"""
        return _solver.StoSolver_get_iterate(self, out)


    def set_starting_iterate(self, new_iterate: 'ArrayDouble &') -> "void":
        """set_starting_iterate(StoSolver self, ArrayDouble & new_iterate)"""
        return _solver.StoSolver_set_starting_iterate(self, new_iterate)


    def set_tol(self, tol: 'double') -> "void":
        """set_tol(StoSolver self, double tol)"""
        return _solver.StoSolver_set_tol(self, tol)


    def get_tol(self) -> "double":
        """get_tol(StoSolver self) -> double"""
        return _solver.StoSolver_get_tol(self)


    def set_epoch_size(self, epoch_size: 'unsigned long') -> "void":
        """set_epoch_size(StoSolver self, unsigned long epoch_size)"""
        return _solver.StoSolver_set_epoch_size(self, epoch_size)


    def get_epoch_size(self) -> "unsigned long":
        """get_epoch_size(StoSolver self) -> unsigned long"""
        return _solver.StoSolver_get_epoch_size(self)


    def set_rand_type(self, rand_type: 'RandType') -> "void":
        """set_rand_type(StoSolver self, RandType rand_type)"""
        return _solver.StoSolver_set_rand_type(self, rand_type)


    def get_rand_type(self) -> "RandType":
        """get_rand_type(StoSolver self) -> RandType"""
        return _solver.StoSolver_get_rand_type(self)


    def set_rand_max(self, rand_max: 'unsigned long') -> "void":
        """set_rand_max(StoSolver self, unsigned long rand_max)"""
        return _solver.StoSolver_set_rand_max(self, rand_max)


    def get_rand_max(self) -> "unsigned long":
        """get_rand_max(StoSolver self) -> unsigned long"""
        return _solver.StoSolver_get_rand_max(self)


    def set_model(self, model: 'std::shared_ptr< Model >') -> "void":
        """set_model(StoSolver self, std::shared_ptr< Model > model)"""
        return _solver.StoSolver_set_model(self, model)


    def set_prox(self, prox: 'std::shared_ptr< Prox >') -> "void":
        """set_prox(StoSolver self, std::shared_ptr< Prox > prox)"""
        return _solver.StoSolver_set_prox(self, prox)


    def set_seed(self, seed: 'int') -> "void":
        """set_seed(StoSolver self, int seed)"""
        return _solver.StoSolver_set_seed(self, seed)

    __swig_destroy__ = _solver.delete_StoSolver
    __del__ = lambda self: None
StoSolver_swigregister = _solver.StoSolver_swigregister
StoSolver_swigregister(StoSolver)

class SGD(StoSolver):
    """Proxy of C++ SGD class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, epoch_size: 'unsigned long', tol: 'double', rand_type: 'RandType', step: 'double', seed: 'int'):
        """__init__(SGD self, unsigned long epoch_size, double tol, RandType rand_type, double step, int seed) -> SGD"""
        this = _solver.new_SGD(epoch_size, tol, rand_type, step, seed)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set_step(self, step: 'double') -> "void":
        """set_step(SGD self, double step)"""
        return _solver.SGD_set_step(self, step)


    def get_step(self) -> "double":
        """get_step(SGD self) -> double"""
        return _solver.SGD_get_step(self)


    def solve(self) -> "void":
        """solve(SGD self)"""
        return _solver.SGD_solve(self)

    __swig_destroy__ = _solver.delete_SGD
    __del__ = lambda self: None
SGD_swigregister = _solver.SGD_swigregister
SGD_swigregister(SGD)

class SVRG(StoSolver):
    """Proxy of C++ SVRG class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    VarianceReductionMethod_Last = _solver.SVRG_VarianceReductionMethod_Last
    VarianceReductionMethod_Average = _solver.SVRG_VarianceReductionMethod_Average
    VarianceReductionMethod_Random = _solver.SVRG_VarianceReductionMethod_Random
    StepType_Fixed = _solver.SVRG_StepType_Fixed
    StepType_BarzilaiBorwein = _solver.SVRG_StepType_BarzilaiBorwein

    def __init__(self, *args):
        """
        __init__(SVRG self, ulong epoch_size, double tol, RandType rand_type, double step, int seed=-1, int n_threads=1, SVRG::VarianceReductionMethod variance_reduction, SVRG::StepType step_method) -> SVRG
        __init__(SVRG self, ulong epoch_size, double tol, RandType rand_type, double step, int seed=-1, int n_threads=1, SVRG::VarianceReductionMethod variance_reduction) -> SVRG
        __init__(SVRG self, ulong epoch_size, double tol, RandType rand_type, double step, int seed=-1, int n_threads=1) -> SVRG
        __init__(SVRG self, ulong epoch_size, double tol, RandType rand_type, double step, int seed=-1) -> SVRG
        __init__(SVRG self, ulong epoch_size, double tol, RandType rand_type, double step) -> SVRG
        """
        this = _solver.new_SVRG(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def solve(self) -> "void":
        """solve(SVRG self)"""
        return _solver.SVRG_solve(self)


    def get_step(self) -> "double":
        """get_step(SVRG self) -> double"""
        return _solver.SVRG_get_step(self)


    def set_step(self, step: 'double') -> "void":
        """set_step(SVRG self, double step)"""
        return _solver.SVRG_set_step(self, step)


    def get_variance_reduction(self) -> "SVRG::VarianceReductionMethod":
        """get_variance_reduction(SVRG self) -> SVRG::VarianceReductionMethod"""
        return _solver.SVRG_get_variance_reduction(self)


    def set_variance_reduction(self, variance_reduction: 'SVRG::VarianceReductionMethod') -> "void":
        """set_variance_reduction(SVRG self, SVRG::VarianceReductionMethod variance_reduction)"""
        return _solver.SVRG_set_variance_reduction(self, variance_reduction)


    def get_step_type(self) -> "SVRG::StepType":
        """get_step_type(SVRG self) -> SVRG::StepType"""
        return _solver.SVRG_get_step_type(self)


    def set_step_type(self, step_type: 'SVRG::StepType') -> "void":
        """set_step_type(SVRG self, SVRG::StepType step_type)"""
        return _solver.SVRG_set_step_type(self, step_type)

    __swig_destroy__ = _solver.delete_SVRG
    __del__ = lambda self: None
SVRG_swigregister = _solver.SVRG_swigregister
SVRG_swigregister(SVRG)

class SAGA(StoSolver):
    """Proxy of C++ SAGA class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    VarianceReductionMethod_Last = _solver.SAGA_VarianceReductionMethod_Last
    VarianceReductionMethod_Average = _solver.SAGA_VarianceReductionMethod_Average
    VarianceReductionMethod_Random = _solver.SAGA_VarianceReductionMethod_Random

    def __init__(self, *args):
        """
        __init__(SAGA self, unsigned long epoch_size, double tol, RandType rand_type, double step, int seed, SAGA::VarianceReductionMethod variance_reduction) -> SAGA
        __init__(SAGA self, unsigned long epoch_size, double tol, RandType rand_type, double step, int seed) -> SAGA
        """
        this = _solver.new_SAGA(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def solve(self) -> "void":
        """solve(SAGA self)"""
        return _solver.SAGA_solve(self)


    def set_step(self, step: 'double') -> "void":
        """set_step(SAGA self, double step)"""
        return _solver.SAGA_set_step(self, step)


    def get_variance_reduction(self) -> "SAGA::VarianceReductionMethod":
        """get_variance_reduction(SAGA self) -> SAGA::VarianceReductionMethod"""
        return _solver.SAGA_get_variance_reduction(self)


    def set_variance_reduction(self, variance_reduction: 'SAGA::VarianceReductionMethod') -> "void":
        """set_variance_reduction(SAGA self, SAGA::VarianceReductionMethod variance_reduction)"""
        return _solver.SAGA_set_variance_reduction(self, variance_reduction)

    __swig_destroy__ = _solver.delete_SAGA
    __del__ = lambda self: None
SAGA_swigregister = _solver.SAGA_swigregister
SAGA_swigregister(SAGA)

class SDCA(StoSolver):
    """Proxy of C++ SDCA class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SDCA self, double l_l2sq, unsigned long epoch_size=0, double tol=0., RandType rand_type, int seed=-1) -> SDCA
        __init__(SDCA self, double l_l2sq, unsigned long epoch_size=0, double tol=0., RandType rand_type) -> SDCA
        __init__(SDCA self, double l_l2sq, unsigned long epoch_size=0, double tol=0.) -> SDCA
        __init__(SDCA self, double l_l2sq, unsigned long epoch_size=0) -> SDCA
        __init__(SDCA self, double l_l2sq) -> SDCA
        """
        this = _solver.new_SDCA(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set_model(self, model: 'std::shared_ptr< Model >') -> "void":
        """set_model(SDCA self, std::shared_ptr< Model > model)"""
        return _solver.SDCA_set_model(self, model)


    def set_prox(self, prox: 'std::shared_ptr< Prox >') -> "void":
        """set_prox(SDCA self, std::shared_ptr< Prox > prox)"""
        return _solver.SDCA_set_prox(self, prox)


    def reset(self) -> "void":
        """reset(SDCA self)"""
        return _solver.SDCA_reset(self)


    def set_starting_iterate(self, *args) -> "void":
        """
        set_starting_iterate(SDCA self)
        set_starting_iterate(SDCA self, ArrayDouble & dual_vector)
        """
        return _solver.SDCA_set_starting_iterate(self, *args)


    def solve(self) -> "void":
        """solve(SDCA self)"""
        return _solver.SDCA_solve(self)


    def get_l_l2sq(self) -> "double":
        """get_l_l2sq(SDCA self) -> double"""
        return _solver.SDCA_get_l_l2sq(self)


    def set_l_l2sq(self, l_l2sq: 'double') -> "void":
        """set_l_l2sq(SDCA self, double l_l2sq)"""
        return _solver.SDCA_set_l_l2sq(self, l_l2sq)


    def get_primal_vector(self) -> "SArrayDoublePtr":
        """get_primal_vector(SDCA self) -> SArrayDoublePtr"""
        return _solver.SDCA_get_primal_vector(self)


    def get_dual_vector(self) -> "SArrayDoublePtr":
        """get_dual_vector(SDCA self) -> SArrayDoublePtr"""
        return _solver.SDCA_get_dual_vector(self)

    __swig_destroy__ = _solver.delete_SDCA
    __del__ = lambda self: None
SDCA_swigregister = _solver.SDCA_swigregister
SDCA_swigregister(SDCA)

class AdaGrad(StoSolver):
    """Proxy of C++ AdaGrad class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, epoch_size: 'unsigned long', tol: 'double', rand_type: 'RandType', step: 'double', seed: 'int'):
        """__init__(AdaGrad self, unsigned long epoch_size, double tol, RandType rand_type, double step, int seed) -> AdaGrad"""
        this = _solver.new_AdaGrad(epoch_size, tol, rand_type, step, seed)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def solve(self) -> "void":
        """solve(AdaGrad self)"""
        return _solver.AdaGrad_solve(self)

    __swig_destroy__ = _solver.delete_AdaGrad
    __del__ = lambda self: None
AdaGrad_swigregister = _solver.AdaGrad_swigregister
AdaGrad_swigregister(AdaGrad)



