# coding: utf-8

"""
    Flip API

    Description  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: cloudsupport@telestream.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CreateVideoBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'source_url': 'str',
        'profiles': 'str',
        'payload': 'str',
        'pipeline': 'str',
        'subtitle_files': 'list[str]'
    }

    attribute_map = {
        'source_url': 'source_url',
        'profiles': 'profiles',
        'payload': 'payload',
        'pipeline': 'pipeline',
        'subtitle_files': 'subtitle_files'
    }

    def __init__(self, source_url=None, profiles=None, payload=None, pipeline=None, subtitle_files=None):  # noqa: E501
        """CreateVideoBody - a model defined in Swagger"""  # noqa: E501

        self._source_url = None
        self._profiles = None
        self._payload = None
        self._pipeline = None
        self._subtitle_files = None
        self.discriminator = None

        if source_url is not None:
            self.source_url = source_url
        if profiles is not None:
            self.profiles = profiles
        if payload is not None:
            self.payload = payload
        if pipeline is not None:
            self.pipeline = pipeline
        if subtitle_files is not None:
            self.subtitle_files = subtitle_files

    @property
    def source_url(self):
        """Gets the source_url of this CreateVideoBody.  # noqa: E501

        An URL pointing to a source file.  # noqa: E501

        :return: The source_url of this CreateVideoBody.  # noqa: E501
        :rtype: str
        """
        return self._source_url

    @source_url.setter
    def source_url(self, source_url):
        """Sets the source_url of this CreateVideoBody.

        An URL pointing to a source file.  # noqa: E501

        :param source_url: The source_url of this CreateVideoBody.  # noqa: E501
        :type: str
        """

        self._source_url = source_url

    @property
    def profiles(self):
        """Gets the profiles of this CreateVideoBody.  # noqa: E501

        Comma-separated list of profile names or IDs to be used during encoding. Alternatively, specify none so no encodings are created yet.  # noqa: E501

        :return: The profiles of this CreateVideoBody.  # noqa: E501
        :rtype: str
        """
        return self._profiles

    @profiles.setter
    def profiles(self, profiles):
        """Sets the profiles of this CreateVideoBody.

        Comma-separated list of profile names or IDs to be used during encoding. Alternatively, specify none so no encodings are created yet.  # noqa: E501

        :param profiles: The profiles of this CreateVideoBody.  # noqa: E501
        :type: str
        """

        self._profiles = profiles

    @property
    def payload(self):
        """Gets the payload of this CreateVideoBody.  # noqa: E501

        Arbitrary string stored along the Video object.  # noqa: E501

        :return: The payload of this CreateVideoBody.  # noqa: E501
        :rtype: str
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """Sets the payload of this CreateVideoBody.

        Arbitrary string stored along the Video object.  # noqa: E501

        :param payload: The payload of this CreateVideoBody.  # noqa: E501
        :type: str
        """

        self._payload = payload

    @property
    def pipeline(self):
        """Gets the pipeline of this CreateVideoBody.  # noqa: E501

        String-encoded JSON describing profiles pipeline.  # noqa: E501

        :return: The pipeline of this CreateVideoBody.  # noqa: E501
        :rtype: str
        """
        return self._pipeline

    @pipeline.setter
    def pipeline(self, pipeline):
        """Sets the pipeline of this CreateVideoBody.

        String-encoded JSON describing profiles pipeline.  # noqa: E501

        :param pipeline: The pipeline of this CreateVideoBody.  # noqa: E501
        :type: str
        """

        self._pipeline = pipeline

    @property
    def subtitle_files(self):
        """Gets the subtitle_files of this CreateVideoBody.  # noqa: E501

        A list of urls pointing to remote subtitle files.  # noqa: E501

        :return: The subtitle_files of this CreateVideoBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._subtitle_files

    @subtitle_files.setter
    def subtitle_files(self, subtitle_files):
        """Sets the subtitle_files of this CreateVideoBody.

        A list of urls pointing to remote subtitle files.  # noqa: E501

        :param subtitle_files: The subtitle_files of this CreateVideoBody.  # noqa: E501
        :type: list[str]
        """

        self._subtitle_files = subtitle_files

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateVideoBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
