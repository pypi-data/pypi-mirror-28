//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2017 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _core.sip
//
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------

typedef wxRefCounter wxObjectRefData;

class wxRefCounter
{
    %Docstring
        RefCounter()
        
        This class is used to manage reference-counting providing a simple
        interface and a counter.
    %End
    %TypeHeaderCode
        #include <wx/object.h>
    %End

public:
    wxRefCounter()   /Transfer/;

    void DecRef();
    %Docstring
        DecRef()
        
        Decrements the reference count associated with this shared data and,
        if it reaches zero, destroys this instance of wxRefCounter releasing
        its memory.
    %End

    int GetRefCount() const;
    %Docstring
        GetRefCount() -> int
        
        Returns the reference count associated with this shared data.
    %End

    void IncRef();
    %Docstring
        IncRef()
        
        Increments the reference count associated with this shared data.
    %End

    private:
        wxRefCounter(const wxRefCounter&);


    public:


    %Property(name=RefCount, get=GetRefCount)

protected:
    virtual
    ~wxRefCounter();

};  // end of class wxRefCounter


class wxObject
{
    %Docstring
        Object()
        Object(other)
        
        This is the root class of many of the wxWidgets classes.
    %End
    %TypeHeaderCode
        #include <wx/object.h>
    %End

public:
    wxObject();

    wxObject(
        const wxObject & other
    );

    ~wxObject();

    wxObjectRefData * GetRefData() const;
    %Docstring
        GetRefData() -> ObjectRefData
        
        Returns the wxObject::m_refData pointer, i.e. the data referenced by
        this object.
    %End

    bool IsSameAs(
        const wxObject & obj
    ) const;
    %Docstring
        IsSameAs(obj) -> bool
        
        Returns true if this object has the same data pointer as obj.
    %End

    void Ref(
        const wxObject & clone
    );
    %Docstring
        Ref(clone)
        
        Makes this object refer to the data in clone.
    %End

    void SetRefData(
        wxObjectRefData * data
    );
    %Docstring
        SetRefData(data)
        
        Sets the wxObject::m_refData pointer.
    %End

    void UnRef();
    %Docstring
        UnRef()
        
        Decrements the reference count in the associated data, and if it is
        zero, deletes the data.
    %End

    void UnShare();
    %Docstring
        UnShare()
        
        This is the same of AllocExclusive() but this method is public.
    %End

    const wxChar* GetClassName();
    %Docstring
        GetClassName() -> Char
        
        Returns the class name of the C++ class using wxRTTI.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxObject_GetClassName(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    const wxChar* _wxObject_GetClassName(wxObject* self)
    {
        return self->GetClassInfo()->GetClassName();
    }
    %End

    void Destroy()   /TransferThis/;
    %Docstring
        Destroy()
        
        Deletes the C++ object this Python object is a proxy for.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        _wxObject_Destroy(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    void _wxObject_Destroy(wxObject* self)
    {
        delete self;
    }
    %End

        %ConvertToSubClassCode
            const wxClassInfo* info   = sipCpp->GetClassInfo();
            wxString           name   = info->GetClassName();
            bool               exists = sipFindType(name) != NULL;
            while (info && !exists) {
                info = info->GetBaseClass1();
                name = info->GetClassName();
                exists = sipFindType(name) != NULL;
            }
            if (info)
                sipType = sipFindType(name);
            else
                sipType = NULL;
        %End


    public:


    %Property(name=ClassName, get=GetClassName)
    %Property(name=RefData, get=GetRefData, set=SetRefData)
};  // end of class wxObject



//---------------------------------------------------------------------------

