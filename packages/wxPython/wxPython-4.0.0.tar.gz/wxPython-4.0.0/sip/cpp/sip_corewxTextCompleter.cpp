/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.7
 *
 *     Copyright: (c) 2017 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_core.h"

        #include <wx/textcompleter.h>



PyDoc_STRVAR(doc_wxTextCompleter_Start, "Start(prefix) -> bool\n"
"\n"
"Function called to start iteration over the completions for the given\n"
"prefix.");

extern "C" {static PyObject *meth_wxTextCompleter_Start(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxTextCompleter_Start(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::wxString* prefix;
        int prefixState = 0;
         ::wxTextCompleter *sipCpp;

        static const char *sipKwdList[] = {
            sipName_prefix,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxTextCompleter, &sipCpp, sipType_wxString,&prefix, &prefixState))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_TextCompleter, sipName_Start);
                return NULL;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->Start(*prefix);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(prefix),sipType_wxString,prefixState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TextCompleter, sipName_Start, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxTextCompleter_GetNext, "GetNext() -> String\n"
"\n"
"Called to retrieve the next completion.");

extern "C" {static PyObject *meth_wxTextCompleter_GetNext(PyObject *, PyObject *);}
static PyObject *meth_wxTextCompleter_GetNext(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::wxTextCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxTextCompleter, &sipCpp))
        {
             ::wxString*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_TextCompleter, sipName_GetNext);
                return NULL;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxString(sipCpp->GetNext());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TextCompleter, sipName_GetNext, NULL);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxTextCompleter(void *, int);}
static void release_wxTextCompleter(void *sipCppV, int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast< ::wxTextCompleter *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_wxTextCompleter(sipSimpleWrapper *);}
static void dealloc_wxTextCompleter(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxTextCompleter(sipGetAddress(sipSelf), 0);
    }
}


static PyMethodDef methods_wxTextCompleter[] = {
    {SIP_MLNAME_CAST(sipName_GetNext), meth_wxTextCompleter_GetNext, METH_VARARGS, SIP_MLDOC_CAST(doc_wxTextCompleter_GetNext)},
    {SIP_MLNAME_CAST(sipName_Start), (PyCFunction)meth_wxTextCompleter_Start, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxTextCompleter_Start)}
};

sipVariableDef variables_wxTextCompleter[] = {
    {PropertyVariable, sipName_Next, &methods_wxTextCompleter[0], NULL, NULL, NULL},
};

PyDoc_STRVAR(doc_wxTextCompleter, "Base class for custom text completer objects.");


sipClassTypeDef sipTypeDef__core_wxTextCompleter = {
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_CLASS,
        sipNameNr_wxTextCompleter,
        {0},
        0
    },
    {
        sipNameNr_TextCompleter,
        {0, 0, 1},
        2, methods_wxTextCompleter,
        0, 0,
        1, variables_wxTextCompleter,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_wxTextCompleter,
    -1,
    -1,
    0,
    0,
    0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_wxTextCompleter,
    0,
    0,
    0,
    release_wxTextCompleter,
    0,
    0,
    0,
    0,
    0,
    0,
    0
};
