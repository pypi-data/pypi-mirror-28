
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDEleftANDORleftCOMMAPERIODleftCOLONleftSEMICOLONrightUMINUSNAME COLON SEMICOLON COMMA PERIOD OR AND FLOAT INT STRING PLUS MINUS TIMES DIVIDE EQUALS ASSIGN LPAREN RPAREN LBRACKET RBRACKET LQBRACKET RQBRACKETstatement : expression EQUALS expressionstatement : NAME ASSIGN expressionstatement : expressionexpression : accessor queryexpression : NAME LPAREN expression RPARENexpression : LPAREN expression RPAREN\n    expression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n    expression : MINUS expression %prec UMINUS\n    expression : FLOAT\n               | INT\n               | STRING\n    \n    expression : list\n               | dict\n               | querychain\n               | query\n    \n    expression : accessor\n    expression : NAMEdict : NAME COLON expressiondict : dict COMMA dictlist : expression COMMA expressionaccessor : expression PERIOD expression\n                | expression LBRACKET expression RBRACKET\n    querychain : dict OR dictquerychain : querychain OR dict\n    querychain : querychain OR querychainquery : LQBRACKET expression RQBRACKET\n    query : LQBRACKET dict RQBRACKET\n    '
    
_lr_action_items = {'NAME':([0,6,7,14,15,16,17,18,19,20,21,22,23,24,25,30,31,32,],[3,28,28,28,28,28,28,28,28,28,28,28,28,28,28,48,48,48,]),'LPAREN':([0,3,6,7,14,15,16,17,18,19,20,21,22,23,24,25,28,],[6,24,6,6,6,6,6,6,6,6,6,6,6,6,6,6,24,]),'MINUS':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,50,51,52,53,54,55,],[7,17,-20,-19,-18,7,7,-12,-13,-14,-15,-16,-17,7,7,7,7,7,7,7,7,7,7,7,7,-4,17,-20,-11,17,-16,17,-7,-8,-9,-10,-24,17,-23,17,17,-21,-6,-22,-26,-28,-27,-29,-30,-25,-5,]),'FLOAT':([0,6,7,14,15,16,17,18,19,20,21,22,23,24,25,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'INT':([0,6,7,14,15,16,17,18,19,20,21,22,23,24,25,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'STRING':([0,6,7,14,15,16,17,18,19,20,21,22,23,24,25,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'LQBRACKET':([0,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,28,29,36,37,38,39,40,42,45,46,47,49,50,51,52,53,54,55,],[14,14,-18,14,14,-12,-13,-14,-15,-16,-17,14,14,14,14,14,14,14,14,14,14,14,14,-4,-20,-11,-7,-8,-9,-10,-24,-23,-21,-6,-22,-26,-28,-27,-29,-30,-25,-5,]),'$end':([1,2,3,4,5,8,9,10,11,12,13,26,28,29,35,36,37,38,39,40,42,43,45,46,47,49,50,51,52,53,54,55,],[0,-3,-20,-19,-18,-12,-13,-14,-15,-16,-17,-4,-20,-11,-1,-7,-8,-9,-10,-24,-23,-2,-21,-6,-22,-26,-28,-27,-29,-30,-25,-5,]),'EQUALS':([2,3,4,5,8,9,10,11,12,13,26,28,29,36,37,38,39,40,42,45,46,47,49,50,51,52,53,54,55,],[15,-20,-19,-18,-12,-13,-14,-15,-16,-17,-4,-20,-11,-7,-8,-9,-10,-24,-23,-21,-6,-22,-26,-28,-27,-29,-30,-25,-5,]),'PLUS':([2,3,4,5,8,9,10,11,12,13,26,27,28,29,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,50,51,52,53,54,55,],[16,-20,-19,-18,-12,-13,-14,-15,-16,-17,-4,16,-20,-11,16,-16,16,-7,-8,-9,-10,-24,16,-23,16,16,-21,-6,-22,-26,-28,-27,-29,-30,-25,-5,]),'TIMES':([2,3,4,5,8,9,10,11,12,13,26,27,28,29,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,50,51,52,53,54,55,],[18,-20,-19,-18,-12,-13,-14,-15,-16,-17,-4,18,-20,-11,18,-16,18,18,18,-9,-10,-24,18,-23,18,18,-21,-6,-22,-26,-28,-27,-29,-30,-25,-5,]),'DIVIDE':([2,3,4,5,8,9,10,11,12,13,26,27,28,29,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,50,51,52,53,54,55,],[19,-20,-19,-18,-12,-13,-14,-15,-16,-17,-4,19,-20,-11,19,-16,19,19,19,-9,-10,-24,19,-23,19,19,-21,-6,-22,-26,-28,-27,-29,-30,-25,-5,]),'PERIOD':([2,3,4,5,8,9,10,11,12,13,26,27,28,29,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,50,51,52,53,54,55,],[20,-20,-19,-18,-12,-13,-14,-15,-16,-17,-4,20,-20,-11,20,-16,20,20,20,20,20,-24,20,-23,20,20,-21,-6,-22,-26,-28,-27,-29,-30,-25,-5,]),'LBRACKET':([2,3,4,5,8,9,10,11,12,13,26,27,28,29,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,50,51,52,53,54,55,],[21,-20,-19,-18,-12,-13,-14,-15,-16,-17,-4,21,-20,-11,21,-16,21,-7,-8,-9,-10,-24,21,-23,21,21,-21,-6,-22,-26,-28,-27,-29,-30,-25,-5,]),'COMMA':([2,3,4,5,8,9,10,11,12,13,26,27,28,29,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,50,51,52,53,54,55,],[22,-20,-19,-18,-12,-13,-14,-15,30,-17,-4,22,-20,-11,22,30,22,22,22,22,22,-24,22,-23,22,22,-21,-6,-22,30,-28,30,-29,-30,-25,-5,]),'ASSIGN':([3,],[23,]),'COLON':([3,28,48,],[25,25,25,]),'RPAREN':([4,5,8,9,10,11,12,13,26,27,28,29,36,37,38,39,40,42,44,45,46,47,49,50,51,52,53,54,55,],[-19,-18,-12,-13,-14,-15,-16,-17,-4,46,-20,-11,-7,-8,-9,-10,-24,-23,55,-21,-6,-22,-26,-28,-27,-29,-30,-25,-5,]),'RQBRACKET':([4,5,8,9,10,11,12,13,26,28,29,33,34,36,37,38,39,40,42,45,46,47,49,50,51,52,53,54,55,],[-19,-18,-12,-13,-14,-15,-16,-17,-4,-20,-11,52,53,-7,-8,-9,-10,-24,-23,-21,-6,-22,-26,-28,-27,-29,-30,-25,-5,]),'RBRACKET':([4,5,8,9,10,11,12,13,26,28,29,36,37,38,39,40,41,42,45,46,47,49,50,51,52,53,54,55,],[-19,-18,-12,-13,-14,-15,-16,-17,-4,-20,-11,-7,-8,-9,-10,-24,54,-23,-21,-6,-22,-26,-28,-27,-29,-30,-25,-5,]),'OR':([4,5,8,9,10,11,12,13,26,28,29,34,36,37,38,39,40,42,45,46,47,49,50,51,52,53,54,55,],[-19,-18,-12,-13,-14,-15,31,32,-4,-20,-11,31,-7,-8,-9,-10,-24,-23,-21,-6,-22,-26,-28,-27,-29,-30,-25,-5,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,],[1,]),'expression':([0,6,7,14,15,16,17,18,19,20,21,22,23,24,25,],[2,27,29,33,35,36,37,38,39,40,41,42,43,44,45,]),'accessor':([0,6,7,14,15,16,17,18,19,20,21,22,23,24,25,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'query':([0,4,6,7,14,15,16,17,18,19,20,21,22,23,24,25,],[5,26,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'list':([0,6,7,14,15,16,17,18,19,20,21,22,23,24,25,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'dict':([0,6,7,14,15,16,17,18,19,20,21,22,23,24,25,30,31,32,],[12,12,12,34,12,12,12,12,12,12,12,12,12,12,12,47,49,51,]),'querychain':([0,6,7,14,15,16,17,18,19,20,21,22,23,24,25,32,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,50,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> expression EQUALS expression','statement',3,'p_statement_equals','parser.py',26),
  ('statement -> NAME ASSIGN expression','statement',3,'p_statement_assign','parser.py',31),
  ('statement -> expression','statement',1,'p_statement_expr','parser.py',36),
  ('expression -> accessor query','expression',2,'p_expression_query_filter','parser.py',47),
  ('expression -> NAME LPAREN expression RPAREN','expression',4,'p_expression_func','parser.py',53),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','parser.py',59),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','parser.py',65),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','parser.py',66),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','parser.py',67),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','parser.py',68),
  ('expression -> MINUS expression','expression',2,'p_expression_uminus','parser.py',81),
  ('expression -> FLOAT','expression',1,'p_expression_vars','parser.py',87),
  ('expression -> INT','expression',1,'p_expression_vars','parser.py',88),
  ('expression -> STRING','expression',1,'p_expression_vars','parser.py',89),
  ('expression -> list','expression',1,'p_expression_list','parser.py',96),
  ('expression -> dict','expression',1,'p_expression_list','parser.py',97),
  ('expression -> querychain','expression',1,'p_expression_list','parser.py',98),
  ('expression -> query','expression',1,'p_expression_list','parser.py',99),
  ('expression -> accessor','expression',1,'p_expression_accessor','parser.py',106),
  ('expression -> NAME','expression',1,'p_expression_name','parser.py',112),
  ('dict -> NAME COLON expression','dict',3,'p_dict','parser.py',121),
  ('dict -> dict COMMA dict','dict',3,'p_dict_chain','parser.py',127),
  ('list -> expression COMMA expression','list',3,'p_list','parser.py',133),
  ('accessor -> expression PERIOD expression','accessor',3,'p_accessor','parser.py',145),
  ('accessor -> expression LBRACKET expression RBRACKET','accessor',4,'p_accessor','parser.py',146),
  ('querychain -> dict OR dict','querychain',3,'p_querychain','parser.py',163),
  ('querychain -> querychain OR dict','querychain',3,'p_querychain_or_dict','parser.py',168),
  ('querychain -> querychain OR querychain','querychain',3,'p_querychain_or_querychain','parser.py',174),
  ('query -> LQBRACKET expression RQBRACKET','query',3,'p_query','parser.py',179),
  ('query -> LQBRACKET dict RQBRACKET','query',3,'p_query_dict','parser.py',185),
]
