<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>tests.test_graph</title>
    <link rel="stylesheet" href="../../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../../_static/pygments.css" type="text/css" /> 
  </head>
  <body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <h1>Source code for tests.test_graph</h1><div class="highlight"><pre>
<span></span><span class="kn">from</span> <span class="nn">unittest</span> <span class="k">import</span> <span class="n">TestCase</span>

<span class="kn">from</span> <span class="nn">challenges</span> <span class="k">import</span> <span class="n">Graph</span><span class="p">,</span> <span class="n">Node</span><span class="p">,</span> <span class="n">Edge</span>


<div class="viewcode-block" id="TestNode"><a class="viewcode-back" href="../../tests.xhtml#tests.test_graph.TestNode">[docs]</a><span class="k">class</span> <span class="nc">TestNode</span><span class="p">(</span><span class="n">TestCase</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Test units of Node.&quot;&quot;&quot;</span>

<div class="viewcode-block" id="TestNode.setUp"><a class="viewcode-back" href="../../tests.xhtml#tests.test_graph.TestNode.setUp">[docs]</a>    <span class="k">def</span> <span class="nf">setUp</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">node</span> <span class="o">=</span> <span class="n">Node</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span></div>

<div class="viewcode-block" id="TestNode.test_node_constructor"><a class="viewcode-back" href="../../tests.xhtml#tests.test_graph.TestNode.test_node_constructor">[docs]</a>    <span class="k">def</span> <span class="nf">test_node_constructor</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertEqual</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">node</span><span class="o">.</span><span class="n">_id</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span></div>

<div class="viewcode-block" id="TestNode.test_node_property_access"><a class="viewcode-back" href="../../tests.xhtml#tests.test_graph.TestNode.test_node_property_access">[docs]</a>    <span class="k">def</span> <span class="nf">test_node_property_access</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertEqual</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">node</span><span class="o">.</span><span class="n">id</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">node</span><span class="o">.</span><span class="n">any</span> <span class="o">=</span> <span class="mi">5</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertEqual</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">node</span><span class="o">.</span><span class="n">any</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span></div>

<div class="viewcode-block" id="TestNode.test_add_edge_to_node"><a class="viewcode-back" href="../../tests.xhtml#tests.test_graph.TestNode.test_add_edge_to_node">[docs]</a>    <span class="k">def</span> <span class="nf">test_add_edge_to_node</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">tail</span> <span class="o">=</span> <span class="n">Node</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
        <span class="n">head</span> <span class="o">=</span> <span class="n">Node</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
        <span class="n">edge</span> <span class="o">=</span> <span class="n">Edge</span><span class="p">(</span><span class="n">tail</span><span class="p">,</span> <span class="n">head</span><span class="p">)</span>
        <span class="n">tail</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="n">edge</span><span class="p">)</span>
        <span class="n">head</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="n">edge</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertIn</span><span class="p">(</span><span class="n">edge</span><span class="p">,</span> <span class="n">tail</span><span class="o">.</span><span class="n">outgoing</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertIn</span><span class="p">(</span><span class="n">edge</span><span class="p">,</span> <span class="n">head</span><span class="o">.</span><span class="n">incoming</span><span class="p">)</span></div>

<div class="viewcode-block" id="TestNode.test_antecessors"><a class="viewcode-back" href="../../tests.xhtml#tests.test_graph.TestNode.test_antecessors">[docs]</a>    <span class="k">def</span> <span class="nf">test_antecessors</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">n1</span><span class="p">,</span> <span class="n">n3</span> <span class="o">=</span> <span class="n">Node</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="n">Node</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">node</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="n">Edge</span><span class="p">(</span><span class="n">n1</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">node</span><span class="p">))</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">node</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="n">Edge</span><span class="p">(</span><span class="n">n3</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">node</span><span class="p">))</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertIn</span><span class="p">(</span><span class="n">n1</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">node</span><span class="o">.</span><span class="n">antecessors</span><span class="p">())</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertIn</span><span class="p">(</span><span class="n">n3</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">node</span><span class="o">.</span><span class="n">antecessors</span><span class="p">())</span></div>

<div class="viewcode-block" id="TestNode.test_successors"><a class="viewcode-back" href="../../tests.xhtml#tests.test_graph.TestNode.test_successors">[docs]</a>    <span class="k">def</span> <span class="nf">test_successors</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">n1</span><span class="p">,</span> <span class="n">n3</span> <span class="o">=</span> <span class="n">Node</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="n">Node</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">node</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="n">Edge</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">node</span><span class="p">,</span> <span class="n">n1</span><span class="p">))</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">node</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="n">Edge</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">node</span><span class="p">,</span> <span class="n">n3</span><span class="p">))</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertIn</span><span class="p">(</span><span class="n">n1</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">node</span><span class="o">.</span><span class="n">successors</span><span class="p">())</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertIn</span><span class="p">(</span><span class="n">n3</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">node</span><span class="o">.</span><span class="n">successors</span><span class="p">())</span></div></div>


<div class="viewcode-block" id="TestEdge"><a class="viewcode-back" href="../../tests.xhtml#tests.test_graph.TestEdge">[docs]</a><span class="k">class</span> <span class="nc">TestEdge</span><span class="p">(</span><span class="n">TestCase</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Test units of Node.&quot;&quot;&quot;</span>

<div class="viewcode-block" id="TestEdge.setUp"><a class="viewcode-back" href="../../tests.xhtml#tests.test_graph.TestEdge.setUp">[docs]</a>    <span class="k">def</span> <span class="nf">setUp</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">tail</span> <span class="o">=</span> <span class="n">Node</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">head</span> <span class="o">=</span> <span class="n">Node</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">edge</span> <span class="o">=</span> <span class="n">Edge</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">tail</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">head</span><span class="p">)</span></div>

<div class="viewcode-block" id="TestEdge.test_edge_constructor"><a class="viewcode-back" href="../../tests.xhtml#tests.test_graph.TestEdge.test_edge_constructor">[docs]</a>    <span class="k">def</span> <span class="nf">test_edge_constructor</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertIs</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">edge</span><span class="o">.</span><span class="n">_tail</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">tail</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertIs</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">edge</span><span class="o">.</span><span class="n">_head</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">head</span><span class="p">)</span></div>

<div class="viewcode-block" id="TestEdge.test_edge_property_access"><a class="viewcode-back" href="../../tests.xhtml#tests.test_graph.TestEdge.test_edge_property_access">[docs]</a>    <span class="k">def</span> <span class="nf">test_edge_property_access</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertIs</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">edge</span><span class="o">.</span><span class="n">tail</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">tail</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertIs</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">edge</span><span class="o">.</span><span class="n">head</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">head</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">edge</span><span class="o">.</span><span class="n">any</span> <span class="o">=</span> <span class="mi">5</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertEqual</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">edge</span><span class="o">.</span><span class="n">any</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span></div></div>


<div class="viewcode-block" id="TestGraph"><a class="viewcode-back" href="../../tests.xhtml#tests.test_graph.TestGraph">[docs]</a><span class="k">class</span> <span class="nc">TestGraph</span><span class="p">(</span><span class="n">TestCase</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Test units of Graph.&quot;&quot;&quot;</span>

<div class="viewcode-block" id="TestGraph.setUp"><a class="viewcode-back" href="../../tests.xhtml#tests.test_graph.TestGraph.setUp">[docs]</a>    <span class="k">def</span> <span class="nf">setUp</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">graph</span> <span class="o">=</span> <span class="n">Graph</span><span class="p">()</span></div>

<div class="viewcode-block" id="TestGraph.test_graph_constructor"><a class="viewcode-back" href="../../tests.xhtml#tests.test_graph.TestGraph.test_graph_constructor">[docs]</a>    <span class="k">def</span> <span class="nf">test_graph_constructor</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertIsInstance</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">graph</span><span class="p">,</span> <span class="n">Graph</span><span class="p">)</span></div>

<div class="viewcode-block" id="TestGraph.test_create_node"><a class="viewcode-back" href="../../tests.xhtml#tests.test_graph.TestGraph.test_create_node">[docs]</a>    <span class="k">def</span> <span class="nf">test_create_node</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">node</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">graph</span><span class="o">.</span><span class="n">create_node</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertIsInstance</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">Node</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertEqual</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">id</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertIs</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">graph</span><span class="o">.</span><span class="n">_nodes</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="n">node</span><span class="p">)</span></div>

<div class="viewcode-block" id="TestGraph.test_create_existing_node_returns_existing_node"><a class="viewcode-back" href="../../tests.xhtml#tests.test_graph.TestGraph.test_create_existing_node_returns_existing_node">[docs]</a>    <span class="k">def</span> <span class="nf">test_create_existing_node_returns_existing_node</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">node1</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">graph</span><span class="o">.</span><span class="n">create_node</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
        <span class="n">node2</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">graph</span><span class="o">.</span><span class="n">create_node</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertIs</span><span class="p">(</span><span class="n">node1</span><span class="p">,</span> <span class="n">node2</span><span class="p">)</span></div>

<div class="viewcode-block" id="TestGraph.test_create_edge"><a class="viewcode-back" href="../../tests.xhtml#tests.test_graph.TestGraph.test_create_edge">[docs]</a>    <span class="k">def</span> <span class="nf">test_create_edge</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">edge</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">graph</span><span class="o">.</span><span class="n">create_edge</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertEqual</span><span class="p">(</span><span class="n">edge</span><span class="o">.</span><span class="n">tail</span><span class="o">.</span><span class="n">id</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertEqual</span><span class="p">(</span><span class="n">edge</span><span class="o">.</span><span class="n">head</span><span class="o">.</span><span class="n">id</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertIn</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">graph</span><span class="o">.</span><span class="n">_nodes</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertIn</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">graph</span><span class="o">.</span><span class="n">_nodes</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertIn</span><span class="p">(</span><span class="n">edge</span><span class="p">,</span> <span class="n">edge</span><span class="o">.</span><span class="n">tail</span><span class="o">.</span><span class="n">outgoing</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertIn</span><span class="p">(</span><span class="n">edge</span><span class="p">,</span> <span class="n">edge</span><span class="o">.</span><span class="n">head</span><span class="o">.</span><span class="n">incoming</span><span class="p">)</span></div>

<div class="viewcode-block" id="TestGraph.test_create_edge_from_nodes"><a class="viewcode-back" href="../../tests.xhtml#tests.test_graph.TestGraph.test_create_edge_from_nodes">[docs]</a>    <span class="k">def</span> <span class="nf">test_create_edge_from_nodes</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">node1</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">graph</span><span class="o">.</span><span class="n">create_node</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
        <span class="n">node2</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">graph</span><span class="o">.</span><span class="n">create_node</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
        <span class="n">edge</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">graph</span><span class="o">.</span><span class="n">create_edge</span><span class="p">(</span><span class="n">node1</span><span class="p">,</span> <span class="n">node2</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertIs</span><span class="p">(</span><span class="n">node1</span><span class="p">,</span> <span class="n">edge</span><span class="o">.</span><span class="n">tail</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertIs</span><span class="p">(</span><span class="n">node2</span><span class="p">,</span> <span class="n">edge</span><span class="o">.</span><span class="n">head</span><span class="p">)</span></div>

<div class="viewcode-block" id="TestGraph.test_get_node"><a class="viewcode-back" href="../../tests.xhtml#tests.test_graph.TestGraph.test_get_node">[docs]</a>    <span class="k">def</span> <span class="nf">test_get_node</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">node</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">graph</span><span class="o">.</span><span class="n">create_node</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertIs</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">graph</span><span class="o">.</span><span class="n">node</span><span class="p">(</span><span class="mi">3</span><span class="p">),</span> <span class="n">node</span><span class="p">)</span></div>

<div class="viewcode-block" id="TestGraph.test_nodes_are_returned_in_order"><a class="viewcode-back" href="../../tests.xhtml#tests.test_graph.TestGraph.test_nodes_are_returned_in_order">[docs]</a>    <span class="k">def</span> <span class="nf">test_nodes_are_returned_in_order</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">node2</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">graph</span><span class="o">.</span><span class="n">create_node</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
        <span class="n">node3</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">graph</span><span class="o">.</span><span class="n">create_node</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
        <span class="n">node1</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">graph</span><span class="o">.</span><span class="n">create_node</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
        <span class="n">nodes</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">graph</span><span class="o">.</span><span class="n">nodes</span><span class="p">()</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertEqual</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">nodes</span><span class="p">))</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertIs</span><span class="p">(</span><span class="n">nodes</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">node1</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertIs</span><span class="p">(</span><span class="n">nodes</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">node2</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertIs</span><span class="p">(</span><span class="n">nodes</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="n">node3</span><span class="p">)</span></div>

<div class="viewcode-block" id="TestGraph.test_keys_are_returned_ordered"><a class="viewcode-back" href="../../tests.xhtml#tests.test_graph.TestGraph.test_keys_are_returned_ordered">[docs]</a>    <span class="k">def</span> <span class="nf">test_keys_are_returned_ordered</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">graph</span><span class="o">.</span><span class="n">create_node</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">graph</span><span class="o">.</span><span class="n">create_node</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">graph</span><span class="o">.</span><span class="n">create_node</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertEqual</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">graph</span><span class="o">.</span><span class="n">keys</span><span class="p">(),</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">8</span><span class="p">])</span></div>

<div class="viewcode-block" id="TestGraph.test_count_of_nodes"><a class="viewcode-back" href="../../tests.xhtml#tests.test_graph.TestGraph.test_count_of_nodes">[docs]</a>    <span class="k">def</span> <span class="nf">test_count_of_nodes</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">graph</span><span class="o">.</span><span class="n">create_node</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">graph</span><span class="o">.</span><span class="n">create_node</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertEqual</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">graph</span><span class="o">.</span><span class="n">count</span><span class="p">())</span></div></div>


</pre></div>

          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>