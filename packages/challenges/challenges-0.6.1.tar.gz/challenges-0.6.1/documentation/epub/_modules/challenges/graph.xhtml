<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>challenges.graph</title>
    <link rel="stylesheet" href="../../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../../_static/pygments.css" type="text/css" /> 
  </head>
  <body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <h1>Source code for challenges.graph</h1><div class="highlight"><pre>
<span></span><span class="c1"># noinspection PyShadowingBuiltins</span>
<div class="viewcode-block" id="Node"><a class="viewcode-back" href="../../challenges.xhtml#challenges.graph.Node">[docs]</a><span class="k">class</span> <span class="nc">Node</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="nb">id</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot; Create a node.</span>

<span class="sd">        Not for direct usage. To create node and edges use:</span>

<span class="sd">            * Graph.create_node()</span>
<span class="sd">            * Graph.create_edge()</span>
<span class="sd">        &quot;&quot;&quot;</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_id</span> <span class="o">=</span> <span class="nb">id</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_incoming</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_outgoing</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="nd">@property</span>
    <span class="k">def</span> <span class="nf">id</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot; Return the nodes id.&quot;&quot;&quot;</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_id</span>

    <span class="nd">@property</span>
    <span class="k">def</span> <span class="nf">incoming</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot; Return the incoming EDGES of the node. &quot;&quot;&quot;</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_incoming</span>

    <span class="nd">@property</span>
    <span class="k">def</span> <span class="nf">outgoing</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot; Return the outgoing EDGES of the node. &quot;&quot;&quot;</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_outgoing</span>

<div class="viewcode-block" id="Node.add_edge"><a class="viewcode-back" href="../../challenges.xhtml#challenges.graph.Node.add_edge">[docs]</a>    <span class="k">def</span> <span class="nf">add_edge</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">edge</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot; Add an edge to the node.</span>

<span class="sd">        Not for direct usage. To create node and edges use:</span>

<span class="sd">            * Graph.create_node()</span>
<span class="sd">            * Graph.create_edge()</span>
<span class="sd">        &quot;&quot;&quot;</span>
        <span class="k">if</span> <span class="bp">self</span> <span class="ow">is</span> <span class="n">edge</span><span class="o">.</span><span class="n">head</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">_incoming</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">edge</span><span class="p">)</span>
        <span class="k">elif</span> <span class="bp">self</span> <span class="ow">is</span> <span class="n">edge</span><span class="o">.</span><span class="n">tail</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">_outgoing</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">edge</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span>
                <span class="s1">&#39;The node is neither head nor tail of the edge.&#39;</span>
            <span class="p">)</span></div>

<div class="viewcode-block" id="Node.antecessors"><a class="viewcode-back" href="../../challenges.xhtml#challenges.graph.Node.antecessors">[docs]</a>    <span class="k">def</span> <span class="nf">antecessors</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot; Return the incoming NODES of the node.</span>

<span class="sd">        The tail nodes of all incoming edges.</span>
<span class="sd">        &quot;&quot;&quot;</span>
        <span class="k">return</span> <span class="p">(</span><span class="n">edge</span><span class="o">.</span><span class="n">tail</span> <span class="k">for</span> <span class="n">edge</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">incoming</span><span class="p">)</span></div>

<div class="viewcode-block" id="Node.successors"><a class="viewcode-back" href="../../challenges.xhtml#challenges.graph.Node.successors">[docs]</a>    <span class="k">def</span> <span class="nf">successors</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot; Return the outgoing NODES of the node.</span>

<span class="sd">        The head nodes of all outgoing edges.</span>
<span class="sd">        &quot;&quot;&quot;</span>
        <span class="k">return</span> <span class="p">(</span><span class="n">edge</span><span class="o">.</span><span class="n">head</span> <span class="k">for</span> <span class="n">edge</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">outgoing</span><span class="p">)</span></div>

    <span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot; Return a human readable string representation of the node. &quot;&quot;&quot;</span>
        <span class="n">pre</span> <span class="o">=</span> <span class="nb">str</span><span class="p">([</span><span class="n">edge</span><span class="o">.</span><span class="n">tail</span><span class="o">.</span><span class="n">id</span> <span class="k">for</span> <span class="n">edge</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">incoming</span><span class="p">])</span>
        <span class="n">post</span> <span class="o">=</span> <span class="nb">str</span><span class="p">([</span><span class="n">edge</span><span class="o">.</span><span class="n">head</span><span class="o">.</span><span class="n">id</span> <span class="k">for</span> <span class="n">edge</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">outgoing</span><span class="p">])</span>
        <span class="k">return</span> <span class="s1">&#39;</span><span class="si">{}</span><span class="s1">-&gt;(</span><span class="si">{}</span><span class="s1">)-&gt;</span><span class="si">{}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">pre</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">id</span><span class="p">,</span> <span class="n">post</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">__repr__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot; Return a human readable string representation of the node. &quot;&quot;&quot;</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="fm">__str__</span><span class="p">()</span></div>


<div class="viewcode-block" id="Edge"><a class="viewcode-back" href="../../challenges.xhtml#challenges.graph.Edge">[docs]</a><span class="k">class</span> <span class="nc">Edge</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">tail</span><span class="p">,</span> <span class="n">head</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot; Create an edge.</span>

<span class="sd">        Not for direct usage. To create node and edges use:</span>

<span class="sd">            * Graph.create_node()</span>
<span class="sd">            * Graph.create_edge()</span>
<span class="sd">        &quot;&quot;&quot;</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_tail</span> <span class="o">=</span> <span class="n">tail</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_head</span> <span class="o">=</span> <span class="n">head</span>

    <span class="nd">@property</span>
    <span class="k">def</span> <span class="nf">tail</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot; Return the tail node. &quot;&quot;&quot;</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_tail</span>

    <span class="nd">@property</span>
    <span class="k">def</span> <span class="nf">head</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot; Return the head node. &quot;&quot;&quot;</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_head</span>

    <span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot; Return a human readable string representation of the edge. &quot;&quot;&quot;</span>
        <span class="k">return</span> <span class="s1">&#39;(</span><span class="si">{}</span><span class="s1">)-&gt;(</span><span class="si">{}</span><span class="s1">)&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">tail</span><span class="o">.</span><span class="n">id</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">head</span><span class="o">.</span><span class="n">id</span><span class="p">)</span></div>


<span class="c1"># noinspection PyShadowingBuiltins</span>
<div class="viewcode-block" id="Graph"><a class="viewcode-back" href="../../challenges.xhtml#challenges.graph.Graph">[docs]</a><span class="k">class</span> <span class="nc">Graph</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_nodes</span> <span class="o">=</span> <span class="p">{}</span>

<div class="viewcode-block" id="Graph.create_node"><a class="viewcode-back" href="../../challenges.xhtml#challenges.graph.Graph.create_node">[docs]</a>    <span class="k">def</span> <span class="nf">create_node</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="nb">id</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;Add a standalone node to the graph and return it.</span>

<span class="sd">        If a node of this id already exists, it is just returned.</span>
<span class="sd">        &quot;&quot;&quot;</span>
        <span class="k">if</span> <span class="nb">id</span> <span class="ow">not</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">_nodes</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">_nodes</span><span class="p">[</span><span class="nb">id</span><span class="p">]</span> <span class="o">=</span> <span class="n">Node</span><span class="p">(</span><span class="nb">id</span><span class="p">)</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_nodes</span><span class="p">[</span><span class="nb">id</span><span class="p">]</span></div>

<div class="viewcode-block" id="Graph.create_edge"><a class="viewcode-back" href="../../challenges.xhtml#challenges.graph.Graph.create_edge">[docs]</a>    <span class="k">def</span> <span class="nf">create_edge</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">tail</span><span class="p">,</span> <span class="n">head</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;Add an edge and return it.</span>

<span class="sd">        Create nodes as necessary.</span>

<span class="sd">        :tail: Node or id of node</span>
<span class="sd">        :head: Node or id of node</span>
<span class="sd">        &quot;&quot;&quot;</span>
        <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">tail</span><span class="p">,</span> <span class="n">Node</span><span class="p">):</span>
            <span class="n">tail_node</span> <span class="o">=</span> <span class="n">tail</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">tail_node</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">create_node</span><span class="p">(</span><span class="n">tail</span><span class="p">)</span>
        <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">head</span><span class="p">,</span> <span class="n">Node</span><span class="p">):</span>
            <span class="n">head_node</span> <span class="o">=</span> <span class="n">head</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">head_node</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">create_node</span><span class="p">(</span><span class="n">head</span><span class="p">)</span>
        <span class="n">edge</span> <span class="o">=</span> <span class="n">Edge</span><span class="p">(</span><span class="n">tail_node</span><span class="p">,</span> <span class="n">head_node</span><span class="p">)</span>
        <span class="n">tail_node</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="n">edge</span><span class="p">)</span>
        <span class="n">head_node</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="n">edge</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">edge</span></div>

<div class="viewcode-block" id="Graph.node"><a class="viewcode-back" href="../../challenges.xhtml#challenges.graph.Graph.node">[docs]</a>    <span class="k">def</span> <span class="nf">node</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="nb">id</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;Return a node by id.&quot;&quot;&quot;</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_nodes</span><span class="p">[</span><span class="nb">id</span><span class="p">]</span></div>

<div class="viewcode-block" id="Graph.nodes"><a class="viewcode-back" href="../../challenges.xhtml#challenges.graph.Graph.nodes">[docs]</a>    <span class="k">def</span> <span class="nf">nodes</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;Return all nodes sorted by node id.&quot;&quot;&quot;</span>
        <span class="k">return</span> <span class="nb">list</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">_nodes</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="k">for</span> <span class="n">key</span> <span class="ow">in</span> <span class="nb">sorted</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">_nodes</span><span class="p">))</span></div>

<div class="viewcode-block" id="Graph.keys"><a class="viewcode-back" href="../../challenges.xhtml#challenges.graph.Graph.keys">[docs]</a>    <span class="k">def</span> <span class="nf">keys</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;Return keys of nodes in sorted order.&quot;&quot;&quot;</span>
        <span class="k">return</span> <span class="nb">sorted</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">_nodes</span><span class="p">)</span></div>

<div class="viewcode-block" id="Graph.count"><a class="viewcode-back" href="../../challenges.xhtml#challenges.graph.Graph.count">[docs]</a>    <span class="k">def</span> <span class="nf">count</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;Return count of nodes.&quot;&quot;&quot;</span>
        <span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">_nodes</span><span class="p">)</span></div></div>
</pre></div>

          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>