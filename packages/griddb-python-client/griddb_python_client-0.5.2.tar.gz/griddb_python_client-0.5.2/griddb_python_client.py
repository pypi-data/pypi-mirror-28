# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_griddb_python_client')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_griddb_python_client')
    _griddb_python_client = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_griddb_python_client', [dirname(__file__)])
        except ImportError:
            import _griddb_python_client
            return _griddb_python_client
        if fp is not None:
            try:
                _mod = imp.load_module('_griddb_python_client', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _griddb_python_client = swig_import_helper()
    del swig_import_helper
else:
    import _griddb_python_client
del _swig_python_version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _griddb_python_client.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _griddb_python_client.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _griddb_python_client.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _griddb_python_client.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _griddb_python_client.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _griddb_python_client.SwigPyIterator_equal(self, x)

    def copy(self):
        return _griddb_python_client.SwigPyIterator_copy(self)

    def next(self):
        return _griddb_python_client.SwigPyIterator_next(self)

    def __next__(self):
        return _griddb_python_client.SwigPyIterator___next__(self)

    def previous(self):
        return _griddb_python_client.SwigPyIterator_previous(self)

    def advance(self, n):
        return _griddb_python_client.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _griddb_python_client.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _griddb_python_client.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _griddb_python_client.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _griddb_python_client.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _griddb_python_client.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _griddb_python_client.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _griddb_python_client.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _griddb_python_client.SHARED_PTR_DISOWN
GS_CONTAINER_COLLECTION = _griddb_python_client.GS_CONTAINER_COLLECTION
GS_CONTAINER_TIME_SERIES = _griddb_python_client.GS_CONTAINER_TIME_SERIES
GS_ROW_SET_CONTAINER_ROWS = _griddb_python_client.GS_ROW_SET_CONTAINER_ROWS
GS_ROW_SET_AGGREGATION_RESULT = _griddb_python_client.GS_ROW_SET_AGGREGATION_RESULT
GS_ROW_SET_QUERY_ANALYSIS = _griddb_python_client.GS_ROW_SET_QUERY_ANALYSIS
GS_TYPE_STRING = _griddb_python_client.GS_TYPE_STRING
GS_TYPE_BOOL = _griddb_python_client.GS_TYPE_BOOL
GS_TYPE_BYTE = _griddb_python_client.GS_TYPE_BYTE
GS_TYPE_SHORT = _griddb_python_client.GS_TYPE_SHORT
GS_TYPE_INTEGER = _griddb_python_client.GS_TYPE_INTEGER
GS_TYPE_LONG = _griddb_python_client.GS_TYPE_LONG
GS_TYPE_FLOAT = _griddb_python_client.GS_TYPE_FLOAT
GS_TYPE_DOUBLE = _griddb_python_client.GS_TYPE_DOUBLE
GS_TYPE_TIMESTAMP = _griddb_python_client.GS_TYPE_TIMESTAMP
GS_TYPE_GEOMETRY = _griddb_python_client.GS_TYPE_GEOMETRY
GS_TYPE_BLOB = _griddb_python_client.GS_TYPE_BLOB
GS_TYPE_STRING_ARRAY = _griddb_python_client.GS_TYPE_STRING_ARRAY
GS_TYPE_BOOL_ARRAY = _griddb_python_client.GS_TYPE_BOOL_ARRAY
GS_TYPE_BYTE_ARRAY = _griddb_python_client.GS_TYPE_BYTE_ARRAY
GS_TYPE_SHORT_ARRAY = _griddb_python_client.GS_TYPE_SHORT_ARRAY
GS_TYPE_INTEGER_ARRAY = _griddb_python_client.GS_TYPE_INTEGER_ARRAY
GS_TYPE_LONG_ARRAY = _griddb_python_client.GS_TYPE_LONG_ARRAY
GS_TYPE_FLOAT_ARRAY = _griddb_python_client.GS_TYPE_FLOAT_ARRAY
GS_TYPE_DOUBLE_ARRAY = _griddb_python_client.GS_TYPE_DOUBLE_ARRAY
GS_TYPE_TIMESTAMP_ARRAY = _griddb_python_client.GS_TYPE_TIMESTAMP_ARRAY
GS_INDEX_FLAG_DEFAULT = _griddb_python_client.GS_INDEX_FLAG_DEFAULT
GS_INDEX_FLAG_TREE = _griddb_python_client.GS_INDEX_FLAG_TREE
GS_INDEX_FLAG_HASH = _griddb_python_client.GS_INDEX_FLAG_HASH
GS_INDEX_FLAG_SPATIAL = _griddb_python_client.GS_INDEX_FLAG_SPATIAL
GS_FETCH_LIMIT = _griddb_python_client.GS_FETCH_LIMIT
GS_TIME_UNIT_YEAR = _griddb_python_client.GS_TIME_UNIT_YEAR
GS_TIME_UNIT_MONTH = _griddb_python_client.GS_TIME_UNIT_MONTH
GS_TIME_UNIT_DAY = _griddb_python_client.GS_TIME_UNIT_DAY
GS_TIME_UNIT_HOUR = _griddb_python_client.GS_TIME_UNIT_HOUR
GS_TIME_UNIT_MINUTE = _griddb_python_client.GS_TIME_UNIT_MINUTE
GS_TIME_UNIT_SECOND = _griddb_python_client.GS_TIME_UNIT_SECOND
GS_TIME_UNIT_MILLISECOND = _griddb_python_client.GS_TIME_UNIT_MILLISECOND
class GSException(Exception):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GSException, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GSException, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _griddb_python_client.new_GSException(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _griddb_python_client.delete_GSException
    __del__ = lambda self: None

    def get_code(self):
        return _griddb_python_client.GSException_get_code(self)

    def what(self):
        return _griddb_python_client.GSException_what(self)

    def is_timeout(self):
        return _griddb_python_client.GSException_is_timeout(self)
GSException_swigregister = _griddb_python_client.GSException_swigregister
GSException_swigregister(GSException)

class Resource(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Resource, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Resource, name)
    __repr__ = _swig_repr

    def __init__(self, resource):
        this = _griddb_python_client.new_Resource(resource)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _griddb_python_client.delete_Resource
    __del__ = lambda self: None

    def get_error_stack_size(self):
        return _griddb_python_client.Resource_get_error_stack_size(self)

    def get_error_code(self, stackIndex):
        return _griddb_python_client.Resource_get_error_code(self, stackIndex)

    def format_error_message(self, stackIndex, bufSize):
        return _griddb_python_client.Resource_format_error_message(self, stackIndex, bufSize)

    def format_error_location(self, stackIndex, bufSize):
        return _griddb_python_client.Resource_format_error_location(self, stackIndex, bufSize)
Resource_swigregister = _griddb_python_client.Resource_swigregister
Resource_swigregister(Resource)

class AggregationResult(Resource):
    __swig_setmethods__ = {}
    for _s in [Resource]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AggregationResult, name, value)
    __swig_getmethods__ = {}
    for _s in [Resource]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AggregationResult, name)
    __repr__ = _swig_repr

    def __init__(self, aggResult):
        this = _griddb_python_client.new_AggregationResult(aggResult)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _griddb_python_client.delete_AggregationResult
    __del__ = lambda self: None

    def get_long(self):
        return _griddb_python_client.AggregationResult_get_long(self)

    def get_double(self):
        return _griddb_python_client.AggregationResult_get_double(self)

    def get_timestamp(self):
        return _griddb_python_client.AggregationResult_get_timestamp(self)
AggregationResult_swigregister = _griddb_python_client.AggregationResult_swigregister
AggregationResult_swigregister(AggregationResult)

class ContainerInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ContainerInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ContainerInfo, name)
    __repr__ = _swig_repr

    def __init__(self, containerInfo):
        this = _griddb_python_client.new_ContainerInfo(containerInfo)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _griddb_python_client.delete_ContainerInfo
    __del__ = lambda self: None

    def get_column_count(self):
        return _griddb_python_client.ContainerInfo_get_column_count(self)
ContainerInfo_swigregister = _griddb_python_client.ContainerInfo_swigregister
ContainerInfo_swigregister(ContainerInfo)

class Row(Resource):
    __swig_setmethods__ = {}
    for _s in [Resource]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Row, name, value)
    __swig_getmethods__ = {}
    for _s in [Resource]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Row, name)
    __repr__ = _swig_repr

    def __init__(self, row):
        this = _griddb_python_client.new_Row(row)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _griddb_python_client.delete_Row
    __del__ = lambda self: None

    def set_field_by_string(self, column, value):
        return _griddb_python_client.Row_set_field_by_string(self, column, value)

    def get_field_as_string(self, column):
        return _griddb_python_client.Row_get_field_as_string(self, column)

    def set_field_by_bool(self, column, value):
        return _griddb_python_client.Row_set_field_by_bool(self, column, value)

    def get_field_as_bool(self, column):
        return _griddb_python_client.Row_get_field_as_bool(self, column)

    def set_field_by_long(self, column, value):
        return _griddb_python_client.Row_set_field_by_long(self, column, value)

    def get_field_as_long(self, column):
        return _griddb_python_client.Row_get_field_as_long(self, column)

    def set_field_by_byte(self, column, value):
        return _griddb_python_client.Row_set_field_by_byte(self, column, value)

    def get_field_as_byte(self, column):
        return _griddb_python_client.Row_get_field_as_byte(self, column)

    def set_field_by_short(self, column, value):
        return _griddb_python_client.Row_set_field_by_short(self, column, value)

    def get_field_as_short(self, column):
        return _griddb_python_client.Row_get_field_as_short(self, column)

    def set_field_by_integer(self, column, value):
        return _griddb_python_client.Row_set_field_by_integer(self, column, value)

    def get_field_as_integer(self, column):
        return _griddb_python_client.Row_get_field_as_integer(self, column)

    def set_field_by_float(self, column, value):
        return _griddb_python_client.Row_set_field_by_float(self, column, value)

    def get_field_as_float(self, column):
        return _griddb_python_client.Row_get_field_as_float(self, column)

    def set_field_by_double(self, column, value):
        return _griddb_python_client.Row_set_field_by_double(self, column, value)

    def get_field_as_double(self, column):
        return _griddb_python_client.Row_get_field_as_double(self, column)

    def set_field_by_timestamp(self, column, value):
        return _griddb_python_client.Row_set_field_by_timestamp(self, column, value)

    def get_field_as_timestamp(self, column):
        return _griddb_python_client.Row_get_field_as_timestamp(self, column)

    def set_field_by_geometry(self, column, value):
        return _griddb_python_client.Row_set_field_by_geometry(self, column, value)

    def get_field_as_geometry(self, column):
        return _griddb_python_client.Row_get_field_as_geometry(self, column)

    def set_field_by_blob(self, column, fieldValue):
        return _griddb_python_client.Row_set_field_by_blob(self, column, fieldValue)

    def get_field_as_blob(self, column):
        return _griddb_python_client.Row_get_field_as_blob(self, column)

    def set_field_by_string_array(self, column, fieldValue, size):
        return _griddb_python_client.Row_set_field_by_string_array(self, column, fieldValue, size)

    def get_field_as_string_array(self, column, fieldValue, size):
        return _griddb_python_client.Row_get_field_as_string_array(self, column, fieldValue, size)

    def set_field_by_byte_array(self, column, fieldValue):
        return _griddb_python_client.Row_set_field_by_byte_array(self, column, fieldValue)

    def get_field_as_byte_array(self, column, fieldValue, size):
        return _griddb_python_client.Row_get_field_as_byte_array(self, column, fieldValue, size)

    def set_field_by_short_array(self, column, fieldValue, size):
        return _griddb_python_client.Row_set_field_by_short_array(self, column, fieldValue, size)

    def get_field_as_short_array(self, column, fieldValue, size):
        return _griddb_python_client.Row_get_field_as_short_array(self, column, fieldValue, size)

    def set_field_by_integer_array(self, column, fieldValue, size):
        return _griddb_python_client.Row_set_field_by_integer_array(self, column, fieldValue, size)

    def get_field_as_integer_array(self, column, fieldValue, size):
        return _griddb_python_client.Row_get_field_as_integer_array(self, column, fieldValue, size)

    def set_field_by_long_array(self, column, fieldValue, size):
        return _griddb_python_client.Row_set_field_by_long_array(self, column, fieldValue, size)

    def get_field_as_long_array(self, column, fieldValue, size):
        return _griddb_python_client.Row_get_field_as_long_array(self, column, fieldValue, size)

    def set_field_by_float_array(self, column, fieldValue, size):
        return _griddb_python_client.Row_set_field_by_float_array(self, column, fieldValue, size)

    def get_field_as_float_array(self, column, fieldValue, size):
        return _griddb_python_client.Row_get_field_as_float_array(self, column, fieldValue, size)

    def set_field_by_double_array(self, column, fieldValue, size):
        return _griddb_python_client.Row_set_field_by_double_array(self, column, fieldValue, size)

    def get_field_as_double_array(self, column, fieldValue, size):
        return _griddb_python_client.Row_get_field_as_double_array(self, column, fieldValue, size)

    def set_field_by_timestamp_array(self, column, fieldValue, size):
        return _griddb_python_client.Row_set_field_by_timestamp_array(self, column, fieldValue, size)

    def get_field_as_timestamp_array(self, column, fieldValue, size):
        return _griddb_python_client.Row_get_field_as_timestamp_array(self, column, fieldValue, size)

    def get_schema(self):
        return _griddb_python_client.Row_get_schema(self)

    def gs_ptr(self):
        return _griddb_python_client.Row_gs_ptr(self)
Row_swigregister = _griddb_python_client.Row_swigregister
Row_swigregister(Row)

class RowSet(Resource):
    __swig_setmethods__ = {}
    for _s in [Resource]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RowSet, name, value)
    __swig_getmethods__ = {}
    for _s in [Resource]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RowSet, name)
    __repr__ = _swig_repr

    def __init__(self, rowSet):
        this = _griddb_python_client.new_RowSet(rowSet)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _griddb_python_client.delete_RowSet
    __del__ = lambda self: None

    def has_next(self):
        return _griddb_python_client.RowSet_has_next(self)

    def get_next(self, row):
        return _griddb_python_client.RowSet_get_next(self, row)

    def update_current(self, row):
        return _griddb_python_client.RowSet_update_current(self, row)

    def get_size(self):
        return _griddb_python_client.RowSet_get_size(self)

    def delete_current(self):
        return _griddb_python_client.RowSet_delete_current(self)

    def get_type(self):
        return _griddb_python_client.RowSet_get_type(self)

    def get_next_aggregation(self):
        return _griddb_python_client.RowSet_get_next_aggregation(self)

    def get_next_query_analysis(self):
        return _griddb_python_client.RowSet_get_next_query_analysis(self)
RowSet_swigregister = _griddb_python_client.RowSet_swigregister
RowSet_swigregister(RowSet)

class Query(Resource):
    __swig_setmethods__ = {}
    for _s in [Resource]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Query, name, value)
    __swig_getmethods__ = {}
    for _s in [Resource]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Query, name)
    __repr__ = _swig_repr

    def __init__(self, query):
        this = _griddb_python_client.new_Query(query)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _griddb_python_client.delete_Query
    __del__ = lambda self: None

    def fetch(self, forUpdate):
        return _griddb_python_client.Query_fetch(self, forUpdate)

    def get_row_set(self):
        return _griddb_python_client.Query_get_row_set(self)

    def set_fetch_option_integer(self, fetchOption, value):
        return _griddb_python_client.Query_set_fetch_option_integer(self, fetchOption, value)

    def set_fetch_option_long(self, fetchOption, value):
        return _griddb_python_client.Query_set_fetch_option_long(self, fetchOption, value)

    def close(self):
        return _griddb_python_client.Query_close(self)

    def gs_ptr(self):
        return _griddb_python_client.Query_gs_ptr(self)
Query_swigregister = _griddb_python_client.Query_swigregister
Query_swigregister(Query)

class Container(Resource):
    __swig_setmethods__ = {}
    for _s in [Resource]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Container, name, value)
    __swig_getmethods__ = {}
    for _s in [Resource]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Container, name)
    __repr__ = _swig_repr

    def __init__(self, container):
        this = _griddb_python_client.new_Container(container)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _griddb_python_client.delete_Container
    __del__ = lambda self: None

    def create_index(self, columnName, indexType):
        return _griddb_python_client.Container_create_index(self, columnName, indexType)

    def drop_index(self, columName, indexType):
        return _griddb_python_client.Container_drop_index(self, columName, indexType)

    def flush(self):
        return _griddb_python_client.Container_flush(self)

    def create_row(self):
        return _griddb_python_client.Container_create_row(self)

    def put_row(self, row):
        return _griddb_python_client.Container_put_row(self, row)

    def put_multi_row(self, rowObjs):
        return _griddb_python_client.Container_put_multi_row(self, rowObjs)

    def query(self, queryString):
        return _griddb_python_client.Container_query(self, queryString)

    def get_type(self):
        return _griddb_python_client.Container_get_type(self)

    def abort(self):
        return _griddb_python_client.Container_abort(self)

    def set_auto_commit(self, enabled):
        return _griddb_python_client.Container_set_auto_commit(self, enabled)

    def commit(self):
        return _griddb_python_client.Container_commit(self)

    def get_row_by_integer(self, key, forUpdate, row):
        return _griddb_python_client.Container_get_row_by_integer(self, key, forUpdate, row)

    def get_row_by_long(self, key, forUpdate, row):
        return _griddb_python_client.Container_get_row_by_long(self, key, forUpdate, row)

    def get_row_by_timestamp(self, key, forUpdate, row):
        return _griddb_python_client.Container_get_row_by_timestamp(self, key, forUpdate, row)

    def get_row_by_string(self, key, forUpdate, row):
        return _griddb_python_client.Container_get_row_by_string(self, key, forUpdate, row)

    def put_row_by_integer(self, key, row):
        return _griddb_python_client.Container_put_row_by_integer(self, key, row)

    def put_row_by_long(self, key, row):
        return _griddb_python_client.Container_put_row_by_long(self, key, row)

    def put_row_by_timestamp(self, key, row):
        return _griddb_python_client.Container_put_row_by_timestamp(self, key, row)

    def put_row_by_string(self, key, row):
        return _griddb_python_client.Container_put_row_by_string(self, key, row)

    def delete_row_by_integer(self, key):
        return _griddb_python_client.Container_delete_row_by_integer(self, key)

    def delete_row_by_long(self, key):
        return _griddb_python_client.Container_delete_row_by_long(self, key)

    def delete_row_by_timestamp(self, key):
        return _griddb_python_client.Container_delete_row_by_timestamp(self, key)

    def delete_row_by_string(self, key):
        return _griddb_python_client.Container_delete_row_by_string(self, key)
Container_swigregister = _griddb_python_client.Container_swigregister
Container_swigregister(Container)

class PartitionController(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PartitionController, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PartitionController, name)
    __repr__ = _swig_repr

    def __init__(self, controller):
        this = _griddb_python_client.new_PartitionController(controller)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _griddb_python_client.delete_PartitionController
    __del__ = lambda self: None

    def get_partition_count(self):
        return _griddb_python_client.PartitionController_get_partition_count(self)

    def get_partition_container_count(self, partitionIndex):
        return _griddb_python_client.PartitionController_get_partition_container_count(self, partitionIndex)

    def get_partition_container_names(self, partitionIndex, start, limit=-1):
        return _griddb_python_client.PartitionController_get_partition_container_names(self, partitionIndex, start, limit)

    def get_partition_hosts(self, partitionIndex):
        return _griddb_python_client.PartitionController_get_partition_hosts(self, partitionIndex)

    def get_partition_index_of_container(self, containerName):
        return _griddb_python_client.PartitionController_get_partition_index_of_container(self, containerName)

    def get_partition_owner_host(self, partitionIndex):
        return _griddb_python_client.PartitionController_get_partition_owner_host(self, partitionIndex)

    def get_partition_backup_hosts(self, partitionIndex):
        return _griddb_python_client.PartitionController_get_partition_backup_hosts(self, partitionIndex)

    def assign_partition_preferable_host(self, partitionIndex, host):
        return _griddb_python_client.PartitionController_assign_partition_preferable_host(self, partitionIndex, host)
PartitionController_swigregister = _griddb_python_client.PartitionController_swigregister
PartitionController_swigregister(PartitionController)

class RowKeyPredicate(Resource):
    __swig_setmethods__ = {}
    for _s in [Resource]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RowKeyPredicate, name, value)
    __swig_getmethods__ = {}
    for _s in [Resource]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RowKeyPredicate, name)
    __repr__ = _swig_repr

    def __init__(self, predicate):
        this = _griddb_python_client.new_RowKeyPredicate(predicate)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _griddb_python_client.delete_RowKeyPredicate
    __del__ = lambda self: None

    def get_key_type(self):
        return _griddb_python_client.RowKeyPredicate_get_key_type(self)

    def get_start_key_as_string(self):
        return _griddb_python_client.RowKeyPredicate_get_start_key_as_string(self)

    def get_finish_key_as_string(self):
        return _griddb_python_client.RowKeyPredicate_get_finish_key_as_string(self)

    def get_finish_key_as_integer(self):
        return _griddb_python_client.RowKeyPredicate_get_finish_key_as_integer(self)

    def get_finish_key_as_long(self):
        return _griddb_python_client.RowKeyPredicate_get_finish_key_as_long(self)

    def get_start_key_as_integer(self):
        return _griddb_python_client.RowKeyPredicate_get_start_key_as_integer(self)

    def get_start_key_as_long(self):
        return _griddb_python_client.RowKeyPredicate_get_start_key_as_long(self)

    def get_start_key_as_timestamp(self):
        return _griddb_python_client.RowKeyPredicate_get_start_key_as_timestamp(self)

    def get_finish_key_as_timestamp(self):
        return _griddb_python_client.RowKeyPredicate_get_finish_key_as_timestamp(self)

    def get_predicate_distinct_keys_as_string(self):
        return _griddb_python_client.RowKeyPredicate_get_predicate_distinct_keys_as_string(self)

    def get_predicate_distinct_keys_as_integer(self):
        return _griddb_python_client.RowKeyPredicate_get_predicate_distinct_keys_as_integer(self)

    def get_predicate_distinct_keys_as_long(self):
        return _griddb_python_client.RowKeyPredicate_get_predicate_distinct_keys_as_long(self)

    def get_predicate_distinct_keys_as_timestamp(self):
        return _griddb_python_client.RowKeyPredicate_get_predicate_distinct_keys_as_timestamp(self)

    def set_finish_key_by_string(self, finishKey):
        return _griddb_python_client.RowKeyPredicate_set_finish_key_by_string(self, finishKey)

    def set_finish_key_by_integer(self, finishKey):
        return _griddb_python_client.RowKeyPredicate_set_finish_key_by_integer(self, finishKey)

    def set_finish_key_by_long(self, finishKey):
        return _griddb_python_client.RowKeyPredicate_set_finish_key_by_long(self, finishKey)

    def set_finish_key_by_timestamp(self, finishKey):
        return _griddb_python_client.RowKeyPredicate_set_finish_key_by_timestamp(self, finishKey)

    def set_start_key_by_string(self, startKey):
        return _griddb_python_client.RowKeyPredicate_set_start_key_by_string(self, startKey)

    def set_start_key_by_integer(self, startKey):
        return _griddb_python_client.RowKeyPredicate_set_start_key_by_integer(self, startKey)

    def set_start_key_by_long(self, startKey):
        return _griddb_python_client.RowKeyPredicate_set_start_key_by_long(self, startKey)

    def set_start_key_by_timestamp(self, startKey):
        return _griddb_python_client.RowKeyPredicate_set_start_key_by_timestamp(self, startKey)

    def add_key_by_string(self, key):
        return _griddb_python_client.RowKeyPredicate_add_key_by_string(self, key)

    def add_key_by_integer(self, key):
        return _griddb_python_client.RowKeyPredicate_add_key_by_integer(self, key)

    def add_key_by_long(self, key):
        return _griddb_python_client.RowKeyPredicate_add_key_by_long(self, key)

    def add_key_by_timestamp(self, key):
        return _griddb_python_client.RowKeyPredicate_add_key_by_timestamp(self, key)

    def gs_ptr(self):
        return _griddb_python_client.RowKeyPredicate_gs_ptr(self)
RowKeyPredicate_swigregister = _griddb_python_client.RowKeyPredicate_swigregister
RowKeyPredicate_swigregister(RowKeyPredicate)

class Store(Resource):
    __swig_setmethods__ = {}
    for _s in [Resource]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Store, name, value)
    __swig_getmethods__ = {}
    for _s in [Resource]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Store, name)
    __repr__ = _swig_repr

    def __init__(self, store):
        this = _griddb_python_client.new_Store(store)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _griddb_python_client.delete_Store
    __del__ = lambda self: None

    def drop_container(self, name):
        return _griddb_python_client.Store_drop_container(self, name)

    def get_container_info(self, containerName):
        return _griddb_python_client.Store_get_container_info(self, containerName)

    def put_container(self, *args):
        return _griddb_python_client.Store_put_container(self, *args)

    def get_container(self, containerName):
        return _griddb_python_client.Store_get_container(self, containerName)

    def fetch_all(self, queryList):
        return _griddb_python_client.Store_fetch_all(self, queryList)

    def put_multi_container_row(self, entryList):
        return _griddb_python_client.Store_put_multi_container_row(self, entryList)

    def get_multi_container_row(self, predicateList):
        return _griddb_python_client.Store_get_multi_container_row(self, predicateList)

    def get_partition_controller(self):
        return _griddb_python_client.Store_get_partition_controller(self)

    def create_row_key_predicate(self, keyType):
        return _griddb_python_client.Store_create_row_key_predicate(self, keyType)
Store_swigregister = _griddb_python_client.Store_swigregister
Store_swigregister(Store)

CLIENT_VERSION = _griddb_python_client.CLIENT_VERSION
class StoreFactory(Resource):
    __swig_setmethods__ = {}
    for _s in [Resource]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StoreFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [Resource]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StoreFactory, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _griddb_python_client.delete_StoreFactory
    __del__ = lambda self: None
    if _newclass:
        get_default = staticmethod(_griddb_python_client.StoreFactory_get_default)
    else:
        get_default = _griddb_python_client.StoreFactory_get_default

    def get_store(self, props):
        return _griddb_python_client.StoreFactory_get_store(self, props)

    def set_properties(self, props):
        return _griddb_python_client.StoreFactory_set_properties(self, props)

    def get_version(self):
        return _griddb_python_client.StoreFactory_get_version(self)

    def close(self):
        return _griddb_python_client.StoreFactory_close(self)
StoreFactory_swigregister = _griddb_python_client.StoreFactory_swigregister
StoreFactory_swigregister(StoreFactory)

def StoreFactory_get_default():
    return _griddb_python_client.StoreFactory_get_default()
StoreFactory_get_default = _griddb_python_client.StoreFactory_get_default

class Timestamp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Timestamp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Timestamp, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _griddb_python_client.new_Timestamp()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _griddb_python_client.delete_Timestamp
    __del__ = lambda self: None
    if _newclass:
        current = staticmethod(_griddb_python_client.Timestamp_current)
    else:
        current = _griddb_python_client.Timestamp_current
    if _newclass:
        add_time = staticmethod(_griddb_python_client.Timestamp_add_time)
    else:
        add_time = _griddb_python_client.Timestamp_add_time
    if _newclass:
        format_time = staticmethod(_griddb_python_client.Timestamp_format_time)
    else:
        format_time = _griddb_python_client.Timestamp_format_time
    if _newclass:
        parse = staticmethod(_griddb_python_client.Timestamp_parse)
    else:
        parse = _griddb_python_client.Timestamp_parse
Timestamp_swigregister = _griddb_python_client.Timestamp_swigregister
Timestamp_swigregister(Timestamp)

def Timestamp_current():
    return _griddb_python_client.Timestamp_current()
Timestamp_current = _griddb_python_client.Timestamp_current

def Timestamp_add_time(timestamp, amount, timeUnit):
    return _griddb_python_client.Timestamp_add_time(timestamp, amount, timeUnit)
Timestamp_add_time = _griddb_python_client.Timestamp_add_time

def Timestamp_format_time(timestamp, bufSize):
    return _griddb_python_client.Timestamp_format_time(timestamp, bufSize)
Timestamp_format_time = _griddb_python_client.Timestamp_format_time

def Timestamp_parse(str):
    return _griddb_python_client.Timestamp_parse(str)
Timestamp_parse = _griddb_python_client.Timestamp_parse

# This file is compatible with both classic and new-style classes.


