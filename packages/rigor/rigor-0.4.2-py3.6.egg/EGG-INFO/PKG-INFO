Metadata-Version: 1.1
Name: rigor
Version: 0.4.2
Summary: rigor
Home-page: UNKNOWN
Author: UNKNOWN
Author-email: UNKNOWN
License: MIT license
Description-Content-Type: UNKNOWN
Description: <img src='./.images/logo.png' width='140' align="left" />
        <a href='https://codecov.io/github/genomoncology/rigor/'><img src='https://codecov.io/github/genomoncology/rigor/branch/master/graph/badge.svg' align="right" /></a>
        <a href='https://travis-ci.org/genomoncology/rigor'><img src='https://img.shields.io/travis/genomoncology/rigor.svg' align="right" /></a>
        <a href='https://pypi.python.org/pypi/rigor'><img src='https://img.shields.io/pypi/v/rigor.svg' align="right" /></a>
        
        <br/><br/>
        
        `Rigor` is a Domain Specific Language (DSL) and Command Line Interface (CLI)
        for making HTTP requests, extracting data, and validating responses. The main
        intent of Rigor is to be an HTTP-based API (e.g. REST) Testing Framework for
        automated functional or integration testing.
        
        
        # Requirements
        
        * Python 3.6
        
        
        # Installation
        
        Install using `pip3`...
        
            pip3 install rigor
        
        
        # Command Line Interface (CLI) Options
        
            $ rigor --help
            Usage: rigor [OPTIONS] [PATHS]...
        
            Options:
              --profile TEXT             Profile name (e.g. test)
              --host TEXT                Host name (e.g. http://localhost:8000)
              -i, --includes TEXT        Include tag of cases. (e.g. smoke)
              -e, --excludes TEXT        Exclude tag of cases to run. (e.g. broken)
              -p, --prefixes TEXT        Filter cases by file prefix. (e.g. smoke_)
              -e, --extensions TEXT      Filter cases by file extension. (e.g. rigor)
              -c, --concurrency INTEGER  # of concurrent HTTP requests. (default: 5)
              -o, --output TEXT          Report output folder.
              -q, --quiet                Run in quiet mode. (warning/critical level only)
              -v, --verbose              Run in verbose mode. (debug level logging)
              -j, --json                 JSON-style logging.
              -h, --html                 Generate HTML report.
              -g, --coverage             Generate Coverage report.
              --help                     Show this message and exit.
        
        # Simple Example
        
            (rigor) /p/tmp> cat test.rigor
            steps:
              - description: Simple step.
                request:
                  host: https://httpbin.org
                  path: get
        
            (rigor) /p/tmp> rigor test.rigor
            2018-02-08 13:13.33 [info     ] no config file not found       [rigor] paths=('test.rigor',)
            2018-02-08 13:13.33 [info     ] collecting tests               [rigor] cwd=/private/tmp paths=['test.rigor']
            2018-02-08 13:13.33 [info     ] tests collected                [rigor] queued=1 skipped=0
            2018-02-08 13:13.33 [info     ] execute suite complete         [rigor] failed=0 passed=1 timer=0.133s
        
        
        # Feature List
        
        
        * Functional testing without the need to write glue code. (e.g. Cucumber)
        * Runs in either synchronous (requests) or asynchronous (aiohttp) mode.
        * Easy-to-read YAML format for Test Case files.
        *
        
        
        Example use cases for `related` object models include:
        
        * Configuration file reading and writing
        * REST API message response generation and request processing
        * Object-Document Mapping for a document store (e.g. MongoDB, elasticsearch)
        * Data import parsing or export generation
        
        rigor
        =====
        
        - Functional API Testing Framework
        - Built with Python 3.6
        - Multiple Purposes: Document API, Test API, Smoke/Functional/TDD, etc.
        - Asynchronous (ayncio) collection (aiofiles) and execution (aiohttp)
        - Cucumber-inspired Given/When/Then approach to test cases.
        - Different from Cucumber because it is imperative. Tied explicitly to the
          API not the user stories.
        - Declarative syntax using YAML test case descriptions
        - Uses Jmespath for data extraction and less-brittle validation
        - `status` expects a 2XX by default, but can be overridden in step request.
        - `rigor` descends directories using file prefix and extensions
          (default `yml` and `yaml`).
        - `tags` can be included (e.g. smoke) or excluded (e.g. broken).
        - Asynchronous mode can be disabled by specifying `concurrency=1`
        - Namespace __uuid__ for uniquely naming things in case of concurrency.
        - Rendering using [mako: http://www.makotemplates.org/]
        - Command-line with [click: http://click.pocoo.org/]
        
        
        Setup
        -----
        
        ```bash
        $ pip install rigor
        $ cd /path/to/directory/containing/tree/of/rigor/yamls/
        $ rigor
        ```
        
        
        HTML Reporting
        --------------
        Rigor returns a response that is cucumber formatted, and supports a
        
        
        
Platform: UNKNOWN
Classifier: Development Status :: 2 - Pre-Alpha
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Natural Language :: English
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.6
