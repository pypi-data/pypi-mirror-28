---
- name: "get mac addr"
  shell: "python -c 'from uuid import getnode as get_mac; print get_mac()'"
  register: macid_output

# the PinFile isn't technically used in an ansible-playbook run,
# so we'll say this is an 'ansible-playbook' target
- name: "set PinFile target"
  set_fact:
    target: ansible-playbook

- name: "set rundb_connect value"
  set_fact:
    rundb_conn: "{{ rundb_conn | regex_replace('::mac::', macid_output.stdout) }}"
  when: rundb_conn_type == "file"

- name: "ensure rundb path exists if type is file"
  file:
    state: directory
    path: "{{ rundb_conn | dirname }}"
  when: rundb_conn_type == "file"

- name: "initialize rundb"
  rundb:
    conn_str: "{{ rundb_conn }}"
    operation: init
    table: "{{ target }}"
    value: "{{ rundb_schema }}"
  register: run_id

- name: "assign rundb_id"
  set_fact:
    rundb_id: "{{ run_id.output }}"

- name: "assign rundb_id"
  set_fact:
    start_time: "{{ dateformat | strftime }}"

- name: "record start time"
  rundb:
    conn_str: "{{ rundb_conn }}"
    operation: update
    table: "{{ target }}"
    key: "start"
    value: "{{ start_time }}"
    run_id: "{{ rundb_id }}"

- name: "record action"
  rundb:
    conn_str: "{{ rundb_conn }}"
    operation: update
    table: "{{ target }}"
    key: "action"
    value: "{{ (state == 'absent') | ternary('destroy', 'up') }}"
    run_id: "{{ rundb_id }}"

- name: "generate LinchPin Unique-ish ID if action is up"
  set_fact:
      uh: "{{ [target,rundb_id,start_time] | join(':') | hash('sha256') }}"
  when: state == "present"

- name: "get uhash from last 4 of full hash"
  set_fact:
    uhash_present: "{{ uh[-4:] }}"
  when: state == "present"

- name: "get last run_id to destroy"
  rundb:
    conn_str: "{{ rundb_conn }}"
    operation: get
    table: "{{ target }}"
    key: run_id
  register: orig_run_id
  when: state == "absent"

- name: "get last uhash to destroy"
  rundb:
    conn_str: "{{ rundb_conn }}"
    operation: get
    table: "{{ target }}"
    key: uhash
  register: uhash_absent
  when: state == "absent"

- name: "get uhash from last 4 of full hash"
  set_fact:
    uhash_absent: "{{ uhash_absent.output }}"
  when: state == "absent"

- name: "set unique-ish hash into rundb when state is absent"
  rundb:
    conn_str: "{{ rundb_conn }}"
    operation: update
    table: "{{ target }}"
    key: "uhash"
    value: "{{ uhash_absent }}"
    run_id: "{{ rundb_id }}"
  when: state == "absent"

- name: "set unique-ish hash into rundb when state is present"
  rundb:
    conn_str: "{{ rundb_conn }}"
    operation: update
    table: "{{ target }}"
    key: "uhash"
    value: "{{ uhash_present }}"
    run_id: "{{ rundb_id }}"
  when: state == "present"


- name: "get uhash from rundb"
  rundb:
    conn_str: "{{ rundb_conn }}"
    operation: get
    table: "{{ target }}"
    key: "uhash"
    run_id: "{{ rundb_id }}"
  register: uhash

