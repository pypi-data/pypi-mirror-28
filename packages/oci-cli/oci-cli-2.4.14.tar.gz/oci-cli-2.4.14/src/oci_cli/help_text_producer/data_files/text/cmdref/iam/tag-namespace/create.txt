create
******


Description
===========

Creates a new tagNamespace in a given compartment.

You must specify the compartment ID in the request object (remember
that the tenancy is simply the root compartment).

You must also specify a *name* for the namespace, which must be unique
across all namespaces in your tenancy and cannot be changed. All ascii
characters are allowed except spaces and dots. Note that names are
case insenstive, that means you can not have two different namespaces
with same name but with different casing in one tenancy. Once you
created a namespace, you can not change the name If you specify a name
that's already in use in the tennacy, you'll get a 409 error.

You must also specify a *description* for the namespace. It does not
have to be unique, and you can change it anytime with
UpdateTagNamespace.


Usage
=====

   oci iam tag-namespace create [OPTIONS]


Options
=======


--compartment-id, -c [text]
---------------------------

The OCID of the tenancy containing the user. [required]


--name [text]
-------------

The name of the tagNamespace. It must be unique across all
tagNamespaces in the tenancy and cannot be changed. [required]


--description [text]
--------------------

The description of the tagNamespace. [required]


--freeform-tags [complex type]
------------------------------

Simple key-value pair that is applied without any predefined name,
type or scope. Exists for cross-compatibility only. Example: *{"bar-
key": "value"}* This is a complex type whose value must be valid JSON.
The value can be provided as a string on the command line or passed in
as a file using the file://path/to/file syntax.

The --generate-param-json-input option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.


--defined-tags [complex type]
-----------------------------

Usage of predefined tag keys. These predefined keys are scoped to
namespaces. Example: *{"foo-namespace": {"bar-key": "foo-value"}}*
This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The --generate-param-json-input option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.


--from-json [text]
------------------

Provide input to this command as a JSON document from a file.

Options can still be provided on the command line. If an option exists
in both the JSON document and the command line then the command line
specified value will be used


-?, -h, --help
--------------

Show this message and exit.
