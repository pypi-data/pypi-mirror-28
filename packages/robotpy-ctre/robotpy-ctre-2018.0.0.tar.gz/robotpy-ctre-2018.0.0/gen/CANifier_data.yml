---
c_CANifier_Create1:
  code: |
    self.create_called = True
c_CANifier_GetDescription:
  ignore: true # TODO
  get: description
c_CANifier_SetLEDOutput:
  code: |
    raise NotImplementedError
  doc: |
    Sets the LED Output
    
    :param percentOutput: Output duty cycle expressed as percentage.
    :param ledChannel: Channel to set the output of.
c_CANifier_SetGeneralOutputs:
  code: |
    raise NotImplementedError
  doc: |
    Sets the output of all General Pins

    :param outputBits: A bit mask of all the output states.  LSB->MSB is in the order of the #GeneralPin enum.
    :param isOutputBits: A boolean bit mask that sets the pins to be outputs or inputs.  A bit of 1 enables output.
c_CANifier_SetGeneralOutput:
  code: |
    raise NotImplementedError
  doc: |
    Sets the output of a General Pin

    :param outputPin: The pin to use as output.
    :param outputValue: The desired output state.
    :param outputEnable: Whether this pin is an output. "True" enables output.
c_CANifier_SetPWMOutput:
  code: |
    raise NotImplementedError
  doc: |
c_CANifier_EnablePWMOutput:
  code: |
    raise NotImplementedError
c_CANifier_GetGeneralInputs:
  ignore: true # TODO
  code: |
    raise NotImplementedError
c_CANifier_GetGeneralInput:
  code: |
    raise NotImplementedError
  doc: |
    Gets the state of the specified pin

    :param inputPin: The index of the pin.
    :returns: The state of the pin.
c_CANifier_GetPWMInput:
  code: |
    raise NotImplementedError
  doc: |
    Gets the PWM Input

    :param pwmChannel: PWM channel to get.
    :param dutyCycleAndPeriod: Double array to hold Duty Cycle [0] and Period [1].
c_CANifier_GetLastError:
  code: |
    raise NotImplementedError
  doc: |
    Call GetLastError() generated by this object.
    Not all functions return an error code but can
    potentially report errors.

    This function can be used to retrieve those error codes.

    :returns: The last ErrorCode generated.
c_CANifier_GetBusVoltage:
  code: |
    raise NotImplementedError
  doc: |
    Gets the bus voltage seen by the device.
    
    :returns: The bus voltage value (in volts).
c_CANifier_SetLastError:
  code: |
    raise NotImplementedError
c_CANifier_ConfigSetParameter:
  code: |
    raise NotImplementedError
  doc: |
    Sets a parameter. Generally this is not used.

    This can be utilized in

    - Using new features without updating API installation.
    - Errata workarounds to circumvent API implementation.
    - Allows for rapid testing / unit testing of firmware.
    
    :param param:
        Parameter enumeration.
    :param value:
        Value of parameter.
    :param subValue:
        Subvalue for parameter. Maximum value of 255.
    :param ordinal:
        Ordinal of parameter.
    :param timeoutMs:
        Timeout value in ms. If nonzero, function will wait for config
        success and report an error if it times out. If zero, no
        blocking or checking is performed.
    :returns: Error Code generated by function. 0 indicates no error.
c_CANifier_ConfigGetParameter:
  code: |
    raise NotImplementedError
  doc: |
    Gets a parameter. Generally this is not used.

    This can be utilized in

    - Using new features without updating API installation.
    - Errata workarounds to circumvent API implementation.
    - Allows for rapid testing / unit testing of firmware.

    :param param:
        Parameter enumeration.
    :param ordinal:
        Ordinal of parameter.
    :param timeoutMs:
        Timeout value in ms. If nonzero, function will wait for config
        success and report an error if it times out. If zero, no
        blocking or checking is performed.
    :returns: Value of parameter.
c_CANifier_ConfigSetCustomParam:
  code: |
    raise NotImplementedError
  doc: |
    Sets the value of a custom parameter. This is for arbitrary use.

    Sometimes it is necessary to save calibration/duty cycle/output
    information in the device. Particularly if the
    device is part of a subsystem that can be replaced.
    
    :param newValue:
        Value for custom parameter.
    :param paramIndex:
        Index of custom parameter [0-1].
    :param timeoutMs:
        Timeout value in ms. If nonzero, function will wait for config
        success and report an error if it times out. If zero, no
        blocking or checking is performed.
    :returns: Error Code generated by function. 0 indicates no error.
c_CANifier_ConfigGetCustomParam:
  code: |
    raise NotImplementedError
  doc: |
    Gets the value of a custom parameter. This is for arbitrary use.

    Sometimes it is necessary to save calibration/duty cycle/output
    information in the device. Particularly if the
    device is part of a subsystem that can be replaced.

    :param paramIndex:
        Index of custom parameter [0-1].
    :param timeoutMs:
        Timeout value in ms. If nonzero, function will wait for config
        success and report an error if it times out. If zero, no
        blocking or checking is performed.
    :returns: Value of the custom param.
c_CANifier_GetFaults:
  code: |
    raise NotImplementedError
c_CANifier_GetStickyFaults:
  code: |
    raise NotImplementedError
c_CANifier_ClearStickyFaults:
  code: |
    raise NotImplementedError
  doc: |
    Clears the Sticky Faults
    
    :returns: Error Code generated by function. 0 indicates no error.
c_CANifier_GetFirmwareVersion:
  code: |
    raise NotImplementedError
  doc: |
    Gets the firmware version of the device.

    :returns: Firmware version of device.
c_CANifier_HasResetOccurred:
  code: |
    raise NotImplementedError
  doc: |
    Returns true if the device has reset since last call.

    :returns: Has a Device Reset Occurred?
c_CANifier_SetStatusFramePeriod:
  code: |
    raise NotImplementedError
  doc: |
    Sets the period of the given status frame.
    
    :param statusFrame:
        Frame whose period is to be changed.
    :param periodMs:
        Period in ms for the given frame.
    :param timeoutMs:
        Timeout value in ms. If nonzero, function will wait for config
        success and report an error if it times out. If zero, no
        blocking or checking is performed.
    :returns: Error Code generated by function. 0 indicates no error.
c_CANifier_GetStatusFramePeriod:
  code: |
    raise NotImplementedError
  doc: |
    Gets the period of the given status frame.
    
    :param frame:
        Frame to get the period of.
    :param timeoutMs:
        Timeout value in ms. If nonzero, function will wait for config
        success and report an error if it times out. If zero, no
        blocking or checking is performed.
    :returns: Period of the given status frame.
c_CANifier_SetControlFramePeriod:
  code: |
    raise NotImplementedError
  doc: |
    Sets the period of the given control frame.

    :param frame:
        Frame whose period is to be changed.
    :param periodMs:
        Period in ms for the given frame.
    :returns: Error Code generated by function. 0 indicates no error.
