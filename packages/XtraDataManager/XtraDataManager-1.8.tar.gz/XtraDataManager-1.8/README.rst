					          ---------- XraDataManager ----------


A tool to assist large-scale extracellular data processing. Manager of extracellular data curated by Phy.

Phy: https://github.com/kwikteam/phy (C. Rossant, Kwikteam)


Circuit neuroscience is based on the study of interactions between various cell types within systems. This requires access to the activity of populations of neurons and clear identification of their cell types.  Extracellular recording with silicon probes is an adapted technique for this purpose. Nevertheless, cell type identification from these recordings raises many issues. First of all, no morphological information about the recorded cells is available. The only way the experimentalist can identify cell types is by inferring them from functional information — the spiking activity of units —. Determining how to extract relevant features from raw spike trains to distinguish cell types is not an easy task. Secondly, new generation of silicon probes such as Neuropixels allows for sampling not tens but hundreds of units simultaneously. This makes the traditional manual identification of cell types quite fastidious for the experimentalist. 

Here we introduce XtraDataManager, a tool to assist large-scale extracellular data processing. The purpose of this software is 1) to extract functional features relevant for cell types identification of recorded units, and 2) to exploit these features to assist identification of their cell types in a semi-automatised way. XtraDataManager works in conjunction with Phy, a software designed by Cyrille Rossant (https://github.com/kwikteam/phy). Phy permits to achieve manual curation of units, after they have been automatically generated thanks to spike sorting frameworks as Kilosort (https://github.com/cortex-lab/KiloSort). Once the manual curation has been performed, Phy’s output notably contains the raw time stamps of the spikes attributed to units sorted as « good » by the experimentalist. XtraDataManager’s pipeline is based on the exploitation of these raw spike trains, and proceeds in two steps.

First of all, it extracts processed features from the spike trains, which are relevant for cell type identification of units (https://github.com/MS047/XtraDataManager/blob/master/XtraDataManager/FeaturesExtraction.py). This is achieved by instantiating a class called « DataManager », while working in the directory containing Phy’s output (See appendix 1 for user’s manual). The instance of this class embeds the features of all the units sorted as « good »: 1) mean firing rates of units (MFR); 2) instantaneous firing rates of units (IFR); 3) crosscorrelograms of units with all other units (CCG); 4) interspike intervals histograms of units (ISI); 5) waveforms of units (WVF). These extracted features can be used for several purposes. First, because some of the extracted features are not available in Phy but are still relevant to assess the quality of the dataset, they can be used for simple exploratory analysis of units. For instance, XtraDataManager gives access to the mean firing rates of units, a very informative feature. To assist exploratory analysis of the dataset, a visualisation tool is built in XtraDataManager (See Appendix 1 for details). The extracted features can also be exported in various formats for later use in more processed analysis. For instance, it allows exportation of the instantaneous firing rates in MATLAB™ compatible format.

The second step of XtraDataManager’s pipeline is called features exploitation (https://github.com/MS047/XtraDataManager/blob/master/XtraDataManager/FeaturesExploitation.py). At this stage, the algorithm makes use of the features extracted in step one to achieve its original goal: assist the attribution of cell types to units. For this purpose, XtraDataManager includes a built-in unsupervised learning protocol, originating from SciKit-learn python library (http://scikit-learn.org). In particular, the software includes the K-means algorithm. It permits to cluster units according to their functional features. Their mean firing rates, the shape of their autocorrelograms and the parameters of the distribution of their ISI histogram are exploited for the clustering. This allows to sort units in groups with respect to their functional characteristics. Traditionally, cell types were manually distinguished according to these characteristics, such as the shape of their autocorrelograms1. Thus the clusters found by XtraDataManager are expected to at least partially overlap cell types. This clustering provides an additional layer of information to help the user to assess the cell types of the recorded units, as described below. 

Thanks to the « CellTypeFinder » class, XtraDataManager’s pipeline is embedded in a single step from the user's point of view (See Appendix 1). Launching the CellTypeFinder prints a set of instructions on the user’s terminal. There all the steps are explained and actions are requested in an interactive manner. The features are extracted. The user is asked how many clusters he wants the algorithm to generate — he is helped with on-screen tips —. Then the features are exploited to perform the clustering. The user is asked to provide N categories to sort the units, which fits the amount of N clusters he picked before. This includes the cell types he expects to find, but also garbage categories such as « others1 » to sort odd units. So N>amount of expected cell types. Then units sorted as « good » are screened one after the other by the algorithm. Each unit’s features — autocorrelogram, waveform, mean firing rate, interspike interval histogram — are plotted one by one in pop up windows, and the respective outcome of the clustering is printed on the terminal. The user is then requested to attribute a cell type to the displayed unit, in function of all this information. The clustering outcome is used as a bonus: if two units are clustered in the same group, they are more likely to belong to the same cell type class. Ultimately, after all the units have been screened, the user ends up with a list of cell types, saved as an array is the working directory. If the CellTypeFinder process is launched again, a second array of cell types can be generated and replace the original list or be saved elsewhere.

XtraDataManager is a free software implemented in Python 3.5, and can be found on GitHub at https://github.com/MS047/XtraDataManager. A tutorial can be found at the address 


Tutorial used to upload a python library from a Github repository on pip: http://peterdowns.com/posts/first-time-with-pypi.html
