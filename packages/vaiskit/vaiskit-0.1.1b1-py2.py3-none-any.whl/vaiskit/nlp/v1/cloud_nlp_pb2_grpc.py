# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from vaiskit.nlp.v1 import cloud_nlp_pb2 as nlp_dot_v1_dot_cloud__nlp__pb2


class NLPStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.IntentRecognize = channel.unary_unary(
        '/vais.cloud.nlp.v1.NLP/IntentRecognize',
        request_serializer=nlp_dot_v1_dot_cloud__nlp__pb2.IntentRecognizeRequest.SerializeToString,
        response_deserializer=nlp_dot_v1_dot_cloud__nlp__pb2.IntentRecognizeResult.FromString,
        )
    self.GetSentenceForApplication = channel.unary_unary(
        '/vais.cloud.nlp.v1.NLP/GetSentenceForApplication',
        request_serializer=nlp_dot_v1_dot_cloud__nlp__pb2.GetSentenceRequest.SerializeToString,
        response_deserializer=nlp_dot_v1_dot_cloud__nlp__pb2.GetSentenceResponse.FromString,
        )


class NLPServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def IntentRecognize(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetSentenceForApplication(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_NLPServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'IntentRecognize': grpc.unary_unary_rpc_method_handler(
          servicer.IntentRecognize,
          request_deserializer=nlp_dot_v1_dot_cloud__nlp__pb2.IntentRecognizeRequest.FromString,
          response_serializer=nlp_dot_v1_dot_cloud__nlp__pb2.IntentRecognizeResult.SerializeToString,
      ),
      'GetSentenceForApplication': grpc.unary_unary_rpc_method_handler(
          servicer.GetSentenceForApplication,
          request_deserializer=nlp_dot_v1_dot_cloud__nlp__pb2.GetSentenceRequest.FromString,
          response_serializer=nlp_dot_v1_dot_cloud__nlp__pb2.GetSentenceResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'vais.cloud.nlp.v1.NLP', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
