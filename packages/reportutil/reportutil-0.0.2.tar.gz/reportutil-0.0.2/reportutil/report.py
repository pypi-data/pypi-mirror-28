# encoding: utf-8

import logging_helper
from fdutil.path_tools import ensure_path_exists
from .components import ReportNode
from .constants import ReportConstant

logging = logging_helper.setup_logging()


"""
TODO LIST

 - allow addition of objects i.e table to a report body etc
 - report dir structure for more complex reports
 - reports are all in HTML for now, we may expand this later
 - report structure configuration so that generation of one report in an app can trigger a full report structure
   update for an app (inc. breadcrumbs for traversal etc)  Thi also allows for a single report entry point for app.
 - cfg: root path on init of Report object plus an object detailing report structure
 - each dir will have an index file. which can be generated by user.  This may require a wrapper to be created 
   to allow breadcrumb updating

report header:
 - report title
 - breadcrumb

report body

report footer

extras:
 - report tooltip generation for Tk?
 - cache time for report to clear up expired reports?

"""


class Report(ReportNode):

    def __init__(self,
                 root_dir,
                 *args,
                 **kwargs):

        """

        :param root_dir:    The root directory where the report structure will be generated.
        """

        super(Report, self).__init__(*args, **kwargs)

        self.report_root_dir = root_dir

    @property
    def node_type(self):
        return ReportConstant.types.root

    @property
    def node_path(self):
        return self.report_root_dir

    @property
    def report_root_dir(self):
        return self._cfg[u'{cfg}.{key}'.format(cfg=ReportConstant.config.key,
                                               key=ReportConstant.config_properties.report_root)]

    @report_root_dir.setter
    def report_root_dir(self,
                        value):
        self._cfg[u'{cfg}.{key}'.format(cfg=ReportConstant.config.key,
                                        key=ReportConstant.config_properties.report_root)] = value

    def generate(self):

        """ Generates the report, creating the directory structure and files that make up the report.

        :return: path to reports main index file.
        """

        # Generate this directory
        ensure_path_exists(self.node_path)

        # TODO: Generate index

        # Generate Children
        self.generate_children()
