#
#  Usage
# --------
# Python module name:
#   id: Ruby module name
#     e.g. id: numo/narray # import numpy as np => require 'numo/narray'
#   mod_name: Ruby module namespace : %(mod)s
#     e.g. mod_name: Numo  # from numpy import array => require 'numo/narray'; include Numo # mod: mod_name + '::'
#   mod_class_name:
#     Pyth n class name: Ruby class name    # For class inheritance
#     e.g. TestCase: 'Test::Unit::TestCase'
#
#   methods_map:
#     Python method name:
#       bracket: False             => argument bracket
#                                     True: use bracket(default) # e.g. Numo::NArray.cast([3.0, 4.0]).prod(keepdims: true)
#                                     False: not use bracket                                              ^^^^^^^^^^^^^^^^
#       key:
#         - ['second']             => argument count 1 (len(key[..]) == 1) case
#         - ['first', 'second'..]  => argument count 2 (len(key[..]) == 2) or not match (key[-1]) case
#       key_order:                 => key order change setting
#         - ['second']             => argument count 1 (len(key_order[..]) == 1) case
#         - ['second', 'first'..]  => argument count 2 (len(key_order[..]) == 2) or not match (key[-1]) case
#       main_data_key: object      => Main data key name : %(data)s
#
#       main_func: '(%(data)s).sum'  # convert to Ruby method
#        or
#       main_func_key: dtype       => convert function key name
#       main_func_hash_nm: 'NArray' => convert function name (not match(default) case)
#       main_func_hash: *func_hash  => convert function name (match case)
#
#       val:                       => arguments dict
#         object: False            => Not use argument data
#         dtype:  '%(mod)s%(main_func)s.cast(%(data)s)'  # convert to Ruby method
#         axis: axis               => Use keyword argument data
#       rtn:
#         - "%(start)s"            => customize return string (main_func + rtn) : argument count 1 (rtn[0]) case
#         - "%(start)s %(second)s" => customize return string (main_func + rtn) : argument count 2 (rtn[1]) or over (rtn[-1]) case
#
#   ignore:
#     Python method name:          # ignore case
#       e.g.    main: ''
#

unittest:
  id: test/unit
  mod_name: Test::Unit
  mod_class_name:
    TestCase: 'Test::Unit::TestCase'
  methods_map:
    TestCase.assertIn:
      # (first, second, msg=None)
      main_func: 'assert_include'
      key:
        - [first, second, msg]
      key_order:
        # <Python> self.assertIn('foo', ['foo', 'bar'], 'message test')
        # <Ruby>   assert_include(['foo', 'bar'],'foo','message test')
        - [second, first, msg]
      val:
        first: True
        second: True
        msg: True
    TestCase.assertEqual:
      # (first, second, msg=None)
      main_func: 'assert_equal'
      key:
        - [first, second, msg]
      key_order:
        - [second, first, msg]
      val:
        first: True
        second: True
        msg: True
    TestCase.assertTrue:
      # (expr, msg=None)
      main_func: 'assert'
      key:
        - [expr, msg]
      val:
        expr: True
        msg: True
    TestCase.assertRaises:
      # (exception, callable, *args, **kwds)
      main_func: 'assert_raise'
      key:
        - [exception]
        - [exception, callable]
      val:
        exception: False
        callable: False
      rtn:
        # <Python> self.assertRaises(TypeError)
        # <Ruby> assert_raise(klass1, klass2, ..., message = "") { ... }
        - "(%(exception)s)"
        # <Python> self.assertRaises(TypeError, foo)
        # <Ruby> assert_raise(klass1, klass2, ..., message = "") { foo }
        - "(%(exception)s){%(callable)s}"
  ignore:
    main: ''

