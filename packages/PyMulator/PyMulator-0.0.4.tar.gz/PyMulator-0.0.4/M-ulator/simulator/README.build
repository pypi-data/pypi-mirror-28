Building the simulator
======================

Requirements
------------

The simulator embeds Python. This requries that you have a working Python
install (you probably have this) and the Python development headers (you
probably don't have this). They are easy to install:

 * __debian-based__: sudo apt-get install python-dev
 * __rpm-based__: sudo yum install python-devel

The simulator does not use a traditional automake system. It was simply too
hard to maintain, especially with the compile-time core selection. Please read
the next section for a basic primer on tup.

Tup 101
-------

The simulator uses `tup` as a build engine. For instructions on installing tup,
please see the tup homepage: http://gittup.org/tup/

Once you have tup installed, the first step is to initialize tup in the current
working directory:

    $ /M-ulator/simulator > tup init

You then need to select the "variants" you would like to build. A list of
predefined variants is found in the `configs/` directory. For example, to build
a simulator for the Michigan Micro Mote CTLv3 CPU chip:

    $ /M-ulator/simulator > tup variant configs/m3_ctl_v3-release

This will create the directory `build-m3_ctl_v3-release/` where the built files
will be placed. To build the simulator, simply run:

    $ /M-ulator/simulator > tup upd

If you make any modifications to the simulator itself, you only need to run the
update command (`tup upd`) to rebuild the simulator.

Once you have the simulator built, you can run your programs on it, e.g.:

    $ /M-ulator/simulator > build-m3_ctl_v3-release/simulator -f ../platforms/m3_ctl_v3/software/blink/blink.bin
