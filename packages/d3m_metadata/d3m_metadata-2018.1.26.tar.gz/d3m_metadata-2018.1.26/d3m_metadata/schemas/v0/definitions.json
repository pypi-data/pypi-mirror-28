{
  "$schema": "http://json-schema.org/draft-04/schema",
  "id": "https://metadata.datadrivendiscovery.org/schemas/v0/definitions.json",
  "definitions": {
    "id": {
      "type": "string",
      "description": "A static id. It should never change for a given value, even if the value itself is changing. For example, all versions of the same primitive should have the same id. If possible, it should be a UUID generated in any way, but if there is an existing id available, it can be reused."
    },
    "version": {
      "type": "string",
      "description": "A string representing a version. Versions can be PEP 440 version strings or a SHA256 hexadecimal digest of value's content. In the former case they are compared according to PEP 440 rules."
    },
    "schema": {
      "type": "string",
      "description": "A URI representing a metadata.datadrivendiscovery.org schema and version to which metadata conforms.",
      "format": "uri"
    },
    "description": {
      "type": "string",
      "description": "A natural language description in an unspecified language."
    },
    "name": {
      "type": "string",
      "description": "A human readable name in an unspecified language or format."
    },
    "python_path": {
      "type": "string",
      "description": "A fully-qualified Python path to primitive's class under the \"d3m.primitives\" namespace.",
      "pattern": "^d3m\\.primitives\\."
    },
    "original_python_path": {
      "type": "string",
      "description": "A fully-qualified Python path to primitive's class inside installable package and not one under the \"d3m.primitives\" namespace."
    },
    "dimension": {
      "type": "object",
      "description": "Metadata for the dimension (e.g., rows and columns).",
      "properties": {
        "name": {
          "$ref": "#/definitions/name"
        },
        "description": {
          "$ref": "#/definitions/description"
        },
        "semantic_types": {
          "$ref": "#/definitions/semantic_types"
        },
        "length": {
          "type": "integer",
          "description": "Number of elements in a given dimension (number of samples, number of columns, etc.)."
        }
      },
      "required": [
        "length"
      ],
      "additionalProperties": true
    },
    "data_metafeatures": {
      "type": "object",
      "description": "Some data metafeatures can apply both at the container (dataset) or internal data levels (resource, table, column). In any case they apply and hold for the whole underlying structure. For example, if \"number_of_classes\" is set at a dataset level, it means that all target columns in the dataset have this number of classes. If it is set only for a column, then only that column has this number of classes.",
      "properties": {
        "number_of_classes": {
          "type": "integer",
          "description": "The number of unique classes."
        },
        "class_entropy": {
          "type": "numeric",
          "description": "Entropy of the target values."
        },
        "majority_class_ratio": {
          "type": "numeric",
          "description": "Ratio of number of instances belonging to the most frequent class to number of all instances."
        },
        "minority_class_ratio": {
          "type": "numeric",
          "description": "Ratio of number of instances belonging to the least frequent class to number of all instances."
        },
        "majority_class_size": {
          "type": "integer",
          "description": "Number of instances belonging to the most frequent class."
        },
        "minority_class_size": {
          "type": "integer",
          "description": "Number of instances belonging to the least frequent class."
        },
        "dimensionality": {
          "type": "numeric",
          "description": "Number of features divided by the number of instances."
        },
        "number_of_numeric_features": {
          "type": "integer",
          "description": "Number of numeric features."
        },
        "ratio_of_numeric_features": {
          "type": "numeric",
          "description": "Ratio of number of numeric features to total number of features."
        },
        "number_of_discrete_features": {
          "type": "integer",
          "description": "Number of discrete features."
        },
        "ratio_of_discrete_features": {
          "type": "numeric",
          "description": "Ratio of number of discrete features to total number of features."
        },
        "number_of_binary_features": {
          "type": "integer",
          "description": "Number of binary features."
        },
        "ratio_of_binary_features": {
          "type": "numeric",
          "description": "Ratio of number of binary features to total number of features."
        },
        "equivalent_number_of_features": {
          "type": "numeric",
          "description": "Number of features needed to optimally describe the class (under the assumption of independence among features). Equals \"class_entropy\" divided by \"mutual_information_of_features.mean\"."
        },
        "noise_to_signal_ratio": {
          "type": "numeric",
          "description": "An estimate of the amount of irrelevant information in the features regarding the class. Equals (\"entropy_of_features.mean\" - \"mutual_information_of_features.mean\") divided by \"mutual_information_of_features.mean\"."
        },
        "target_values": {
          "allOf": [{"$ref": "#/definitions/aggregate"}],
          "description": "Aggregate statistics of target values."
        },
        "means_of_features": {
          "allOf": [{"$ref": "#/definitions/aggregate"}],
          "description": "Aggregate statistics about the means of numeric features."
        },
        "standard_deviations_of_features": {
          "allOf": [{"$ref": "#/definitions/aggregate"}],
          "description": "Aggregate statistics about the standard deviations of numeric features."
        },
        "kurtosis_of_features": {
          "allOf": [{"$ref": "#/definitions/aggregate"}],
          "description": "Aggregate statistics about the kurtosis of numeric features."
        },
        "skew_of_features": {
          "allOf": [{"$ref": "#/definitions/aggregate"}],
          "description": "Aggregate statistics about the skew of numeric features."
        },
        "entropy_of_features": {
          "allOf": [{"$ref": "#/definitions/aggregate"}],
          "description": "Aggregate statistics about the entropy of categorical features."
        },
        "mutual_information_of_features": {
          "allOf": [{"$ref": "#/definitions/aggregate"}],
          "description": "Aggregate statistics about the mutual information of categorical features."
        },
        "pearson_correlation_of_features": {
          "allOf": [{"$ref": "#/definitions/aggregate"}],
          "description": "Aggregate statistics about the pearson correlation of numeric features."
        },
        "spearman_correlation_of_features": {
          "allOf": [{"$ref": "#/definitions/aggregate"}],
          "description": "Aggregate statistics about the spearman correlation of numeric features."
        },
        "number_distinct_values_of_nominal_features": {
          "allOf": [{"$ref": "#/definitions/aggregate"}],
          "description": "Aggregate statistics about the number of distinct values of nominal features."
        },
        "natural_language_of_feature": {
          "type": "array",
          "description": "Natural language detection that contains pairs of language code and count.",
          "items": {
            "type": "object",
            "properties": {
              "code": {
                "type": "string",
                "description": "ISO 639-1 language code, e.g., \"en\", \"es\", \"zh\"."
              },
              "count": {
                "type": "integer",
                "description": "Number of values in a feature with the given language code."
              }
            },
            "required": [
              "code",
              "count"
            ],
            "additionalProperties": true
          },
          "minItems": 1
        },
        "number_of_instances_with_missing_values": {
          "type": "integer",
          "description": "Number of instances with missing values in one or more features."
        },
        "ratio_of_instances_with_missing_values": {
          "type": "numeric",
          "description": "Ratio of number of instances with missing values in one or more features to number of all instances."
        },
        "number_of_missing_values": {
          "type": "integer",
          "description": "Number of missing values."
        },
        "ratio_of_missing_values": {
          "type": "numeric",
          "description": "Ratio of number of missing values to number of all values."
        },
        "number_of_numeric_values": {
          "type": "integer",
          "description": "Number of values that are strictly integers or floats. The value NaN is not counted."
        },
        "ratio_of_numeric_values": {
          "type": "numeric",
          "description": "Ratio of number of values that are strictly integers or floats to number of all values. The value NaN is not counted."
        },
        "number_of_positive_numeric_values": {
          "type": "integer",
          "description": "Number of positive values."
        },
        "ratio_of_positive_numeric_values": {
          "type": "numeric",
          "description": "Ratio of number of positive values to number of all values."
        },
        "number_of_negative_numeric_values": {
          "type": "integer",
          "description": "Number of negative values."
        },
        "ratio_of_negative_numeric_values": {
          "type": "numeric",
          "description": "Ratio of number of negative values to number of all values."
        },
        "number_of_outlier_numeric_values": {
          "allOf": [{"$ref": "#/definitions/outliers"}],
          "description": "Outliers of numeric values."
        },
        "number_of_numeric_values_equal_0": {
          "type": "integer",
          "description": "Number of 0 or 0.0 values."
        },
        "ratio_of_numeric_values_equal_0": {
          "type": "numeric",
          "description": "Ratio of number of 0 or 0.0 values to number of all values."
        },
        "number_of_numeric_values_equal_1": {
          "type": "integer",
          "description": "Number of 1 or 1.0 values."
        },
        "ratio_of_numeric_values_equal_1": {
          "type": "numeric",
          "description": "Ratio of number of 1 or 1.0 values to number of all values."
        },
        "number_of_numeric_values_equal_-1": {
          "type": "integer",
          "description": "Number of -1 and -1.0."
        },
        "ratio_of_numeric_values_equal_-1": {
          "type": "numeric",
          "description": "Ratio of number of -1 and -1.0 to number of all values."
        },
        "length_of_string_values": {
          "allOf": [{"$ref": "#/definitions/aggregate"}],
          "description": "Aggregate statistics about the length of string values."
        },
        "token_count_in_string_values": {
          "allOf": [{"$ref": "#/definitions/aggregate"}],
          "description": "Aggregate statistics about the number of tokens per string value. Tokens are split by the space character."
        },
        "numeric_char_density": {
          "allOf": [{"$ref": "#/definitions/aggregate"}],
          "description": "Aggregate statistics about numeric character density of string values. Density is defined to be the number of character that satisfies \"isdigit\" divided by the number characters in the string."
        },
        "number_of_values_containing_numeric_char": {
          "type": "integer",
          "description": "Number of string values that contain at least one numeric character."
        },
        "ratio_of_values_containing_numeric_char": {
          "type": "numeric",
          "description": "Ratio of number of string values that contain at least one numeric character to number of all string values."
        },
        "number_of_tokens": {
          "type": "integer",
          "description": "Number of tokens in all string values. Tokens are split by the space character."
        },
        "number_of_tokens_containing_numeric_char": {
          "type": "integer",
          "description": "Number of tokens in all string values that contain at least one numeric character."
        },
        "ratio_of_tokens_containing_numeric_char": {
          "type": "numeric",
          "description": "Ratio of number of tokens in all string values that contain at least one numeric character to number of tokens in all string values."
        },
        "number_of_tokens_split_by_punctuation": {
          "type": "integer",
          "description": "Number of tokens in all string values. Tokens are split by \"string.punctions\"."
        },
        "number_of_tokens_split_by_punctuation_containing_numeric_char": {
          "type": "integer",
          "description": "Number of tokens in all string values that contain at least one numeric character."
        },
        "ratio_of_tokens_split_by_punctuation_containing_numeric_char": {
          "type": "numeric",
          "description": "Ratio of number of tokens in all string values that contain at least one numeric character to number of tokens in all string values split by punctuation."
        },
        "number_of_values_with_leading_spaces": {
          "type": "integer",
          "description": "Number of string values with leading whitespaces."
        },
        "ratio_of_values_with_leading_spaces": {
          "type": "numeric",
          "description": "Ratio of number of string values with leading whitespaces to number of all string values."
        },
        "number_of_values_with_trailing_spaces": {
          "type": "integer",
          "description": "Number of string values with trailing whitespaces."
        },
        "ratio_of_values_with_trailing_spaces": {
          "type": "numeric",
          "description": "Ratio of number of string values with trailing whitespaces to number of all string values."
        },
        "number_of_distinct_values": {
          "type": "integer",
          "description": "Number of distinct values. Missing values are ignored."
        },
        "ratio_of_distinct_values": {
          "type": "numeric",
          "description": "Ratio of number of distinct values to number of all values. Missing values are ignored."
        },
        "number_of_distinct_tokens": {
          "type": "integer",
          "description": "Number of distinct tokens in all string values. Tokens are split by the space character. Missing values are ignored."
        },
        "ratio_of_distinct_tokens": {
          "type": "numeric",
          "description": "Ratio of number of distinct tokens in all string values to number of tokens in all string values. Tokens are split by the space character. Missing values are ignored."
        },
        "number_of_distinct_tokens_split_by_punctuation": {
          "type": "integer",
          "description": "Number of distinct tokens in all string values. Tokens are split by \"string.punctions\". Missing values are ignored."
        },
        "ratio_of_distinct_tokens_split_by_punctuation": {
          "type": "numeric",
          "description": "Ratio of number of distinct tokens in all string values to number of tokens in all string values. Tokens are split by \"string.punctions\". Missing values are ignored."
        },
        "most_common_tokens": {
          "type": "array",
          "description": "Most common tokens and their counts and ratio. Tokens are split by the space character.",
          "items": {
            "type": "object",
            "properties": {
              "token": {
                "type": "string",
                "description": "Token string value."
              },
              "count": {
                "type": "integer",
                "description": "Number of occurrences of this token in all string values."
              },
              "ratio": {
                "type": "number",
                "description": "Ratio of number of occurrences of this token in all string values to number of tokens in all string tokens."
              }
            },
            "required": [
              "token",
              "count"
            ],
            "additionalProperties": true
          },
          "minItems": 1
        },
        "most_common_alphanumeric_tokens": {
          "type": "array",
          "description": "Most common alphanumeric tokens and their counts and ratio. A token is alphanumeric if \"isalnum\" returns \"True\". Tokens are split by the space character.",
          "items": {
            "type": "object",
            "properties": {
              "token": {
                "type": "string",
                "description": "Token string value."
              },
              "count": {
                "type": "integer",
                "description": "Number of occurrences of this token in all string values."
              },
              "ratio": {
                "type": "number",
                "description": "Ratio of number of occurrences of this token in all string values to number of tokens in all string tokens."
              }
            },
            "required": [
              "token",
              "count"
            ],
            "additionalProperties": true
          },
          "minItems": 1
        },
        "most_common_numeric_tokens": {
          "type": "array",
          "description": "Most common numeric tokens and their counts and ratio. Tokens are split by the space character.",
          "items": {
            "type": "object",
            "properties": {
              "token": {
                "type": "string",
                "description": "Token string value."
              },
              "count": {
                "type": "integer",
                "description": "Number of occurrences of this token in all string values."
              },
              "ratio": {
                "type": "number",
                "description": "Ratio of number of occurrences of this token in all string values to number of tokens in all string tokens."
              }
            },
            "required": [
              "token",
              "count"
            ],
            "additionalProperties": true
          },
          "minItems": 1
        },
        "most_common_tokens_split_by_punctuation": {
          "type": "array",
          "description": "Most common tokens and their counts and ratio. Tokens are split by \"string.punctions\".",
          "items": {
            "type": "object",
            "properties": {
              "token": {
                "type": "string",
                "description": "Token string value."
              },
              "count": {
                "type": "integer",
                "description": "Number of occurrences of this token in all string values."
              },
              "ratio": {
                "type": "number",
                "description": "Ratio of number of occurrences of this token in all string values to number of tokens in all string tokens."
              }
            },
            "required": [
              "token",
              "count"
            ],
            "additionalProperties": true
          },
          "minItems": 1
        },
        "most_common_punctuations": {
          "type": "array",
          "description": "The most common punctuations and their counts. Punctuations are defined by \"string.punctions\".",
          "items": {
            "type": "object",
            "properties": {
              "punctuation": {
                "type": "string",
                "description": "Punctuation string value."
              },
              "count": {
                "type": "integer",
                "description": "Number of occurrence of this punctuation in all string values."
              },
              "ratio": {
                "type": "numeric",
                "description": "Ratio of number of occurrences of this punctuation in all string values to number of characters in all string values."
              },
              "punctuation_density_aggregate": {
                "allOf": [{"$ref": "#/definitions/aggregate"}],
                "description": "Aggregate statistics about punctuation density of string values for this punctuation. Punctuation density is the ratio of number of occurrences of this punctuation in the value to the number of characters in the value."
              },
              "punctuation_density_outliers": {
                "allOf": [{"$ref": "#/definitions/outliers"}],
                "description": "Outliers of punctuation density of string values for this punctuation. Punctuation density is the ratio of number of occurrences of this punctuation in the value to the number of characters in the value."
              }
            },
            "required": [
              "punctuation",
              "count"
            ],
            "additionalProperties": true
          },
          "minItems": 1
        },
        "most_common_raw_values": {
          "type": "array",
          "description": "Most common values and their counts and ratio.",
          "items": {
            "type": "object",
            "properties": {
              "value": {
                "type": "string",
                "description": "Value in its raw string format."
              },
              "count": {
                "type": "integer",
                "description": "Number of occurrences of this value in all values."
              },
              "ratio": {
                "type": "number",
                "description": "Ratio of number of occurrences of this value in all values to number of all values."
              }
            },
            "required": [
              "value",
              "count"
            ],
            "additionalProperties": true
          },
          "minItems": 1
        }
      },
      "additionalProperties": true
    },
    "installation": {
      "type": "array",
      "description": "Installation instructions for a primitive. Everything listed has to be installed, in order listed, for a primitive to work.",
      "items": {
        "type": "object",
        "anyOf": [
          {
            "properties": {
              "type": {
                "type": "string",
                "enum": ["PIP"],
                "description": "A Python package. It should be installed with pip's \"--process-dependency-link\" argument enabled."
              },
              "package": {
                "type": "string",
                "description": "Python package name."
              },
              "version": {
                "type": "string",
                "description": "Exact version string."
              },
              "registry": {
                "type": "string"
              }
            },
            "required": [
              "package",
              "type",
              "version"
            ]
          },
          {
            "properties": {
              "type": {
                "type": "string",
                "enum": ["PIP"],
                "description": "A Python package. It should be installed with pip's \"--process-dependency-link\" and \"--editable\" arguments enabled."
              },
              "package_uri": {
                "type": "string",
                "description": "Python package's canonical URI for installation with an exact version of the package, ideally git commit hash. If it is a git URI, \"#egg=package_name\" URI suffix is required.",
                "format": "uri"
              }
            },
            "required": [
              "package_uri",
              "type"
            ]
          },
          {
            "properties": {
              "type": {
                "type": "string",
                "enum": ["DOCKER"],
                "description": "A Docker image."
              },
              "key": {
                "type": "string",
                "description": "When this Docker image runs, its address should be exposed to the primitive under this key."
              },
              "image_name": {
                "type": "string",
                "description": "Docker image name including a label, and optionally prefixed with a registry."
              },
              "image_digest": {
                "type": "string",
                "description": "Docker image digest.",
                "pattern": "^sha256:[a-fA-F0-9]{64}$"
              }
            },
            "required": [
              "image_digest",
              "image_name",
              "type",
              "key"
            ]
          },
          {
            "properties": {
              "type": {
                "type": "string",
                "enum": ["UBUNTU"],
                "description": "A system package."
              },
              "package": {
                "type": "string",
                "description": "Ubuntu package name."
              },
              "version": {
                "type": "string",
                "description": "Exact version string. While the version is required it is not required to install exactly this version of the package with a primitive because generally it is hard to get a hold of an old version to install (old packages get removed or moved to an archive). Knowing a version author of a primitive used can help with debugging to maybe understand why a primitive is misbehaving."
              }
            },
            "required": [
              "package",
              "type",
              "version"
            ]
          }
        ],
        "additionalProperties": true
      },
      "minItems": 1
    },
    "primitive_code": {
      "type": "object",
      "description": "Metadata describing the primitive's code.",
      "properties": {
        "class_type_arguments": {
          "type": "object",
          "description": "A map between type variables in primitive interfaces and their specified types for this primitive.",
          "additionalProperties": {
            "$ref": "#/definitions/structural_type"
          }
        },
        "interfaces_version": {
          "description": "Version of primitive_interfaces package in use by the primitive.",
          "allOf": [{
            "$ref": "#/definitions/version"
          }]
        },
        "interfaces": {
          "type": "array",
          "description": "A list of Python primitive interface classes used by the primitive in method resolution order.",
          "items": {
            "type": "string"
          },
          "minItems": 1
        },
        "params": {
          "type": "object",
          "description": "A map between primitive's parameter names and their types.",
          "additionalProperties": {
            "$ref": "#/definitions/structural_type"
          }
        },
        "hyperparams": {
          "type": "object",
          "description": "A map describing the hyper-parameter space of the primitive, mapping the name of the hyper-parameter to its description.",
          "additionalProperties": {
            "$ref": "#/definitions/hyperparameter"
          }
        },
        "arguments": {
          "type": "object",
          "description": "A map describing all arguments which the primitive as a whole accepts, mapping the name of the argument to its description.",
          "additionalProperties": {
            "type": "object",
            "properties": {
              "type": {
                "$ref": "#/definitions/structural_type"
              },
              "kind": {
                "type": "string",
                "oneOf": [
                  {"enum": ["RUNTIME"], "description": "Arguments which are meaningful only for a runtime executing a pipeline."},
                  {"enum": ["PIPELINE"], "description": "Arguments which can be fulfilled by other primitives in a pipeline."},
                  {"enum": ["HYPERPARAMETER"], "description": "Arguments which are overriding a hyper-parameter value for a method call."}
                ]
              },
              "default": {
                "allOf": [{"$ref": "#/definitions/python_value"}],
                "description": "A default value. Omitted if an argument has no default value."
              }
            },
            "required": [
              "type",
              "kind"
            ],
            "additionalProperties": true
          }
        },
        "class_methods": {
          "type": "object",
          "description": "A map between primitive's class method names and their descriptions.",
          "additionalProperties": {
            "type": "object",
            "properties": {
              "description": {
                "$ref": "#/definitions/description"
              },
              "arguments": {
                "type": "object",
                "additionalProperties": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "$ref": "#/definitions/structural_type"
                    },
                    "default": {
                      "allOf": [{"$ref": "#/definitions/python_value"}],
                      "description": "A default value. Omitted if an argument has no default value."
                    }
                  },
                  "additionalProperties": true,
                  "required": [
                    "type"
                  ]
                }
              },
              "returns": {
                "$ref": "#/definitions/structural_type"
              }
            },
            "required": [
              "arguments",
              "returns"
            ],
            "additionalProperties": true
          }
        },
        "instance_methods": {
          "type": "object",
          "description": "A map between primitive's instance method names and their descriptions.",
          "additionalProperties": {
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "oneOf": [
                  {"enum": ["PRODUCE"], "description": "Methods which outputs can be inputs to another primitive."},
                  {"enum": ["OTHER"], "description": "Methods used by the runtime."}
                ]
              },
              "description": {
                "$ref": "#/definitions/description"
              },
              "arguments": {
                "type": "array",
                "description": "A list of argument names this method accepts. Their description can be found in primitive's \"arguments\" map.",
                "items": {
                  "type": "string"
                }
              },
              "returns": {
                "$ref": "#/definitions/structural_type"
              }
            },
            "required": [
              "kind",
              "arguments",
              "returns"
            ],
            "additionalProperties": true
          }
        },
        "class_attributes": {
          "type": "object",
          "description": "A map between primitive's class attribute names and their types.",
          "additionalProperties": {
            "$ref": "#/definitions/structural_type"
          }
        },
        "instance_attributes": {
          "type": "object",
          "description": "A map between primitive's instance attribute names and their types.",
          "additionalProperties": {
            "$ref": "#/definitions/structural_type"
          }
        }
      },
      "required": [
        "class_type_arguments",
        "interfaces_version",
        "interfaces",
        "hyperparams",
        "arguments",
        "class_methods",
        "instance_methods",
        "class_attributes",
        "instance_attributes"
      ],
      "additionalProperties": true
    },
    "hyperparameter": {
      "type": "object",
      "description": "Description of a hyper-parameter.",
      "properties": {
        "type": {
          "type": "type",
          "description": "A Python type of the hyper-parameter description itself."
        },
        "default": {
          "allOf": [{"$ref": "#/definitions/python_value"}],
          "description": "A default value."
        },
        "structural_type": {
          "$ref": "#/definitions/structural_type"
        },
        "semantic_types": {
          "$ref": "#/definitions/semantic_types"
        },
        "description": {
          "$ref": "#/definitions/description"
        },
        "lower": {
          "$ref": "#/definitions/python_value"
        },
        "upper": {
          "$ref": "#/definitions/python_value"
        },
        "upper_inclusive": {
          "type": "boolean"
        },
        "q": {
          "type": "number"
        },
        "mu": {
          "type": "number"
        },
        "sigma": {
          "type": "number"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/python_value"
          }
        },
        "configuration": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/hyperparameter"
          }
        }
      },
      "required": [
        "type",
        "default",
        "structural_type",
        "semantic_types"
      ],
      "additionalProperties": true
    },
    "structural_type": {
      "type": "type",
      "description": "A Python type."
    },
    "mime_types": {
      "type": "array",
      "description": "MIME type of the value in its extended form defining encoding, e.g., \"text/plain; charset=utf-8\".",
      "items": {
        "type": "string"
      },
      "minItems": 1
    },
    "sampling_rate": {
      "type": "numeric",
      "description": "Sampling rate (frequency) is the number of samples per second."
    },
    "stored_size": {
      "type": "integer",
      "description": "Size in bytes when or if stored to disk."
    },
    "approximate_stored_size": {
      "type": "integer",
      "description": "Approximate size in bytes when or if stored to disk."
    },
    "semantic_types": {
      "type": "array",
      "description": "A list of canonical URIs defining semantic types. Some commonly used URIs are listed as possible values here, but you can use any URI representing a semantic type.",
      "items": {
        "anyOf": [
          {"enum": ["http://schema.org/ImageObject"], "description": "Value is an image."},
          {"enum": ["http://schema.org/VideoObject"], "description": "Value is a video."},
          {"enum": ["http://schema.org/AudioObject"], "description": "Value is an audio clip."},
          {"enum": ["http://schema.org/Text"], "description": "Value is text/string."},
          {"enum": ["https://metadata.datadrivendiscovery.org/types/Speech"], "description": "Value is an audio clip of human speech."},
          {"enum": ["https://metadata.datadrivendiscovery.org/types/Graph"], "description": "Value is a graph structure, e.g., a social network."},
          {"enum": ["https://metadata.datadrivendiscovery.org/types/Table"], "description": "Value is tabular data."},
          {"enum": ["https://metadata.datadrivendiscovery.org/types/Timeseries"], "description": "Value is time-series data."},
          {"enum": ["http://schema.org/Boolean"], "description": "Value represents a boolean."},
          {"enum": ["http://schema.org/Integer"], "description": "Value represents an integer."},
          {"enum": ["http://schema.org/Float"], "description": "Value represents a float."},
          {"enum": ["https://metadata.datadrivendiscovery.org/types/CategoricalData"], "description": "Value represents categorical data."},
          {"enum": ["https://metadata.datadrivendiscovery.org/types/OrdinalData"], "description": "Value represents ordinal data."},
          {"enum": ["https://metadata.datadrivendiscovery.org/types/PrimaryKey"], "description": "Value serves as a primary key."},
          {"enum": ["https://metadata.datadrivendiscovery.org/types/UniqueKey"], "description": "Value serves as an unique key, i.e., it satisfies the uniqueness constraint among other values."},
          {"enum": ["https://metadata.datadrivendiscovery.org/types/Attribute"], "description": "Value serves as an attribute (input feature) to train on or be used for analysis."},
          {"enum": ["https://metadata.datadrivendiscovery.org/types/SuggestedTarget"], "description": "Values serves as a potential target variable for a problem."},
          {"enum": ["https://metadata.datadrivendiscovery.org/types/Time"], "description": "Value represents time."},
          {"enum": ["https://metadata.datadrivendiscovery.org/types/Location"], "description": "Value represents a location."},
          {"enum": ["https://metadata.datadrivendiscovery.org/types/Boundary"], "description": "Value represents a boundary."},
          {"enum": ["https://metadata.datadrivendiscovery.org/types/InstanceWeight"], "description": "Value serves as a weight for an instance."},
          {"enum": ["https://metadata.datadrivendiscovery.org/types/FileName"], "description": "Value is a filename."},
          {"enum": ["https://metadata.datadrivendiscovery.org/types/DatasetResource"], "description": "Value is a dataset resource."},
          {"enum": ["https://metadata.datadrivendiscovery.org/types/TabularRow"], "description": "Value is a row in tabular data."},
          {"enum": ["https://metadata.datadrivendiscovery.org/types/TabularColumn"], "description": "Value is a column in tabular data."},
          {"enum": ["https://metadata.datadrivendiscovery.org/types/TuningParameter"], "description": "Hyper-parameter is a tuning parameter of the primitive."},
          {"enum": ["https://metadata.datadrivendiscovery.org/types/ControlParameter"], "description": "Hyper-parameter is a control parameter of the primitive."},
          {"enum": ["https://metadata.datadrivendiscovery.org/types/ResourcesUseParameter"], "description": "Hyper-parameter is a parameter which controls the use of resources by the primitive."},
          {
            "type": "string",
            "description": "A URI not listed among commonly used URIs. Please feel encouraged to open a merge request adding semantic types you are using so that also others can learn about them.",
            "format": "uri"
          }
        ]
      }
    },
    "location_uris": {
      "type": "array",
      "description": "A list of URIs where the value is stored.",
      "items": {
        "type": "string",
        "format": "uri"
      }
    },
    "location_base_uris": {
      "type": "array",
      "description": "A list of URIs which can be used as a base to determine where the value is stored.",
      "items": {
        "type": "string",
        "format": "uri"
      }
    },
    "source": {
      "type": "object",
      "description": "Information about the source. Author and other information how the value came to be.",
      "properties": {
        "name": {
          "$ref": "#/definitions/name"
        },
        "contact": {
          "type": "string",
          "description": "An URI to contact the source.",
          "format": "uri"
        },
        "uris": {
          "type": "array",
          "description": "A list of URIs where the value is coming from, e.g., website with a dataset, or source code for a primitive.",
          "items": {
            "type": "string",
            "format": "uri"
          }
        },
        "published": {
          "type": "string",
          "description": "A timestamp when was the value made available.",
          "oneOf": [
            {
              "format": "date-time"
            },
            {
              "format": "date"
            }
          ]
        },
        "license": {
          "type": "string",
          "description": "License under which the value is available."
        },
        "citation": {
          "type": "string",
          "description": "Citation of the source."
        },
        "human_subjects_research": {
          "type": "boolean",
          "description": "Does value contain human subjects data or not."
        },
        "redacted": {
          "type": "boolean",
          "description": "Has the value been redacted."
        },
        "from": {
          "type": "object",
          "oneOf": [
            {
              "properties": {
                "type": {
                  "type": "string",
                  "enum": ["REDACTED"],
                  "description": "The value has been redacted from the referenced value."
                },
                "id": {
                  "$ref": "#/definitions/id"
                },
                "version": {
                  "$ref": "#/definitions/version"
                }
              },
              "required": [
                "id",
                "type",
                "version"
              ]
            }
          ],
          "additionalProperties": true
        }
      },
      "additionalProperties": true
    },
    "keywords": {
      "type": "array",
      "description": "A list of keywords. Strings in an unspecified language and vocabulary.",
      "items": {
        "type": "string"
      }
    },
    "foreign_key": {
      "type": "object",
      "description": "Columns in a table in a database resource can reference other resources.",
      "oneOf": [
        {
          "properties": {
            "type": {
              "type": "string",
              "enum": ["COLUMN"],
              "description": "The foreign key is referencing a column in a table in a database resource."
            },
            "resource_id": {
              "type": "string"
            },
            "column_index": {
              "type": "integer"
            }
          },
          "required": [
            "type",
            "resource_id",
            "column_index"
          ]
        },
        {
          "properties": {
            "type": {
              "type": "string",
              "enum": ["COLUMN"],
              "description": "The foreign key is referencing a column in a table in a database resource."
            },
            "resource_id": {
              "type": "string"
            },
            "column_name": {
              "type": "string"
            }
          },
          "required": [
            "type",
            "resource_id",
            "column_name"
          ]
        },
        {
          "properties": {
            "type": {
              "type": "string",
              "enum": ["NODE"],
              "description": "The foreign key is referencing a node in a database resource, a graph."
            },
            "resource_id": {
              "type": "string"
            }
          },
          "required": [
            "type",
            "resource_id"
          ]
        },
        {
          "properties": {
            "type": {
              "type": "string",
              "enum": ["EDGE"],
              "description": "The foreign key is referencing an edge in a database resource, a graph."
            },
            "resource_id": {
              "type": "string"
            }
          },
          "required": [
            "type",
            "resource_id"
          ]
        },
        {
          "properties": {
            "type": {
              "type": "string",
              "enum": ["NODE_ATTRIBUTE"],
              "description": "The foreign key is referencing a node attribute in a database resource, a graph."
            },
            "resource_id": {
              "type": "string"
            }
          },
          "required": [
            "type",
            "resource_id"
          ]
        },
        {
          "properties": {
            "type": {
              "type": "string",
              "enum": ["EDGE_ATTRIBUTE"],
              "description": "The foreign key is referencing an edge attribute in a database resource, a graph."
            },
            "resource_id": {
              "type": "string"
            }
          },
          "required": [
            "type",
            "resource_id"
          ]
        }
      ]
    },
    "algorithm_types": {
      "type": "array",
      "description": "Algorithm type describes the underlying implementation of the primitive. It uses controlled, standardized, but open vocabulary which means that if types which would best describe your primitive are missing, please feel encouraged to open a merge request adding them.",
      "items": {
        "anyOf": [
          {"enum": ["ACCURACY_SCORE"], "description": "https://en.wikipedia.org/wiki/Accuracy_and_precision"},
          {"enum": ["ADABOOST"], "description": "https://en.wikipedia.org/wiki/AdaBoost"},
          {"enum": ["ADAPTIVE_ALGORITHM"], "description": "https://en.wikipedia.org/wiki/Adaptive_algorithm"},
          {"enum": ["AGGREGATE_FUNCTION"], "description": "https://en.wikipedia.org/wiki/Aggregate_function"},
          {"enum": ["ALMEIDA_PINEDA_RECURRENT_BACKPROPAGATION"], "description": "https://en.wikipedia.org/wiki/Almeida%E2%80%93Pineda_recurrent_backpropagation"},
          {"enum": ["ALOPEX"], "description": "https://en.wikipedia.org/wiki/ALOPEX"},
          {"enum": ["ALTERNATING_DECISION_TREE"], "description": "https://en.wikipedia.org/wiki/Alternating_decision_tree"},
          {"enum": ["ANT_COLONY_OPTIMIZATION"], "description": "https://en.wikipedia.org/wiki/Ant_colony_optimization_algorithms"},
          {"enum": ["ASSOCIATION_RULE_LEARNING"], "description": "https://en.wikipedia.org/wiki/Association_rule_learning"},
          {"enum": ["ASSOCIATIVE_NEURAL_NETWORK"]},
          {"enum": ["ATTRACTOR_NETWORK"], "description": "https://en.wikipedia.org/wiki/Attractor_network"},
          {"enum": ["AUDIO_MIXING"], "description": "https://en.wikipedia.org/wiki/Audio_mixing_(recorded_music)"},
          {"enum": ["AUDIO_STREAM_MANIPULATION"], "description": "https://en.wikipedia.org/wiki/Audio_signal_processing"},
          {"enum": ["AUGMENTED_LAGRANGIAN_METHOD"], "description": "https://en.wikipedia.org/wiki/Augmented_Lagrangian_method"},
          {"enum": ["AUTOENCODER"], "description": "https://en.wikipedia.org/wiki/Autoencoder"},
          {"enum": ["AUTOREGRESSIVE_INTEGRATED_MOVING_AVERAGE"], "description": "https://en.wikipedia.org/wiki/Autoregressive_integrated_moving_average"},
          {"enum": ["BACKWARD_DIFFERENCE_CODING"], "description": "https://stats.idre.ucla.edu/r/library/r-library-contrast-coding-systems-for-categorical-variables/#backward"},
          {"enum": ["BAYESIAN_LINEAR_REGRESSION"], "description": "https://en.wikipedia.org/wiki/Bayesian_linear_regression"},
          {"enum": ["BAYESIAN_MODEL_AVERAGING"], "description": "https://en.wikipedia.org/wiki/Bootstrap_aggregating"},
          {"enum": ["BAYESIAN_NETWORK"], "description": "https://en.wikipedia.org/wiki/Bayesian_network"},
          {"enum": ["BAYESIAN_OPTIMIZATION"]},
          {"enum": ["BELIEF_PROPAGATION"], "description": "https://en.wikipedia.org/wiki/Belief_propagation"},
          {"enum": ["BIRCH"], "description": "https://en.wikipedia.org/wiki/Bayesian_optimization"},
          {"enum": ["BOLTZMANN_MACHINE"], "description": "https://en.wikipedia.org/wiki/BIRCH"},
          {"enum": ["BOOSTING"], "description": "https://en.wikipedia.org/wiki/Boltzmann_machine"},
          {"enum": ["BOOTSTRAP_AGGREGATING"], "description": "https://en.wikipedia.org/wiki/Boosting_(machine_learning)"},
          {"enum": ["BOOTSTRAPPING"], "description": "https://en.wikipedia.org/wiki/Bootstrapping_(statistics)"},
          {"enum": ["BRANCH_AND_BOUND"], "description": "https://en.wikipedia.org/wiki/Branch_and_bound"},
          {"enum": ["BRIER_SCORE"], "description": "https://en.wikipedia.org/wiki/Brier_score"},
          {"enum": ["BROOKS_IYENGAR"], "description": "https://en.wikipedia.org/wiki/Brooks%E2%80%93Iyengar_algorithm"},
          {"enum": ["BROWNBOOST"], "description": "https://en.wikipedia.org/wiki/BrownBoost"},
          {"enum": ["C45"], "description": "https://en.wikipedia.org/wiki/C4.5_algorithm"},
          {"enum": ["C50"]},
          {"enum": ["CANONICAL_CORRELATION_ANALYSIS"], "description": "https://en.wikipedia.org/wiki/Canonical_correlation"},
          {"enum": ["CASCADE_CORRELATION_NETWORK"]},
          {"enum": ["CASE_BASED_REASONING"], "description": "https://en.wikipedia.org/wiki/Case-based_reasoning"},
          {"enum": ["CATEGORY_ENCODER"]},
          {"enum": ["CLASSIFIER_CHAINS"], "description": "https://en.wikipedia.org/wiki/Classifier_chains"},
          {"enum": ["CN2"], "description": "https://en.wikipedia.org/wiki/CN2_algorithm"},
          {"enum": ["COBWEB"], "description": "https://en.wikipedia.org/wiki/Cobweb_(clustering)"},
          {"enum": ["COEFFICIENT_OF_DETERMINATION"], "description": "https://en.wikipedia.org/wiki/Coefficient_of_determination"},
          {"enum": ["COLOR_SPACE_CONVERSION"], "description": "https://en.wikipedia.org/wiki/Color_space"},
          {"enum": ["COMMITTEE_MACHINE"], "description": "https://en.wikipedia.org/wiki/Committee_machine"},
          {"enum": ["COMPOSITIONAL_PATTERN_PRODUCING_NETWORK"], "description": "https://en.wikipedia.org/wiki/Compositional_pattern-producing_network"},
          {"enum": ["COMPUTER_ALGEBRA"], "description": "https://en.wikipedia.org/wiki/Computer_algebra"},
          {"enum": ["CONDITIONAL_RANDOM_FIELD"], "description": "https://en.wikipedia.org/wiki/Conditional_random_field"},
          {"enum": ["CONTEXTUAL_BANDIT"]},
          {"enum": ["CONVOLUTIONAL_NEURAL_NETWORK"], "description": "https://en.wikipedia.org/wiki/Convolutional_neural_network"},
          {"enum": ["COORDINATE_DESCENT"], "description": "https://en.wikipedia.org/wiki/Coordinate_descent"},
          {"enum": ["CORRELATION_CLUSTERING"], "description": "https://en.wikipedia.org/wiki/Correlation_clustering"},
          {"enum": ["CORTICAL_LEARNING"]},
          {"enum": ["COTRAINING"], "description": "https://en.wikipedia.org/wiki/Co-training"},
          {"enum": ["CROSS_ENTROPY"], "description": "https://en.wikipedia.org/wiki/Cross_entropy"},
          {"enum": ["CROSS_ENTROPY_METHOD"], "description": "https://en.wikipedia.org/wiki/Cross-entropy_method"},
          {"enum": ["CROSS_VALIDATION"], "description": "https://en.wikipedia.org/wiki/Cross-validation_(statistics)"},
          {"enum": ["CULTURAL_ALGORITHM"], "description": "https://en.wikipedia.org/wiki/Cultural_algorithm"},
          {"enum": ["DATA_CONVERSION"], "description": "https://en.wikipedia.org/wiki/Data_conversion"},
          {"enum": ["DATA_DENORMALIZATION"], "description": "https://en.wikipedia.org/wiki/Denormalization"},
          {"enum": ["DATA_NORMALIZATION"], "description": "https://en.wikipedia.org/wiki/Database_normalization"},
          {"enum": ["DATA_PROFILING"], "description": "https://en.wikipedia.org/wiki/Data_profiling"},
          {"enum": ["DATA_STREAM_CLUSTERING"], "description": "https://en.wikipedia.org/wiki/Data_stream_clustering"},
          {"enum": ["DATA_STREAM_MINING"], "description": "https://en.wikipedia.org/wiki/Data_stream_mining"},
          {"enum": ["DATA_STRUCTURE_ALIGNMENT"], "description": "https://en.wikipedia.org/wiki/Data_structure_alignment"},
          {"enum": ["DBSCAN"], "description": "https://en.wikipedia.org/wiki/DBSCAN"},
          {"enum": ["DECISION_STUMP"], "description": "https://en.wikipedia.org/wiki/Decision_stump"},
          {"enum": ["DECISION_TREE"], "description": "https://en.wikipedia.org/wiki/Decision_tree"},
          {"enum": ["DEEP_BELIEF_NETWORK"], "description": "https://en.wikipedia.org/wiki/Deep_belief_network"},
          {"enum": ["DEEP_FEATURE_SYNTHESIS"], "description": "https://groups.csail.mit.edu/EVO-DesignOpt/groupWebSite/uploads/Site/DSAA_DSM_2015.pdf"},
          {"enum": ["DEEP_NEURAL_NETWORK"], "description": "https://en.wikipedia.org/wiki/Deep_learning#Deep_neural_networks"},
          {"enum": ["DEINTERLACING"], "description": "https://en.wikipedia.org/wiki/Deinterlacing"},
          {"enum": ["DISCRETIZATION"], "description": "https://en.wikipedia.org/wiki/Discretization"},
          {"enum": ["DPLL"], "description": "https://en.wikipedia.org/wiki/DPLL_algorithm"},
          {"enum": ["DROPOUT"], "description": "https://en.wikipedia.org/wiki/Dropout_(neural_networks)"},
          {"enum": ["DYNAMIC_NEURAL_NETWORK"]},
          {"enum": ["DYNAMIC_TIME_WARPING"], "description": "https://en.wikipedia.org/wiki/Dynamic_time_warping"},
          {"enum": ["EAGER_LEARNING"], "description": "https://en.wikipedia.org/wiki/Eager_learning"},
          {"enum": ["ECHO_STATE_NETWORK"], "description": "https://en.wikipedia.org/wiki/Echo_state_network"},
          {"enum": ["ECLAT"]},
          {"enum": ["EDGERANK"], "description": "https://en.wikipedia.org/wiki/EdgeRank"},
          {"enum": ["ELASTIC_NET_REGULARIZATION"], "description": "https://en.wikipedia.org/wiki/Elastic_net_regularization"},
          {"enum": ["ENCODE_BINARY"], "description": "https://en.wikipedia.org/wiki/Binary_code"},
          {"enum": ["ENCODE_ONE_HOT"], "description": "https://en.wikipedia.org/wiki/One-hot"},
          {"enum": ["ENCODE_ORDINAL"]},
          {"enum": ["ENCODE_UNARY"], "description": "https://en.wikipedia.org/wiki/Unary_numeral_system"},
          {"enum": ["ENSEMBLE_LEARNING"], "description": "https://en.wikipedia.org/wiki/Ensemble_learning"},
          {"enum": ["EVOLUTIONARY_ACQUISITION_OF_NEURAL_TOPOLOGIES"], "description": "https://en.wikipedia.org/wiki/Evolutionary_acquisition_of_neural_topologies"},
          {"enum": ["EVOLUTIONARY_MULTIMODAL_OPTIMIZATION"], "description": "https://en.wikipedia.org/wiki/Evolutionary_multimodal_optimization"},
          {"enum": ["EXPECTATION_MAXIMIZATION_ALGORITHM"], "description": "https://en.wikipedia.org/wiki/Expectation%E2%80%93maximization_algorithm"},
          {"enum": ["EXTENSION_NEURAL_NETWORK"], "description": "https://en.wikipedia.org/wiki/Extension_neural_network"},
          {"enum": ["EXTREME_LEARNING_MACHINE"], "description": "https://en.wikipedia.org/wiki/Extreme_learning_machine"},
          {"enum": ["F1_SCORE"], "description": "https://en.wikipedia.org/wiki/F1_score"},
          {"enum": ["FALSE_NEAREST_NEIGHBOR"], "description": "https://en.wikipedia.org/wiki/False_nearest_neighbor_algorithm"},
          {"enum": ["FASTICA"], "description": "https://en.wikipedia.org/wiki/FastICA"},
          {"enum": ["FEATURE_SCALING"], "description": "https://en.wikipedia.org/wiki/Feature_scaling"},
          {"enum": ["FEEDFORWARD_NEURAL_NETWORK"], "description": "https://en.wikipedia.org/wiki/Feedforward_neural_network"},
          {"enum": ["FELLEGI_SUNTER_ALGORITHM"]},
          {"enum": ["FILE_MANIPULATION"], "description": "https://en.wikipedia.org/wiki/Computer_file"},
          {"enum": ["FISHER_KERNEL"], "description": "https://en.wikipedia.org/wiki/Fisher_kernel"},
          {"enum": ["FORWARD_ALGORITHM"], "description": "https://en.wikipedia.org/wiki/Forward_algorithm"},
          {"enum": ["FORWARD_BACKWARD_ALGORITHM"], "description": "https://en.wikipedia.org/wiki/Forward%E2%80%93backward_algorithm"},
          {"enum": ["FORWARD_DIFFERENCE_CODING"], "description": "https://stats.idre.ucla.edu/r/library/r-library-contrast-coding-systems-for-categorical-variables/#forward"},
          {"enum": ["FRANK_WOLFE_ALGORITHM"], "description": "https://en.wikipedia.org/wiki/Frank%E2%80%93Wolfe_algorithm"},
          {"enum": ["FREQUENCY_TRANSFORM"], "description": "https://en.wikipedia.org/wiki/Frequency_domain"},
          {"enum": ["FUZZY_CLUSTERING"], "description": "https://en.wikipedia.org/wiki/Fuzzy_clustering"},
          {"enum": ["GAUSSIAN_BLUR"], "description": "https://en.wikipedia.org/wiki/Gaussian_blur"},
          {"enum": ["GAUSSIAN_PROCESS"], "description": "https://en.wikipedia.org/wiki/Gaussian_process"},
          {"enum": ["GENERALIZED_HEBBIAN_ALGORITHM"], "description": "https://en.wikipedia.org/wiki/Generalized_Hebbian_Algorithm"},
          {"enum": ["GENERATIVE_TOPOGRAPHIC_MAP"], "description": "https://en.wikipedia.org/wiki/Generative_topographic_map"},
          {"enum": ["GENETIC_ALGORITHM"], "description": "https://en.wikipedia.org/wiki/Genetic_algorithm"},
          {"enum": ["GENETIC_ALGORITHM_FOR_RULE_SET_PRODUCTION"], "description": "https://en.wikipedia.org/wiki/Genetic_Algorithm_for_Rule_Set_Production"},
          {"enum": ["GENETIC_PROGRAMMING"], "description": "https://en.wikipedia.org/wiki/Genetic_programming"},
          {"enum": ["GENETIC_SCALE_RECURRENT_NEURAL_NETWORK"]},
          {"enum": ["GLOVE"], "description": "https://en.wikipedia.org/wiki/GloVe_(machine_learning)"},
          {"enum": ["GRADIENT_BOOSTING"], "description": "https://en.wikipedia.org/wiki/Gradient_boosting"},
          {"enum": ["GRADIENT_DESCENT"], "description": "https://en.wikipedia.org/wiki/Gradient_descent"},
          {"enum": ["GRAPHICAL_LASSO"], "description": "https://en.wikipedia.org/wiki/Graphical_lasso"},
          {"enum": ["GROWING_SELF_ORGANIZING_MAP"], "description": "https://en.wikipedia.org/wiki/Growing_self-organizing_map"},
          {"enum": ["HASHING"], "description": "https://en.wikipedia.org/wiki/Hash_function"},
          {"enum": ["HELMERT_CODING"], "description": "https://stats.idre.ucla.edu/r/library/r-library-contrast-coding-systems-for-categorical-variables/#HELMERT"},
          {"enum": ["HIDDEN_MARKOV_MODEL"], "description": "https://en.wikipedia.org/wiki/Hidden_Markov_model"},
          {"enum": ["HIDDEN_SEMI_MARKOV_MODEL"], "description": "https://en.wikipedia.org/wiki/Hidden_semi-Markov_model"},
          {"enum": ["HIERARCHICAL_CLUSTERING"], "description": "https://en.wikipedia.org/wiki/Hierarchical_clustering"},
          {"enum": ["HIERARCHICAL_TEMPORAL_MEMORY"], "description": "https://en.wikipedia.org/wiki/Hierarchical_temporal_memory"},
          {"enum": ["HIGHER_ORDER_SINGULAR_VALUE_DECOMPOSITION"], "description": "https://en.wikipedia.org/wiki/Higher-order_singular_value_decomposition"},
          {"enum": ["HOLDOUT"], "description": "https://en.wikipedia.org/wiki/Cross-validation_(statistics)#Holdout_method"},
          {"enum": ["HOLOGRAPHIC_ASSOCIATIVE_MEMORY"], "description": "https://en.wikipedia.org/wiki/Holographic_associative_memory"},
          {"enum": ["HOPFIELD_NETWORK"], "description": "https://en.wikipedia.org/wiki/Hopfield_network"},
          {"enum": ["HOSHEN_KOPELMAN_ALGORITHM"], "description": "https://en.wikipedia.org/wiki/Hoshen%E2%80%93Kopelman_algorithm"},
          {"enum": ["HYPER_BASIS_FUNCTION_NETWORK"], "description": "https://en.wikipedia.org/wiki/Hyper_basis_function_network"},
          {"enum": ["HYPERNEAT"], "description": "https://en.wikipedia.org/wiki/HyperNEAT"},
          {"enum": ["ID3"], "description": "https://en.wikipedia.org/wiki/ID3"},
          {"enum": ["IMAGE_CROPPING"], "description": "https://en.wikipedia.org/wiki/Cropping_(image)"},
          {"enum": ["IMAGE_PADDING"]},
          {"enum": ["IMAGE_ROTATION"]},
          {"enum": ["IMAGE_SCALING"], "description": "https://en.wikipedia.org/wiki/Image_scaling"},
          {"enum": ["IMAGE_TRANSFORM"]},
          {"enum": ["IMPUTATION"], "description": "https://en.wikipedia.org/wiki/Imputation_(statistics)"},
          {"enum": ["INDEPENDENT_COMPONENT_ANALYSIS"], "description": "https://en.wikipedia.org/wiki/Independent_component_analysis"},
          {"enum": ["INFORMATION_ENTROPY"], "description": "https://en.wikipedia.org/wiki/Entropy_(information_theory)"},
          {"enum": ["INFORMATION_FUZZY_NETWORKS"], "description": "https://en.wikipedia.org/wiki/Information_fuzzy_networks"},
          {"enum": ["INSTANCE_BASED_LEARNING"], "description": "https://en.wikipedia.org/wiki/Instance-based_learning"},
          {"enum": ["INSTANTANEOUSLY_TRAINED_NEURAL_NETWORKS"], "description": "https://en.wikipedia.org/wiki/Instantaneously_trained_neural_networks"},
          {"enum": ["ISOMAP"], "description": "https://en.wikipedia.org/wiki/Isomap"},
          {"enum": ["JACCARD_INDEX"], "description": "https://en.wikipedia.org/wiki/Jaccard_index"},
          {"enum": ["JUNCTION_TREE_ALGORITHM"], "description": "https://en.wikipedia.org/wiki/Junction_tree_algorithm"},
          {"enum": ["KERNEL_ADAPTIVE_FILTER"], "description": "https://en.wikipedia.org/wiki/Kernel_adaptive_filter"},
          {"enum": ["KERNEL_INDEPENDENT_COMPONENT_ANALYSIS"], "description": "https://en.wikipedia.org/wiki/Kernel-independent_component_analysis"},
          {"enum": ["KERNEL_METHOD"], "description": "https://en.wikipedia.org/wiki/Kernel_method"},
          {"enum": ["KERNEL_PERCEPTRON"], "description": "https://en.wikipedia.org/wiki/Kernel_perceptron"},
          {"enum": ["KERNEL_PRINCIPAL_COMPONENT_ANALYSIS"], "description": "https://en.wikipedia.org/wiki/Kernel_principal_component_analysis"},
          {"enum": ["KERNEL_RANDOM_FOREST"], "description": "https://en.wikipedia.org/wiki/Random_forest#Kernel_random_forest"},
          {"enum": ["K_FOLD"], "description": "https://en.wikipedia.org/wiki/Cross-validation_(statistics)#k-fold_cross-validation"},
          {"enum": ["K_MEANS_CLUSTERING"], "description": "https://en.wikipedia.org/wiki/K-means_clustering"},
          {"enum": ["K_MEANS_PLUS_PLUS"], "description": "https://en.wikipedia.org/wiki/K-means%2B%2B"},
          {"enum": ["K_NEAREST_NEIGHBORS"], "description": "https://en.wikipedia.org/wiki/K-nearest_neighbors_algorithm"},
          {"enum": ["K_Q_FLATS"], "description": "https://en.wikipedia.org/wiki/K_q-flats"},
          {"enum": ["K_SVD"], "description": "https://en.wikipedia.org/wiki/K-SVD"},
          {"enum": ["LARGE_MARGIN_NEAREST_NEIGHBOR"], "description": "https://en.wikipedia.org/wiki/Large_margin_nearest_neighbor"},
          {"enum": ["LASSO"], "description": "https://en.wikipedia.org/wiki/Lasso_(statistics)"},
          {"enum": ["LATENT_DIRICHLET_ALLOCATION"], "description": "https://en.wikipedia.org/wiki/Latent_Dirichlet_allocation"},
          {"enum": ["LATENT_SEMANTIC_ANALYSIS"], "description": "https://en.wikipedia.org/wiki/Latent_semantic_analysis"},
          {"enum": ["LEARNING_VECTOR_QUANTIZATION"], "description": "https://en.wikipedia.org/wiki/Learning_vector_quantization"},
          {"enum": ["LEAST_SQUARES_SUPPORT_VECTOR_MACHINE"], "description": "https://en.wikipedia.org/wiki/Least_squares_support_vector_machine"},
          {"enum": ["LEAVE_ONE_OUT"], "description": "https://en.wikipedia.org/wiki/Cross-validation_(statistics)#Leave-one-out_cross-validation"},
          {"enum": ["LIGHTGBM"]},
          {"enum": ["LIMITED_MEMORY_BFGS"], "description": "https://en.wikipedia.org/wiki/Limited-memory_BFGS"},
          {"enum": ["LINDE_BUZO_GRAY_ALGORITHM"], "description": "https://en.wikipedia.org/wiki/Linde%E2%80%93Buzo%E2%80%93Gray_algorithm"},
          {"enum": ["LINEAR_DISCRIMINANT_ANALYSIS"], "description": "https://en.wikipedia.org/wiki/Linear_discriminant_analysis"},
          {"enum": ["LINEAR_FILTER"], "description": "https://en.wikipedia.org/wiki/Linear_filter"},
          {"enum": ["LINEAR_REGRESSION"], "description": "https://en.wikipedia.org/wiki/Linear_regression"},
          {"enum": ["LOBPCG"], "description": "https://en.wikipedia.org/wiki/LOBPCG"},
          {"enum": ["LOCAL_OUTLIER_FACTOR"], "description": "https://en.wikipedia.org/wiki/Local_outlier_factor"},
          {"enum": ["LOCAL_SEARCH"], "description": "https://en.wikipedia.org/wiki/Local_search_(optimization)"},
          {"enum": ["LOGISTIC_MODEL_TREE"], "description": "https://en.wikipedia.org/wiki/Logistic_model_tree"},
          {"enum": ["LOGISTIC_REGRESSION"], "description": "https://en.wikipedia.org/wiki/Logistic_regression"},
          {"enum": ["LOGITBOOST"], "description": "https://en.wikipedia.org/wiki/LogitBoost"},
          {"enum": ["LONG_SHORT_TERM_MEMORY"], "description": "https://en.wikipedia.org/wiki/Long_short-term_memory"},
          {"enum": ["LOW_RANK_MATRIX_APPROXIMATIONS"], "description": "https://en.wikipedia.org/wiki/Low-rank_matrix_approximations"},
          {"enum": ["LPBOOST"], "description": "https://en.wikipedia.org/wiki/LPBoost"},
          {"enum": ["MARGIN_CLASSIFIER"], "description": "https://en.wikipedia.org/wiki/Margin_classifier"},
          {"enum": ["MARGIN_INFUSED_RELAXED_ALGORITHM"], "description": "https://en.wikipedia.org/wiki/Margin-infused_relaxed_algorithm"},
          {"enum": ["MARKOV_CHAIN"], "description": "https://en.wikipedia.org/wiki/Markov_chain"},
          {"enum": ["MARKOV_CHAIN_MONTE_CARLO"], "description": "https://en.wikipedia.org/wiki/Markov_chain_Monte_Carlo"},
          {"enum": ["MARKOV_DECISION_PROCESS"], "description": "https://en.wikipedia.org/wiki/Markov_decision_process"},
          {"enum": ["MARKOV_LOGIC_NETWORK"], "description": "https://en.wikipedia.org/wiki/Markov_logic_network"},
          {"enum": ["MARKOV_MODEL"], "description": "https://en.wikipedia.org/wiki/Markov_model"},
          {"enum": ["MEAN_ABSOLUTE_ERROR"], "description": "https://en.wikipedia.org/wiki/Mean_absolute_error"},
          {"enum": ["MEAN_SHIFT"], "description": "https://en.wikipedia.org/wiki/Mean_shift"},
          {"enum": ["MEAN_SQUARED_ERROR"], "description": " https://en.wikipedia.org/wiki/Mean_squared_error"},
          {"enum": ["MEMETIC_ALGORITHM"], "description": "https://en.wikipedia.org/wiki/Memetic_algorithm"},
          {"enum": ["MEMORY_PREDICTION_FRAMEWORK"], "description": "https://en.wikipedia.org/wiki/Memory-prediction_framework"},
          {"enum": ["MERSENNE_TWISTER"], "description": "https://en.wikipedia.org/wiki/Mersenne_Twister"},
          {"enum": ["MFCC_FEATURE_EXTRACTION"], "description": "The HTK Book, http://www.dsic.upv.es/docs/posgrado/20/RES/materialesDocentes/alejandroViewgraphs/htkbook.pdf"},
          {"enum": ["MIN_CONFLICTS_ALGORITHM"], "description": "https://en.wikipedia.org/wiki/Min-conflicts_algorithm"},
          {"enum": ["MINIMUM_REDUNDANCY_FEATURE_SELECTION"], "description": "https://en.wikipedia.org/wiki/Minimum_redundancy_feature_selection"},
          {"enum": ["MINMAX_SCALER"]},
          {"enum": ["MM_ALGORITHM"], "description": "https://en.wikipedia.org/wiki/MM_algorithm"},
          {"enum": ["MODULAR_NEURAL_NETWORK"], "description": "https://en.wikipedia.org/wiki/Modular_neural_network"},
          {"enum": ["MONTE_CARLO_TREE_SEARCH"], "description": "https://en.wikipedia.org/wiki/Monte_Carlo_tree_search"},
          {"enum": ["MORAVEC_CORNER_DETECTION_ALGORITHM"]},
          {"enum": ["MOTION_COMPENSATION"], "description": "https://en.wikipedia.org/wiki/Motion_compensation"},
          {"enum": ["MULTI_ARMED_BANDIT"], "description": "https://en.wikipedia.org/wiki/Multi-armed_bandit"},
          {"enum": ["MULTILAYER_PERCEPTRON"], "description": "https://en.wikipedia.org/wiki/Multilayer_perceptron"},
          {"enum": ["MULTINOMIAL_LOGISTIC_REGRESSION"], "description": "https://en.wikipedia.org/wiki/Multinomial_logistic_regression"},
          {"enum": ["MULTINOMIAL_NAIVE_BAYES"], "description": "http://scikit-learn.org/stable/modules/naive_bayes.html#multinomial-naive-bayes, https://nlp.stanford.edu/IR-book/html/htmledition/naive-bayes-text-classification-1.html"},
          {"enum": ["MULTIPLICATIVE_WEIGHT_UPDATE_METHOD"], "description": "https://en.wikipedia.org/wiki/Multiplicative_weight_update_method"},
          {"enum": ["MUTUAL_INFORMATION"], "description": "https://en.wikipedia.org/wiki/Mutual_information"},
          {"enum": ["NAIVE_BAYES_CLASSIFIER"], "description": "https://en.wikipedia.org/wiki/Naive_Bayes_classifier"},
          {"enum": ["NEAREST_CENTROID_CLASSIFIER"], "description": "https://en.wikipedia.org/wiki/Nearest_centroid_classifier"},
          {"enum": ["NEIGHBOURHOOD_COMPONENTS_ANALYSIS"], "description": "https://en.wikipedia.org/wiki/Neighbourhood_components_analysis"},
          {"enum": ["NEURAL_NETWORK_BACKPROPAGATION"], "description": "https://en.wikipedia.org/wiki/Backpropagation"},
          {"enum": ["NEUROEVOLUTION_OF_AUGMENTED_TOPOLOGIES"], "description": "https://en.wikipedia.org/wiki/Neuroevolution_of_augmenting_topologies"},
          {"enum": ["NEURO_FUZZY_NETWORK"], "description": "https://en.wikipedia.org/wiki/Neuro-fuzzy"},
          {"enum": ["N_GRAM"], "description": "https://en.wikipedia.org/wiki/N-gram"},
          {"enum": ["NOISE_REDUCTION"], "description": "https://en.wikipedia.org/wiki/Noise_reduction"},
          {"enum": ["NORMAL_DISTRIBUTION"], "description": "https://en.wikipedia.org/wiki/Normal_distribution"},
          {"enum": ["NUMERICAL_METHOD"], "description": "https://en.wikipedia.org/wiki/Numerical_method"},
          {"enum": ["ONE_RULE"]},
          {"enum": ["ONE_SHOT_ASSOCIATIVE_MEMORY"]},
          {"enum": ["ONE_SHOT_LEARNING"], "description": "https://en.wikipedia.org/wiki/One-shot_learning"},
          {"enum": ["OPTICS_ALGORITHM"], "description": "https://en.wikipedia.org/wiki/OPTICS_algorithm"},
          {"enum": ["OPTIMISTIC_KNOWLEDGE_GRADIENT"], "description": "https://en.wikipedia.org/wiki/Optimistic_knowledge_gradient"},
          {"enum": ["ORTHOGONAL_POLYNOMIAL_CODING"], "description": "https://stats.idre.ucla.edu/r/library/r-library-contrast-coding-systems-for-categorical-variables/#ORTHOGONAL"},
          {"enum": ["PACHINKO_ALLOCATION"], "description": "https://en.wikipedia.org/wiki/Pachinko_allocation"},
          {"enum": ["PAGERANK"], "description": "https://en.wikipedia.org/wiki/PageRank"},
          {"enum": ["PARAMETRIC_TRAJECTORY_MODELING"], "description": "Gish, H. and Ng, K., 1996, October. Parametric trajectory models for speech recognition. In Spoken Language, 1996. ICSLP 96. Proceedings., Fourth International Conference on (Vol. 1, pp. 466-469). IEEE."},
          {"enum": ["PARTIAL_LEAST_SQUARES_REGRESSION"], "description": "https://en.wikipedia.org/wiki/Partial_least_squares_regression"},
          {"enum": ["PARTICLE_SWARM_OPTIMIZATION"], "description": "https://en.wikipedia.org/wiki/Particle_swarm_optimization"},
          {"enum": ["PASSIVE_AGGRESSIVE"], "description": "http://jmlr.csail.mit.edu/papers/volume7/crammer06a/crammer06a.pdf"},
          {"enum": ["PERCEPTRON"], "description": "https://en.wikipedia.org/wiki/Perceptron"},
          {"enum": ["PHYSICAL_NEURAL_NETWORK"], "description": "https://en.wikipedia.org/wiki/Physical_neural_network"},
          {"enum": ["PIXELATION"], "description": "https://en.wikipedia.org/wiki/Pixelation"},
          {"enum": ["POLYNOMIAL_NEURAL_NETWORK"]},
          {"enum": ["POPULATION_BASED_INCREMENTAL_LEARNING"], "description": "https://en.wikipedia.org/wiki/Population-based_incremental_learning"},
          {"enum": ["PREFRONTAL_CORTEX_BASAL_GANGLIA_WORKING_MEMORY"], "description": "https://en.wikipedia.org/wiki/Prefrontal_cortex_basal_ganglia_working_memory"},
          {"enum": ["PRINCIPAL_COMPONENT_ANALYSIS"], "description": "https://en.wikipedia.org/wiki/Principal_component_analysis"},
          {"enum": ["PROBABILISTIC_DATA_CLEANING"]},
          {"enum": ["PROBABILISTIC_LATENT_SEMANTIC_ANALYSIS"], "description": "https://en.wikipedia.org/wiki/Probabilistic_latent_semantic_analysis"},
          {"enum": ["PROBABILISTIC_NEURAL_NETWORK"], "description": "https://en.wikipedia.org/wiki/Probabilistic_neural_network"},
          {"enum": ["PRUNING"], "description": "https://en.wikipedia.org/wiki/Pruning_(decision_trees)"},
          {"enum": ["PSIPRED"], "description": "https://en.wikipedia.org/wiki/PSIPRED"},
          {"enum": ["Q_LEARNING"], "description": "https://en.wikipedia.org/wiki/Q-learning"},
          {"enum": ["QUADRATIC_DISCRIMINANT_ANALYSIS"], "description": "https://en.wikipedia.org/wiki/Quadratic_classifier#Quadratic_discriminant_analysis"},
          {"enum": ["QUANTUM_NEURAL_NETWORK"], "description": "https://en.wikipedia.org/wiki/Quantum_neural_network"},
          {"enum": ["QUICKPROP"], "description": "https://en.wikipedia.org/wiki/Quickprop"},
          {"enum": ["RADIAL_BASIS_FUNCTION_NETWORK"], "description": "https://en.wikipedia.org/wiki/Radial_basis_function_network"},
          {"enum": ["RANDOM_FOREST"], "description": "https://en.wikipedia.org/wiki/Random_forest"},
          {"enum": ["RANDOM_GRAPH"], "description": "https://en.wikipedia.org/wiki/Random_graph"},
          {"enum": ["RANDOMIZED_WEIGHTED_MAJORITY_ALGORITHM"], "description": "https://en.wikipedia.org/wiki/Randomized_weighted_majority_algorithm"},
          {"enum": ["RANDOM_PROJECTION"], "description": "https://en.wikipedia.org/wiki/Random_projection"},
          {"enum": ["RANDOM_SUBSPACE_METHOD"], "description": "https://en.wikipedia.org/wiki/Random_subspace_method"},
          {"enum": ["RANDOM_WALK"], "description": "https://en.wikipedia.org/wiki/Random_walk"},
          {"enum": ["RANKBRAIN"], "description": "https://en.wikipedia.org/wiki/RankBrain"},
          {"enum": ["RANKING_SVM"], "description": "https://en.wikipedia.org/wiki/Ranking_SVM"},
          {"enum": ["RAPIDLY_EXPLORING_RANDOM_TREE"], "description": "https://en.wikipedia.org/wiki/Rapidly-exploring_random_tree"},
          {"enum": ["RECEIVER_OPERATING_CHARACTERISTIC"], "description": "https://en.wikipedia.org/wiki/Receiver_operating_characteristic"},
          {"enum": ["RECURRENT_NEURAL_NETWORK"], "description": "https://en.wikipedia.org/wiki/Recurrent_neural_network"},
          {"enum": ["RECURSIVE_LEAST_SQUARES"], "description": "https://en.wikipedia.org/wiki/Recursive_least_squares_filter"},
          {"enum": ["RECURSIVE_PARTITIONING"], "description": "https://en.wikipedia.org/wiki/Recursive_partitioning"},
          {"enum": ["REGULARIZATION_BY_SPECTRAL_FILTERING"], "description": "https://en.wikipedia.org/wiki/Regularization_by_spectral_filtering"},
          {"enum": ["REGULARIZED_LEAST_SQUARES"], "description": "https://en.wikipedia.org/wiki/Regularized_least_squares"},
          {"enum": ["REGULATORY_FEEDBACK_NETWORK"], "description": "https://en.wikipedia.org/wiki/Regulatory_feedback_network"},
          {"enum": ["REINFORCE_ALGORITHM"]},
          {"enum": ["REJECTION_SAMPLING"], "description": "https://en.wikipedia.org/wiki/Rejection_sampling"},
          {"enum": ["RELATIONAL_DATA_MINING"], "description": "https://en.wikipedia.org/wiki/Relational_data_mining"},
          {"enum": ["RELIEF"], "description": "https://en.wikipedia.org/wiki/Relief_(feature_selection)"},
          {"enum": ["RESTRICTED_BOLTZMANN_MACHINE"], "description": "https://en.wikipedia.org/wiki/Restricted_Boltzmann_machine"},
          {"enum": ["REVERSE_HELMERT_CODING"], "description": "https://stats.idre.ucla.edu/r/library/r-library-contrast-coding-systems-for-categorical-variables/#reverse"},
          {"enum": ["REVERSE_MONTE_CARLO"], "description": "https://en.wikipedia.org/wiki/Reverse_Monte_Carlo"},
          {"enum": ["RIPPER"], "description": "https://en.wikipedia.org/wiki/Repeated_incremental_pruning_to_produce_error_reduction_(RIPPER)"},
          {"enum": ["RPROP"], "description": "https://en.wikipedia.org/wiki/Rprop"},
          {"enum": ["RULE_BASED_MACHINE_LEARNING"], "description": "https://en.wikipedia.org/wiki/Rule-based_machine_learning"},
          {"enum": ["SELF_ORGANIZING_MAP"], "description": "https://en.wikipedia.org/wiki/Self-organizing_map"},
          {"enum": ["SEMIDEFINITE_EMBEDDING"], "description": "https://en.wikipedia.org/wiki/Semidefinite_embedding"},
          {"enum": ["SIGNAL_DITHERING"], "description": "https://en.wikipedia.org/wiki/Dither"},
          {"enum": ["SIGNAL_ENERGY"], "description": "https://en.wikipedia.org/wiki/Energy_(signal_processing)"},
          {"enum": ["SIGNAL_TO_NOISE_RATIO"], "description": "https://en.wikipedia.org/wiki/Signal-to-noise_ratio"},
          {"enum": ["SIMULATED_ANNEALING"], "description": "https://en.wikipedia.org/wiki/Simulated_annealing"},
          {"enum": ["SINGULAR_VALUE_DECOMPOSITION"], "description": "https://en.wikipedia.org/wiki/Singular-value_decomposition"},
          {"enum": ["SMOOTHED_ANALYSIS"], "description": "https://en.wikipedia.org/wiki/Smoothed_analysis"},
          {"enum": ["SOFTMAX_FUNCTION"], "description": "https://en.wikipedia.org/wiki/Softmax_function"},
          {"enum": ["SPARSE_DICTIONARY_LEARNING"], "description": "https://en.wikipedia.org/wiki/Sparse_dictionary_learning"},
          {"enum": ["SPARSE_PCA"], "description": "https://en.wikipedia.org/wiki/Sparse_PCA"},
          {"enum": ["SPIKE_AND_SLAB_VARIABLE_SELECTION"], "description": "https://en.wikipedia.org/wiki/Spike-and-slab_variable_selection"},
          {"enum": ["SPIKING_NEURAL_NETWORKS"], "description": "https://en.wikipedia.org/wiki/Spiking_neural_network"},
          {"enum": ["SPRUCE"], "description": "https://gitlab.com/zinkov/spruce/blob/master/README.md"},
          {"enum": ["STATISTICAL_MOMENT_ANALYSIS"], "description": "https://en.wikipedia.org/wiki/Moment_(mathematics)"},
          {"enum": ["STOCHASTIC_CHAINS_WITH_MEMORY_OF_VARIABLE_LENGTH"], "description": "https://en.wikipedia.org/wiki/Stochastic_chains_with_memory_of_variable_length"},
          {"enum": ["STOCHASTIC_GRADIENT_DESCENT"], "description": "https://en.wikipedia.org/wiki/Stochastic_gradient_descent"},
          {"enum": ["STOCHASTIC_NEURAL_NETWORK"], "description": "https://en.wikipedia.org/wiki/Stochastic_neural_network"},
          {"enum": ["STRUCTURED_KNN"], "description": "https://en.wikipedia.org/wiki/Structured_kNN"},
          {"enum": ["STRUCTURED_SPARSITY_REGULARIZATION"], "description": "https://en.wikipedia.org/wiki/Structured_sparsity_regularization"},
          {"enum": ["STRUCTURED_SUPPORT_VECTOR_MACHINE"], "description": "https://en.wikipedia.org/wiki/Structured_support_vector_machine"},
          {"enum": ["SUM_CODING"]},
          {"enum": ["SUPER_RECURSIVE_ALGORITHM"], "description": "https://en.wikipedia.org/wiki/Super-recursive_algorithm"},
          {"enum": ["SUPPORT_VECTOR_MACHINE"], "description": "https://en.wikipedia.org/wiki/Support_vector_machine"},
          {"enum": ["SYMBOLIC_REGRESSION"], "description": "https://en.wikipedia.org/wiki/Symbolic_regression"},
          {"enum": ["T_DISTRIBUTED_STOCHASTIC_NEIGHBOR_EMBEDDING"], "description": "https://en.wikipedia.org/wiki/T-distributed_stochastic_neighbor_embedding"},
          {"enum": ["TIKHONOV_REGULARIZATION"], "description": "https://en.wikipedia.org/wiki/Tikhonov_regularization"},
          {"enum": ["TIME_DELAY_NEURAL_NETWORK"], "description": "https://en.wikipedia.org/wiki/Time_delay_neural_network"},
          {"enum": ["TRUNCATED_NEWTON_METHOD"], "description": "https://en.wikipedia.org/wiki/Truncated_Newton_method"},
          {"enum": ["TRUNCATED_NORMAL_DISTRIBUTION"], "description": "https://en.wikipedia.org/wiki/Truncated_normal_distribution"},
          {"enum": ["UNIFORM_DISTRIBUTION"], "description": "https://en.wikipedia.org/wiki/Uniform_distribution_(continuous)"},
          {"enum": ["UNIFORM_TIMESERIES_SEGMENTATION"], "description": "Time-series segmentation into fixed-sized segments (windows, frames)"},
          {"enum": ["UNIT_WEIGHTED_REGRESSION"], "description": "https://en.wikipedia.org/wiki/Unit-weighted_regression"},
          {"enum": ["UNIVERSAL_PORTFOLIO_ALGORITHM"], "description": "https://en.wikipedia.org/wiki/Universal_portfolio_algorithm"},
          {"enum": ["VARIABLE_ORDER_MARKOV_MODEL"], "description": "https://en.wikipedia.org/wiki/Variable-order_Markov_model"},
          {"enum": ["VARIATIONAL_BAYESIAN_METHODS"], "description": "https://en.wikipedia.org/wiki/Variational_Bayesian_methods"},
          {"enum": ["VARIATIONAL_MESSAGE_PASSING"], "description": "https://en.wikipedia.org/wiki/Variational_message_passing"},
          {"enum": ["VECTOR_QUANTIZATION"], "description": "https://en.wikipedia.org/wiki/Vector_quantization"},
          {"enum": ["VERSION_SPACE_LEARNING"], "description": "https://en.wikipedia.org/wiki/Version_space_learning"},
          {"enum": ["WAKE_SLEEP_ALGORITHM"], "description": "https://en.wikipedia.org/wiki/Wake-sleep_algorithm"},
          {"enum": ["WEIGHTED_MAJORITY_ALGORITHM"], "description": "https://en.wikipedia.org/wiki/Weighted_majority_algorithm_(machine_learning)"},
          {"enum": ["WINNOW"], "description": "https://en.wikipedia.org/wiki/Winnow_(algorithm)"},
          {"enum": ["WORD2VEC"], "description": "https://en.wikipedia.org/wiki/Word2vec"}
        ]
      },
      "minItems": 1
    },
    "primitive_family": {
      "description": "Primitive family describes the high-level purpose/nature of the primitive. Only one value per primitive is possible. Consider splitting a primitive into multiple primitives if this represents a problem for you.",
      "oneOf": [
        {"enum": ["CLASSIFICATION"], "description": "https://en.wikipedia.org/wiki/Statistical_classification"},
        {"enum": ["CLUSTERING"], "description": "https://en.wikipedia.org/wiki/Cluster_analysis"},
        {"enum": ["COLLABORATIVE_FILTERING"], "description": "https://en.wikipedia.org/wiki/Collaborative_filtering"},
        {"enum": ["COMMUNITY_DETECTION"]},
        {"enum": ["DATA_CLEANING"], "description": "https://en.wikipedia.org/wiki/Data_cleansing"},
        {"enum": ["DATA_COMPRESSION"], "description": "https://en.wikipedia.org/wiki/Data_compression"},
        {"enum": ["DATA_GENERATION"], "description": "https://en.wikipedia.org/wiki/Data_generating_process"},
        {"enum": ["DATA_PREPROCESSING"], "description": "https://en.wikipedia.org/wiki/Data_pre-processing"},
        {"enum": ["DATA_TRANSFORMATION"], "description": "https://en.wikipedia.org/wiki/Data_transformation"},
        {"enum": ["DATA_VALIDATION"], "description": "https://en.wikipedia.org/wiki/Data_validation"},
        {"enum": ["DATA_WRANGLING"], "description": "https://en.wikipedia.org/wiki/Data_wrangling"},
        {"enum": ["DIGITAL_IMAGE_PROCESSING"], "description": "https://en.wikipedia.org/wiki/Digital_image_processing"},
        {"enum": ["DIGITAL_SIGNAL_PROCESSING"], "description": "https://en.wikipedia.org/wiki/Digital_signal_processing"},
        {"enum": ["EVALUATION"], "description": "Primitives providing validation/evaluation, like cross-validation."},
        {"enum": ["FEATURE_CONSTRUCTION"], "description": "A primitive which creates new features."},
        {"enum": ["FEATURE_EXTRACTION"], "description": "https://en.wikipedia.org/wiki/Feature_extraction"},
        {"enum": ["FEATURE_SELECTION"], "description": "https://en.wikipedia.org/wiki/Feature_selection"},
        {"enum": ["GRAPH_CLUSTERING"]},
        {"enum": ["GRAPH_MATCHING"], "description": "https://en.wikipedia.org/wiki/Graph_matching"},
        {"enum": ["LEARNER"], "description": "A primitive which is a learner/model."},
        {"enum": ["LINK_PREDICTION"]},
        {"enum": ["LOSS_FUNCTION"], "description": "Primitives can take a loss function as an argument. This family of primitives provide such loss functions and they can be passed as an argument to other primitives."},
        {"enum": ["METAFEATURE_EXTRACTION"], "description": "Computes metadata and metafeatures to assist in pipeline construction."},
        {"enum": ["NORMALIZATION"]},
        {"enum": ["OPERATOR"], "description": "A simple mathematical operator."},
        {"enum": ["REGRESSION"], "description": "A primitive which can be used to address regression problems."},
        {"enum": ["SIMILARITY_MODELING"], "description": "A primitive which attempts to learn or infer a measure of similarity or dissimilarity between pairs of instances."},
        {"enum": ["TIMESERIES_CLASSIFICATION"], "description": "A primitive which can be used to address classification problems of time-series."},
        {"enum": ["TIMESERIES_FORECASTING"]},
        {"enum": ["TIMESERIES_SEGMENTATION"], "description": "A primitive which segments an input time-series into a sequence of discrete segments in order to reveal the underlying properties of its source. https://en.wikipedia.org/wiki/Time-series_segmentation."},
        {"enum": ["VERTEX_NOMINATION"]},
        {"enum": ["VIDEO_PROCESSING"], "description": "https://en.wikipedia.org/wiki/Video_processing"}
      ]
    },
    "preconditions":{
      "type": "array",
      "description":"A set of requirements for the data given as an input to this primitive. For example, a primitive may not be able to handle data with missing values.",
      "items": {
        "anyOf": [
          {"enum": ["NO_MISSING_VALUES"], "description": "The primitive cannot handle missing values."},
          {"enum": ["NO_CATEGORICAL_VALUES"], "description": "The primitive cannot handle categorical values."},
          {"enum": ["NO_NEGATIVE_VALUES"], "description": "The primitive cannot handle negative values."},
          {"enum": ["NO_CONTINUOUS_VALUES"], "description": "The primitive cannot handle continuous values."},
          {"enum": ["NO_JAGGED_VALUES"], "description": "The primitive cannot handle values where different elements of data have different dimensions. Both numpy arrays and pandas support only fixed dimension sizes, but a list of lists could have some sub-lists of a different length to others, or a numpy array of objects where objects are numpy arrays of different sizes."}
        ]
      },
      "minItems": 1
    },
    "effects":{
      "type": "array",
      "description":"A set of postconditions obtained by the data processed by this primitive. For example, a primitive may remove missing values.",
      "items": {
        "anyOf":[
          {"enum": ["NO_MISSING_VALUES"], "description": "The primitive removes missing values (e.g., imputation)."},
          {"enum": ["NO_CATEGORICAL_VALUES"], "description": "The primitive removes categorical columns (e.g., label encoder)."},
          {"enum": ["NO_NEGATIVE_VALUES"], "description": "The primitive produces only non-negative values."},
          {"enum": ["NO_CONTINUOUS_VALUES"], "description": "The data produced by this primitive is discretized."},
          {"enum": ["NO_JAGGED_VALUES"], "description": "The primitive produces values with fixed dimension sizes across all elements."}
        ]
      },
      "minItems": 1
    },
    "hyperparams_to_tune":{
      "type": "array",
      "description": "A list containing the significant hyper-parameter names of a primitive that should be tuned (for prioritizing hyper-parameter tuning). For instance, if a primitive has 10 hyper-parameters, this metadata may be used to specify the two or three that affect the results the most.",
      "items": {
        "type": "string"
      },
      "minItems": 1
    },
    "outliers": {
      "type": "array",
      "description": "Number of outliers n sigma away from mean for some list of numbers.",
      "items": {
        "type": "object",
        "properties": {
          "n": {
            "type": "integer"
          },
          "count": {
            "type": "integer"
          }
        },
        "required": [
          "n",
          "count"
        ],
        "additionalProperties": true
      },
      "minItems": 1
    },
    "aggregate": {
      "type": "object",
      "description": "Aggregate metadata about some list of numbers.",
      "properties": {
        "name": {
          "$ref": "#/definitions/name"
        },
        "description": {
          "$ref": "#/definitions/description"
        },
        "min": {
          "type": "numeric",
          "description": "Minimum value of the list."
        },
        "max": {
          "type": "numeric",
          "description": "Maximum value of the list."
        },
        "mean": {
          "type": "numeric",
          "description": "Mean value of the list."
        },
        "median": {
          "type": "numeric",
          "description": "Median value of the list."
        },
        "std": {
          "type": "numeric",
          "description": "Standard deviation value of the list."
        },
        "quartile_1": {
          "type": "numeric",
          "description": "The 25th percentile value of the list."
        },
        "quartile_3": {
          "type": "numeric",
          "description": "The 75th percentile value of the list."
        },
        "kurtosis": {
          "type": "numeric",
          "description": "The kurtosis of the distribution."
        },
        "skewness": {
          "type": "numeric",
          "description": "The skew of the distribution."
        }
      },
      "additionalProperties": true
    },
    "python_value": {
      "type": ["number", "boolean", "string"],
      "description": "A value as a number, boolean, or a string representation of a Python value."
    }
  }
}
