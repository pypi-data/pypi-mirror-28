# coding: utf-8

"""
    Digitick REST API

    The Digitick REST API is a set of methods giving access to catalog, user and cart management.

    OpenAPI spec version: v1.0
    Contact: contact@digitick.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class EventsResponseInner(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'presentation1': 'str',
        'producer1': 'str',
        'producer2': 'str',
        'sponsor': 'str',
        'category_id': 'int',
        'sub_category_id': 'int',
        'picture_url110_png': 'str',
        'picture_url80_gif': 'str',
        'picture_url45_gif': 'str',
        'picture_copyright': 'str',
        'venue': 'str',
        'address': 'str',
        'zip_code': 'str',
        'city': 'str',
        'country_id': 'int',
        'number_of_dates': 'int',
        'first_date': 'str',
        'last_date': 'str',
        'number_of_prices': 'int',
        'min_price_cents': 'int',
        'max_price_cents': 'int',
        'vat_percentage': 'str',
        'is_exclu': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'presentation1': 'presentation1',
        'producer1': 'producer1',
        'producer2': 'producer2',
        'sponsor': 'sponsor',
        'category_id': 'categoryId',
        'sub_category_id': 'subCategoryId',
        'picture_url110_png': 'pictureUrl110Png',
        'picture_url80_gif': 'pictureUrl80Gif',
        'picture_url45_gif': 'pictureUrl45Gif',
        'picture_copyright': 'pictureCopyright',
        'venue': 'venue',
        'address': 'address',
        'zip_code': 'zipCode',
        'city': 'city',
        'country_id': 'countryId',
        'number_of_dates': 'numberOfDates',
        'first_date': 'firstDate',
        'last_date': 'lastDate',
        'number_of_prices': 'numberOfPrices',
        'min_price_cents': 'minPriceCents',
        'max_price_cents': 'maxPriceCents',
        'vat_percentage': 'vatPercentage',
        'is_exclu': 'isExclu'
    }

    def __init__(self, id=None, name=None, presentation1=None, producer1=None, producer2=None, sponsor=None, category_id=None, sub_category_id=None, picture_url110_png=None, picture_url80_gif=None, picture_url45_gif=None, picture_copyright=None, venue=None, address=None, zip_code=None, city=None, country_id=None, number_of_dates=None, first_date=None, last_date=None, number_of_prices=None, min_price_cents=None, max_price_cents=None, vat_percentage=None, is_exclu=None):
        """
        EventsResponseInner - a model defined in Swagger
        """

        self._id = None
        self._name = None
        self._presentation1 = None
        self._producer1 = None
        self._producer2 = None
        self._sponsor = None
        self._category_id = None
        self._sub_category_id = None
        self._picture_url110_png = None
        self._picture_url80_gif = None
        self._picture_url45_gif = None
        self._picture_copyright = None
        self._venue = None
        self._address = None
        self._zip_code = None
        self._city = None
        self._country_id = None
        self._number_of_dates = None
        self._first_date = None
        self._last_date = None
        self._number_of_prices = None
        self._min_price_cents = None
        self._max_price_cents = None
        self._vat_percentage = None
        self._is_exclu = None

        if id is not None:
          self.id = id
        if name is not None:
          self.name = name
        if presentation1 is not None:
          self.presentation1 = presentation1
        if producer1 is not None:
          self.producer1 = producer1
        if producer2 is not None:
          self.producer2 = producer2
        if sponsor is not None:
          self.sponsor = sponsor
        if category_id is not None:
          self.category_id = category_id
        if sub_category_id is not None:
          self.sub_category_id = sub_category_id
        if picture_url110_png is not None:
          self.picture_url110_png = picture_url110_png
        if picture_url80_gif is not None:
          self.picture_url80_gif = picture_url80_gif
        if picture_url45_gif is not None:
          self.picture_url45_gif = picture_url45_gif
        if picture_copyright is not None:
          self.picture_copyright = picture_copyright
        if venue is not None:
          self.venue = venue
        if address is not None:
          self.address = address
        if zip_code is not None:
          self.zip_code = zip_code
        if city is not None:
          self.city = city
        if country_id is not None:
          self.country_id = country_id
        if number_of_dates is not None:
          self.number_of_dates = number_of_dates
        if first_date is not None:
          self.first_date = first_date
        if last_date is not None:
          self.last_date = last_date
        if number_of_prices is not None:
          self.number_of_prices = number_of_prices
        if min_price_cents is not None:
          self.min_price_cents = min_price_cents
        if max_price_cents is not None:
          self.max_price_cents = max_price_cents
        if vat_percentage is not None:
          self.vat_percentage = vat_percentage
        if is_exclu is not None:
          self.is_exclu = is_exclu

    @property
    def id(self):
        """
        Gets the id of this EventsResponseInner.

        :return: The id of this EventsResponseInner.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this EventsResponseInner.

        :param id: The id of this EventsResponseInner.
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this EventsResponseInner.

        :return: The name of this EventsResponseInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this EventsResponseInner.

        :param name: The name of this EventsResponseInner.
        :type: str
        """

        self._name = name

    @property
    def presentation1(self):
        """
        Gets the presentation1 of this EventsResponseInner.

        :return: The presentation1 of this EventsResponseInner.
        :rtype: str
        """
        return self._presentation1

    @presentation1.setter
    def presentation1(self, presentation1):
        """
        Sets the presentation1 of this EventsResponseInner.

        :param presentation1: The presentation1 of this EventsResponseInner.
        :type: str
        """

        self._presentation1 = presentation1

    @property
    def producer1(self):
        """
        Gets the producer1 of this EventsResponseInner.

        :return: The producer1 of this EventsResponseInner.
        :rtype: str
        """
        return self._producer1

    @producer1.setter
    def producer1(self, producer1):
        """
        Sets the producer1 of this EventsResponseInner.

        :param producer1: The producer1 of this EventsResponseInner.
        :type: str
        """

        self._producer1 = producer1

    @property
    def producer2(self):
        """
        Gets the producer2 of this EventsResponseInner.

        :return: The producer2 of this EventsResponseInner.
        :rtype: str
        """
        return self._producer2

    @producer2.setter
    def producer2(self, producer2):
        """
        Sets the producer2 of this EventsResponseInner.

        :param producer2: The producer2 of this EventsResponseInner.
        :type: str
        """

        self._producer2 = producer2

    @property
    def sponsor(self):
        """
        Gets the sponsor of this EventsResponseInner.

        :return: The sponsor of this EventsResponseInner.
        :rtype: str
        """
        return self._sponsor

    @sponsor.setter
    def sponsor(self, sponsor):
        """
        Sets the sponsor of this EventsResponseInner.

        :param sponsor: The sponsor of this EventsResponseInner.
        :type: str
        """

        self._sponsor = sponsor

    @property
    def category_id(self):
        """
        Gets the category_id of this EventsResponseInner.

        :return: The category_id of this EventsResponseInner.
        :rtype: int
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """
        Sets the category_id of this EventsResponseInner.

        :param category_id: The category_id of this EventsResponseInner.
        :type: int
        """

        self._category_id = category_id

    @property
    def sub_category_id(self):
        """
        Gets the sub_category_id of this EventsResponseInner.

        :return: The sub_category_id of this EventsResponseInner.
        :rtype: int
        """
        return self._sub_category_id

    @sub_category_id.setter
    def sub_category_id(self, sub_category_id):
        """
        Sets the sub_category_id of this EventsResponseInner.

        :param sub_category_id: The sub_category_id of this EventsResponseInner.
        :type: int
        """

        self._sub_category_id = sub_category_id

    @property
    def picture_url110_png(self):
        """
        Gets the picture_url110_png of this EventsResponseInner.

        :return: The picture_url110_png of this EventsResponseInner.
        :rtype: str
        """
        return self._picture_url110_png

    @picture_url110_png.setter
    def picture_url110_png(self, picture_url110_png):
        """
        Sets the picture_url110_png of this EventsResponseInner.

        :param picture_url110_png: The picture_url110_png of this EventsResponseInner.
        :type: str
        """

        self._picture_url110_png = picture_url110_png

    @property
    def picture_url80_gif(self):
        """
        Gets the picture_url80_gif of this EventsResponseInner.

        :return: The picture_url80_gif of this EventsResponseInner.
        :rtype: str
        """
        return self._picture_url80_gif

    @picture_url80_gif.setter
    def picture_url80_gif(self, picture_url80_gif):
        """
        Sets the picture_url80_gif of this EventsResponseInner.

        :param picture_url80_gif: The picture_url80_gif of this EventsResponseInner.
        :type: str
        """

        self._picture_url80_gif = picture_url80_gif

    @property
    def picture_url45_gif(self):
        """
        Gets the picture_url45_gif of this EventsResponseInner.

        :return: The picture_url45_gif of this EventsResponseInner.
        :rtype: str
        """
        return self._picture_url45_gif

    @picture_url45_gif.setter
    def picture_url45_gif(self, picture_url45_gif):
        """
        Sets the picture_url45_gif of this EventsResponseInner.

        :param picture_url45_gif: The picture_url45_gif of this EventsResponseInner.
        :type: str
        """

        self._picture_url45_gif = picture_url45_gif

    @property
    def picture_copyright(self):
        """
        Gets the picture_copyright of this EventsResponseInner.

        :return: The picture_copyright of this EventsResponseInner.
        :rtype: str
        """
        return self._picture_copyright

    @picture_copyright.setter
    def picture_copyright(self, picture_copyright):
        """
        Sets the picture_copyright of this EventsResponseInner.

        :param picture_copyright: The picture_copyright of this EventsResponseInner.
        :type: str
        """

        self._picture_copyright = picture_copyright

    @property
    def venue(self):
        """
        Gets the venue of this EventsResponseInner.

        :return: The venue of this EventsResponseInner.
        :rtype: str
        """
        return self._venue

    @venue.setter
    def venue(self, venue):
        """
        Sets the venue of this EventsResponseInner.

        :param venue: The venue of this EventsResponseInner.
        :type: str
        """

        self._venue = venue

    @property
    def address(self):
        """
        Gets the address of this EventsResponseInner.

        :return: The address of this EventsResponseInner.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """
        Sets the address of this EventsResponseInner.

        :param address: The address of this EventsResponseInner.
        :type: str
        """

        self._address = address

    @property
    def zip_code(self):
        """
        Gets the zip_code of this EventsResponseInner.

        :return: The zip_code of this EventsResponseInner.
        :rtype: str
        """
        return self._zip_code

    @zip_code.setter
    def zip_code(self, zip_code):
        """
        Sets the zip_code of this EventsResponseInner.

        :param zip_code: The zip_code of this EventsResponseInner.
        :type: str
        """

        self._zip_code = zip_code

    @property
    def city(self):
        """
        Gets the city of this EventsResponseInner.

        :return: The city of this EventsResponseInner.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """
        Sets the city of this EventsResponseInner.

        :param city: The city of this EventsResponseInner.
        :type: str
        """

        self._city = city

    @property
    def country_id(self):
        """
        Gets the country_id of this EventsResponseInner.

        :return: The country_id of this EventsResponseInner.
        :rtype: int
        """
        return self._country_id

    @country_id.setter
    def country_id(self, country_id):
        """
        Sets the country_id of this EventsResponseInner.

        :param country_id: The country_id of this EventsResponseInner.
        :type: int
        """

        self._country_id = country_id

    @property
    def number_of_dates(self):
        """
        Gets the number_of_dates of this EventsResponseInner.

        :return: The number_of_dates of this EventsResponseInner.
        :rtype: int
        """
        return self._number_of_dates

    @number_of_dates.setter
    def number_of_dates(self, number_of_dates):
        """
        Sets the number_of_dates of this EventsResponseInner.

        :param number_of_dates: The number_of_dates of this EventsResponseInner.
        :type: int
        """

        self._number_of_dates = number_of_dates

    @property
    def first_date(self):
        """
        Gets the first_date of this EventsResponseInner.

        :return: The first_date of this EventsResponseInner.
        :rtype: str
        """
        return self._first_date

    @first_date.setter
    def first_date(self, first_date):
        """
        Sets the first_date of this EventsResponseInner.

        :param first_date: The first_date of this EventsResponseInner.
        :type: str
        """

        self._first_date = first_date

    @property
    def last_date(self):
        """
        Gets the last_date of this EventsResponseInner.

        :return: The last_date of this EventsResponseInner.
        :rtype: str
        """
        return self._last_date

    @last_date.setter
    def last_date(self, last_date):
        """
        Sets the last_date of this EventsResponseInner.

        :param last_date: The last_date of this EventsResponseInner.
        :type: str
        """

        self._last_date = last_date

    @property
    def number_of_prices(self):
        """
        Gets the number_of_prices of this EventsResponseInner.

        :return: The number_of_prices of this EventsResponseInner.
        :rtype: int
        """
        return self._number_of_prices

    @number_of_prices.setter
    def number_of_prices(self, number_of_prices):
        """
        Sets the number_of_prices of this EventsResponseInner.

        :param number_of_prices: The number_of_prices of this EventsResponseInner.
        :type: int
        """

        self._number_of_prices = number_of_prices

    @property
    def min_price_cents(self):
        """
        Gets the min_price_cents of this EventsResponseInner.

        :return: The min_price_cents of this EventsResponseInner.
        :rtype: int
        """
        return self._min_price_cents

    @min_price_cents.setter
    def min_price_cents(self, min_price_cents):
        """
        Sets the min_price_cents of this EventsResponseInner.

        :param min_price_cents: The min_price_cents of this EventsResponseInner.
        :type: int
        """

        self._min_price_cents = min_price_cents

    @property
    def max_price_cents(self):
        """
        Gets the max_price_cents of this EventsResponseInner.

        :return: The max_price_cents of this EventsResponseInner.
        :rtype: int
        """
        return self._max_price_cents

    @max_price_cents.setter
    def max_price_cents(self, max_price_cents):
        """
        Sets the max_price_cents of this EventsResponseInner.

        :param max_price_cents: The max_price_cents of this EventsResponseInner.
        :type: int
        """

        self._max_price_cents = max_price_cents

    @property
    def vat_percentage(self):
        """
        Gets the vat_percentage of this EventsResponseInner.

        :return: The vat_percentage of this EventsResponseInner.
        :rtype: str
        """
        return self._vat_percentage

    @vat_percentage.setter
    def vat_percentage(self, vat_percentage):
        """
        Sets the vat_percentage of this EventsResponseInner.

        :param vat_percentage: The vat_percentage of this EventsResponseInner.
        :type: str
        """

        self._vat_percentage = vat_percentage

    @property
    def is_exclu(self):
        """
        Gets the is_exclu of this EventsResponseInner.

        :return: The is_exclu of this EventsResponseInner.
        :rtype: bool
        """
        return self._is_exclu

    @is_exclu.setter
    def is_exclu(self, is_exclu):
        """
        Sets the is_exclu of this EventsResponseInner.

        :param is_exclu: The is_exclu of this EventsResponseInner.
        :type: bool
        """

        self._is_exclu = is_exclu

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, EventsResponseInner):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
