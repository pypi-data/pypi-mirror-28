# coding: utf-8

"""
    Digitick REST API

    The Digitick REST API is a set of methods giving access to catalog, user and cart management.

    OpenAPI spec version: v1.0
    Contact: contact@digitick.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DeliveryMode(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, label=None, management_fees_cents=None, delay_day=None, day_limitation=None, tickets_limitation=None, description=None):
        """
        DeliveryMode - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'label': 'str',
            'management_fees_cents': 'int',
            'delay_day': 'int',
            'day_limitation': 'int',
            'tickets_limitation': 'int',
            'description': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'label': 'label',
            'management_fees_cents': 'managementFeesCents',
            'delay_day': 'delayDay',
            'day_limitation': 'dayLimitation',
            'tickets_limitation': 'ticketsLimitation',
            'description': 'description'
        }

        self._id = id
        self._label = label
        self._management_fees_cents = management_fees_cents
        self._delay_day = delay_day
        self._day_limitation = day_limitation
        self._tickets_limitation = tickets_limitation
        self._description = description

    @property
    def id(self):
        """
        Gets the id of this DeliveryMode.

        :return: The id of this DeliveryMode.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this DeliveryMode.

        :param id: The id of this DeliveryMode.
        :type: int
        """

        self._id = id

    @property
    def label(self):
        """
        Gets the label of this DeliveryMode.

        :return: The label of this DeliveryMode.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """
        Sets the label of this DeliveryMode.

        :param label: The label of this DeliveryMode.
        :type: str
        """

        self._label = label

    @property
    def management_fees_cents(self):
        """
        Gets the management_fees_cents of this DeliveryMode.

        :return: The management_fees_cents of this DeliveryMode.
        :rtype: int
        """
        return self._management_fees_cents

    @management_fees_cents.setter
    def management_fees_cents(self, management_fees_cents):
        """
        Sets the management_fees_cents of this DeliveryMode.

        :param management_fees_cents: The management_fees_cents of this DeliveryMode.
        :type: int
        """

        self._management_fees_cents = management_fees_cents

    @property
    def delay_day(self):
        """
        Gets the delay_day of this DeliveryMode.

        :return: The delay_day of this DeliveryMode.
        :rtype: int
        """
        return self._delay_day

    @delay_day.setter
    def delay_day(self, delay_day):
        """
        Sets the delay_day of this DeliveryMode.

        :param delay_day: The delay_day of this DeliveryMode.
        :type: int
        """

        self._delay_day = delay_day

    @property
    def day_limitation(self):
        """
        Gets the day_limitation of this DeliveryMode.

        :return: The day_limitation of this DeliveryMode.
        :rtype: int
        """
        return self._day_limitation

    @day_limitation.setter
    def day_limitation(self, day_limitation):
        """
        Sets the day_limitation of this DeliveryMode.

        :param day_limitation: The day_limitation of this DeliveryMode.
        :type: int
        """

        self._day_limitation = day_limitation

    @property
    def tickets_limitation(self):
        """
        Gets the tickets_limitation of this DeliveryMode.

        :return: The tickets_limitation of this DeliveryMode.
        :rtype: int
        """
        return self._tickets_limitation

    @tickets_limitation.setter
    def tickets_limitation(self, tickets_limitation):
        """
        Sets the tickets_limitation of this DeliveryMode.

        :param tickets_limitation: The tickets_limitation of this DeliveryMode.
        :type: int
        """

        self._tickets_limitation = tickets_limitation

    @property
    def description(self):
        """
        Gets the description of this DeliveryMode.

        :return: The description of this DeliveryMode.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this DeliveryMode.

        :param description: The description of this DeliveryMode.
        :type: str
        """

        self._description = description

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DeliveryMode):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
