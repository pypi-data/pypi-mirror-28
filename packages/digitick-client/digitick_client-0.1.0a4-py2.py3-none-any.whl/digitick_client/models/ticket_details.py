# coding: utf-8

"""
    Digitick REST API

    The Digitick REST API is a set of methods giving access to catalog, user and cart management.

    OpenAPI spec version: v1.0
    Contact: contact@digitick.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class TicketDetails(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'quantity': 'int',
        'price_name': 'str',
        'position': 'str',
        'required_documents': 'str'
    }

    attribute_map = {
        'quantity': 'quantity',
        'price_name': 'priceName',
        'position': 'position',
        'required_documents': 'requiredDocuments'
    }

    def __init__(self, quantity=None, price_name=None, position=None, required_documents=None):
        """
        TicketDetails - a model defined in Swagger
        """

        self._quantity = None
        self._price_name = None
        self._position = None
        self._required_documents = None

        if quantity is not None:
          self.quantity = quantity
        if price_name is not None:
          self.price_name = price_name
        if position is not None:
          self.position = position
        if required_documents is not None:
          self.required_documents = required_documents

    @property
    def quantity(self):
        """
        Gets the quantity of this TicketDetails.

        :return: The quantity of this TicketDetails.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """
        Sets the quantity of this TicketDetails.

        :param quantity: The quantity of this TicketDetails.
        :type: int
        """

        self._quantity = quantity

    @property
    def price_name(self):
        """
        Gets the price_name of this TicketDetails.

        :return: The price_name of this TicketDetails.
        :rtype: str
        """
        return self._price_name

    @price_name.setter
    def price_name(self, price_name):
        """
        Sets the price_name of this TicketDetails.

        :param price_name: The price_name of this TicketDetails.
        :type: str
        """

        self._price_name = price_name

    @property
    def position(self):
        """
        Gets the position of this TicketDetails.

        :return: The position of this TicketDetails.
        :rtype: str
        """
        return self._position

    @position.setter
    def position(self, position):
        """
        Sets the position of this TicketDetails.

        :param position: The position of this TicketDetails.
        :type: str
        """

        self._position = position

    @property
    def required_documents(self):
        """
        Gets the required_documents of this TicketDetails.

        :return: The required_documents of this TicketDetails.
        :rtype: str
        """
        return self._required_documents

    @required_documents.setter
    def required_documents(self, required_documents):
        """
        Sets the required_documents of this TicketDetails.

        :param required_documents: The required_documents of this TicketDetails.
        :type: str
        """

        self._required_documents = required_documents

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, TicketDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
