# coding: utf-8

"""
    Digitick REST API

    The Digitick REST API is a set of methods giving access to catalog, user and cart management.

    OpenAPI spec version: v1.0
    Contact: contact@digitick.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class SalesChannelEventLight(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, name=None, presentation1=None, thumbnail=None, cover=None, formatted_date=None, stock_availability_status=None, sales_status=None, product_type=None):
        """
        SalesChannelEventLight - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'name': 'str',
            'presentation1': 'str',
            'thumbnail': 'str',
            'cover': 'str',
            'formatted_date': 'str',
            'stock_availability_status': 'str',
            'sales_status': 'str',
            'product_type': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'presentation1': 'presentation1',
            'thumbnail': 'thumbnail',
            'cover': 'cover',
            'formatted_date': 'formattedDate',
            'stock_availability_status': 'stockAvailabilityStatus',
            'sales_status': 'salesStatus',
            'product_type': 'productType'
        }

        self._id = id
        self._name = name
        self._presentation1 = presentation1
        self._thumbnail = thumbnail
        self._cover = cover
        self._formatted_date = formatted_date
        self._stock_availability_status = stock_availability_status
        self._sales_status = sales_status
        self._product_type = product_type

    @property
    def id(self):
        """
        Gets the id of this SalesChannelEventLight.

        :return: The id of this SalesChannelEventLight.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this SalesChannelEventLight.

        :param id: The id of this SalesChannelEventLight.
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this SalesChannelEventLight.

        :return: The name of this SalesChannelEventLight.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this SalesChannelEventLight.

        :param name: The name of this SalesChannelEventLight.
        :type: str
        """

        self._name = name

    @property
    def presentation1(self):
        """
        Gets the presentation1 of this SalesChannelEventLight.

        :return: The presentation1 of this SalesChannelEventLight.
        :rtype: str
        """
        return self._presentation1

    @presentation1.setter
    def presentation1(self, presentation1):
        """
        Sets the presentation1 of this SalesChannelEventLight.

        :param presentation1: The presentation1 of this SalesChannelEventLight.
        :type: str
        """

        self._presentation1 = presentation1

    @property
    def thumbnail(self):
        """
        Gets the thumbnail of this SalesChannelEventLight.

        :return: The thumbnail of this SalesChannelEventLight.
        :rtype: str
        """
        return self._thumbnail

    @thumbnail.setter
    def thumbnail(self, thumbnail):
        """
        Sets the thumbnail of this SalesChannelEventLight.

        :param thumbnail: The thumbnail of this SalesChannelEventLight.
        :type: str
        """

        self._thumbnail = thumbnail

    @property
    def cover(self):
        """
        Gets the cover of this SalesChannelEventLight.

        :return: The cover of this SalesChannelEventLight.
        :rtype: str
        """
        return self._cover

    @cover.setter
    def cover(self, cover):
        """
        Sets the cover of this SalesChannelEventLight.

        :param cover: The cover of this SalesChannelEventLight.
        :type: str
        """

        self._cover = cover

    @property
    def formatted_date(self):
        """
        Gets the formatted_date of this SalesChannelEventLight.

        :return: The formatted_date of this SalesChannelEventLight.
        :rtype: str
        """
        return self._formatted_date

    @formatted_date.setter
    def formatted_date(self, formatted_date):
        """
        Sets the formatted_date of this SalesChannelEventLight.

        :param formatted_date: The formatted_date of this SalesChannelEventLight.
        :type: str
        """

        self._formatted_date = formatted_date

    @property
    def stock_availability_status(self):
        """
        Gets the stock_availability_status of this SalesChannelEventLight.

        :return: The stock_availability_status of this SalesChannelEventLight.
        :rtype: str
        """
        return self._stock_availability_status

    @stock_availability_status.setter
    def stock_availability_status(self, stock_availability_status):
        """
        Sets the stock_availability_status of this SalesChannelEventLight.

        :param stock_availability_status: The stock_availability_status of this SalesChannelEventLight.
        :type: str
        """

        self._stock_availability_status = stock_availability_status

    @property
    def sales_status(self):
        """
        Gets the sales_status of this SalesChannelEventLight.

        :return: The sales_status of this SalesChannelEventLight.
        :rtype: str
        """
        return self._sales_status

    @sales_status.setter
    def sales_status(self, sales_status):
        """
        Sets the sales_status of this SalesChannelEventLight.

        :param sales_status: The sales_status of this SalesChannelEventLight.
        :type: str
        """

        self._sales_status = sales_status

    @property
    def product_type(self):
        """
        Gets the product_type of this SalesChannelEventLight.

        :return: The product_type of this SalesChannelEventLight.
        :rtype: str
        """
        return self._product_type

    @product_type.setter
    def product_type(self, product_type):
        """
        Sets the product_type of this SalesChannelEventLight.

        :param product_type: The product_type of this SalesChannelEventLight.
        :type: str
        """

        self._product_type = product_type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, SalesChannelEventLight):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
