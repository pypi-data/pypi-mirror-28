# coding: utf-8

"""
    Digitick REST API

    The Digitick REST API is a set of methods giving access to catalog, user and cart management.

    OpenAPI spec version: v1.0
    Contact: contact@digitick.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class DistributionApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def distribution_sales_channel_find_by_ids(self, sales_channel_ids, **kwargs):
        """
        Get list of sales channel details from identifier
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.distribution_sales_channel_find_by_ids(sales_channel_ids, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str sales_channel_ids: A list of sales channel identifier (required)
        :return: SalesChannelResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.distribution_sales_channel_find_by_ids_with_http_info(sales_channel_ids, **kwargs)
        else:
            (data) = self.distribution_sales_channel_find_by_ids_with_http_info(sales_channel_ids, **kwargs)
            return data

    def distribution_sales_channel_find_by_ids_with_http_info(self, sales_channel_ids, **kwargs):
        """
        Get list of sales channel details from identifier
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.distribution_sales_channel_find_by_ids_with_http_info(sales_channel_ids, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str sales_channel_ids: A list of sales channel identifier (required)
        :return: SalesChannelResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sales_channel_ids']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method distribution_sales_channel_find_by_ids" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sales_channel_ids' is set
        if ('sales_channel_ids' not in params) or (params['sales_channel_ids'] is None):
            raise ValueError("Missing the required parameter `sales_channel_ids` when calling `distribution_sales_channel_find_by_ids`")


        collection_formats = {}

        resource_path = '/distribution/salesChannels/{salesChannelIds}'.replace('{format}', 'json')
        path_params = {}
        if 'sales_channel_ids' in params:
            path_params['salesChannelIds'] = params['sales_channel_ids']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SalesChannelResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def event_find_all_by_sales_channel_id(self, sales_channel_id, **kwargs):
        """
        Get events allocated in current saleschannel - i.e. events that are available for sale on this saleschannel
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.event_find_all_by_sales_channel_id(sales_channel_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int sales_channel_id: Sales channel identifier (required)
        :param int limit: Maximum number of returned events (page size)
        :param int offset: First offset to return (page position)
        :param int filters_grouping_id: Filter by grouping id
        :param str lang: Language code identifier
        :return: SalesChannelEventList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.event_find_all_by_sales_channel_id_with_http_info(sales_channel_id, **kwargs)
        else:
            (data) = self.event_find_all_by_sales_channel_id_with_http_info(sales_channel_id, **kwargs)
            return data

    def event_find_all_by_sales_channel_id_with_http_info(self, sales_channel_id, **kwargs):
        """
        Get events allocated in current saleschannel - i.e. events that are available for sale on this saleschannel
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.event_find_all_by_sales_channel_id_with_http_info(sales_channel_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int sales_channel_id: Sales channel identifier (required)
        :param int limit: Maximum number of returned events (page size)
        :param int offset: First offset to return (page position)
        :param int filters_grouping_id: Filter by grouping id
        :param str lang: Language code identifier
        :return: SalesChannelEventList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sales_channel_id', 'limit', 'offset', 'filters_grouping_id', 'lang']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method event_find_all_by_sales_channel_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sales_channel_id' is set
        if ('sales_channel_id' not in params) or (params['sales_channel_id'] is None):
            raise ValueError("Missing the required parameter `sales_channel_id` when calling `event_find_all_by_sales_channel_id`")


        collection_formats = {}

        resource_path = '/distribution/salesChannels/{salesChannelId}/events'.replace('{format}', 'json')
        path_params = {}
        if 'sales_channel_id' in params:
            path_params['salesChannelId'] = params['sales_channel_id']

        query_params = {}
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'filters_grouping_id' in params:
            query_params['filters[groupingId]'] = params['filters_grouping_id']
        if 'lang' in params:
            query_params['lang'] = params['lang']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SalesChannelEventList',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def grouping_find_all_by_sales_channe_id_action(self, sales_channel_id, **kwargs):
        """
        Get groupings - A grouping is an entity which contains events and can also contains other groupings.  'Groupings' can be used to classify events and act as virtual folders. An event can belong to one or several groupings. They make it easier looking for events : a. in the back-office if you are the promoter / b. online if you are looking to buy tickets. Groupings also allow the promoter to extract more targeted sales figures with grouping oriented sales reports. Example : In the case of a venue which hosts all sorts of musical events, the promoter might decide to use 'groupings' : a. to group events by their musical genres >> all classical music events would be added to a grouping named 'CLASSICAL', same for pop rock events etc / b. to group events for which special offers are proposed.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.grouping_find_all_by_sales_channe_id_action(sales_channel_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int sales_channel_id: Saleschannel idenfier (required)
        :param int grouping_parent_id: Grouping parent id. Set 0 for root.
        :param str lang: Language code identifier
        :return: GroupingList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.grouping_find_all_by_sales_channe_id_action_with_http_info(sales_channel_id, **kwargs)
        else:
            (data) = self.grouping_find_all_by_sales_channe_id_action_with_http_info(sales_channel_id, **kwargs)
            return data

    def grouping_find_all_by_sales_channe_id_action_with_http_info(self, sales_channel_id, **kwargs):
        """
        Get groupings - A grouping is an entity which contains events and can also contains other groupings.  'Groupings' can be used to classify events and act as virtual folders. An event can belong to one or several groupings. They make it easier looking for events : a. in the back-office if you are the promoter / b. online if you are looking to buy tickets. Groupings also allow the promoter to extract more targeted sales figures with grouping oriented sales reports. Example : In the case of a venue which hosts all sorts of musical events, the promoter might decide to use 'groupings' : a. to group events by their musical genres >> all classical music events would be added to a grouping named 'CLASSICAL', same for pop rock events etc / b. to group events for which special offers are proposed.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.grouping_find_all_by_sales_channe_id_action_with_http_info(sales_channel_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int sales_channel_id: Saleschannel idenfier (required)
        :param int grouping_parent_id: Grouping parent id. Set 0 for root.
        :param str lang: Language code identifier
        :return: GroupingList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sales_channel_id', 'grouping_parent_id', 'lang']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method grouping_find_all_by_sales_channe_id_action" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sales_channel_id' is set
        if ('sales_channel_id' not in params) or (params['sales_channel_id'] is None):
            raise ValueError("Missing the required parameter `sales_channel_id` when calling `grouping_find_all_by_sales_channe_id_action`")


        collection_formats = {}

        resource_path = '/distribution/salesChannels/{salesChannelId}/groupings'.replace('{format}', 'json')
        path_params = {}
        if 'sales_channel_id' in params:
            path_params['salesChannelId'] = params['sales_channel_id']

        query_params = {}
        if 'grouping_parent_id' in params:
            query_params['groupingParentId'] = params['grouping_parent_id']
        if 'lang' in params:
            query_params['lang'] = params['lang']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='GroupingList',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def show_find_all_by_event_and_sales_channel_id(self, sales_channel_id, event_id, **kwargs):
        """
        Get configured shows for the given event id - An event can consist of one or several shows. Each show has its own set-up and belongs to a single event.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.show_find_all_by_event_and_sales_channel_id(sales_channel_id, event_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int sales_channel_id: A saleschannel id must be provided (required)
        :param int event_id: An event id must be provided (required)
        :param int limit: Maximum number of returned shows (page size)
        :param int offset: First offset to return (page position)
        :return: ShowList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.show_find_all_by_event_and_sales_channel_id_with_http_info(sales_channel_id, event_id, **kwargs)
        else:
            (data) = self.show_find_all_by_event_and_sales_channel_id_with_http_info(sales_channel_id, event_id, **kwargs)
            return data

    def show_find_all_by_event_and_sales_channel_id_with_http_info(self, sales_channel_id, event_id, **kwargs):
        """
        Get configured shows for the given event id - An event can consist of one or several shows. Each show has its own set-up and belongs to a single event.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.show_find_all_by_event_and_sales_channel_id_with_http_info(sales_channel_id, event_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int sales_channel_id: A saleschannel id must be provided (required)
        :param int event_id: An event id must be provided (required)
        :param int limit: Maximum number of returned shows (page size)
        :param int offset: First offset to return (page position)
        :return: ShowList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sales_channel_id', 'event_id', 'limit', 'offset']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method show_find_all_by_event_and_sales_channel_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sales_channel_id' is set
        if ('sales_channel_id' not in params) or (params['sales_channel_id'] is None):
            raise ValueError("Missing the required parameter `sales_channel_id` when calling `show_find_all_by_event_and_sales_channel_id`")
        # verify the required parameter 'event_id' is set
        if ('event_id' not in params) or (params['event_id'] is None):
            raise ValueError("Missing the required parameter `event_id` when calling `show_find_all_by_event_and_sales_channel_id`")


        collection_formats = {}

        resource_path = '/distribution/salesChannels/{salesChannelId}/events/{eventId}/shows'.replace('{format}', 'json')
        path_params = {}
        if 'sales_channel_id' in params:
            path_params['salesChannelId'] = params['sales_channel_id']
        if 'event_id' in params:
            path_params['eventId'] = params['event_id']

        query_params = {}
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'offset' in params:
            query_params['offset'] = params['offset']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ShowList',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def show_find_prices_by_show_id(self, sales_channel_id, show_id, **kwargs):
        """
        Get all prices from a specific show - i.e. For a given show, prices active on the current saleschannel that can be bought - for which there is availability.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.show_find_prices_by_show_id(sales_channel_id, show_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int sales_channel_id: A sales channel id must be provided (required)
        :param int show_id: A show id must be provided (required)
        :param int limit: Maximum number of returned prices (page size)
        :param int offset: First offset to return (page position)
        :param list[str] filters_venue_city_name: Define venue city name filters
        :return: PricesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.show_find_prices_by_show_id_with_http_info(sales_channel_id, show_id, **kwargs)
        else:
            (data) = self.show_find_prices_by_show_id_with_http_info(sales_channel_id, show_id, **kwargs)
            return data

    def show_find_prices_by_show_id_with_http_info(self, sales_channel_id, show_id, **kwargs):
        """
        Get all prices from a specific show - i.e. For a given show, prices active on the current saleschannel that can be bought - for which there is availability.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.show_find_prices_by_show_id_with_http_info(sales_channel_id, show_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int sales_channel_id: A sales channel id must be provided (required)
        :param int show_id: A show id must be provided (required)
        :param int limit: Maximum number of returned prices (page size)
        :param int offset: First offset to return (page position)
        :param list[str] filters_venue_city_name: Define venue city name filters
        :return: PricesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sales_channel_id', 'show_id', 'limit', 'offset', 'filters_venue_city_name']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method show_find_prices_by_show_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sales_channel_id' is set
        if ('sales_channel_id' not in params) or (params['sales_channel_id'] is None):
            raise ValueError("Missing the required parameter `sales_channel_id` when calling `show_find_prices_by_show_id`")
        # verify the required parameter 'show_id' is set
        if ('show_id' not in params) or (params['show_id'] is None):
            raise ValueError("Missing the required parameter `show_id` when calling `show_find_prices_by_show_id`")


        collection_formats = {}

        resource_path = '/distribution/salesChannels/{salesChannelId}/shows/{showId}/prices'.replace('{format}', 'json')
        path_params = {}
        if 'sales_channel_id' in params:
            path_params['salesChannelId'] = params['sales_channel_id']
        if 'show_id' in params:
            path_params['showId'] = params['show_id']

        query_params = {}
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'filters_venue_city_name' in params:
            query_params['filters[venueCityName][]'] = params['filters_venue_city_name']
            collection_formats['filters[venueCityName][]'] = 'multi'

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='PricesResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
