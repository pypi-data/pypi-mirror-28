# coding: utf-8

"""
    Digitick REST API

    The Digitick REST API is a set of methods giving access to catalog, user and cart management.

    OpenAPI spec version: v1.0
    Contact: contact@digitick.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class CatalogApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def category_find_all_categories(self, **kwargs):
        """
        Get all event categories. An 'event category' defines the type of an event. The following are considered 'event categories' : Concert, Sport, Theatre, Festival etc.  When planning an event, the user defines the event category.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.category_find_all_categories(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: CategoryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.category_find_all_categories_with_http_info(**kwargs)
        else:
            (data) = self.category_find_all_categories_with_http_info(**kwargs)
            return data

    def category_find_all_categories_with_http_info(self, **kwargs):
        """
        Get all event categories. An 'event category' defines the type of an event. The following are considered 'event categories' : Concert, Sport, Theatre, Festival etc.  When planning an event, the user defines the event category.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.category_find_all_categories_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: CategoryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method category_find_all_categories" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api('/catalog/categories', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CategoryResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def category_find_sub_categories(self, category_id, **kwargs):
        """
        Get event sub-categories for the given category. Within an event category, different sub-types can exist. For example, the following are considered 'sub-categories' for the event category 'Concert' : Classical / Pop Rock / Metal / Jazz / Electro etc.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.category_find_sub_categories(category_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int category_id: Provide an existing event category id (required)
        :return: CategoryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.category_find_sub_categories_with_http_info(category_id, **kwargs)
        else:
            (data) = self.category_find_sub_categories_with_http_info(category_id, **kwargs)
            return data

    def category_find_sub_categories_with_http_info(self, category_id, **kwargs):
        """
        Get event sub-categories for the given category. Within an event category, different sub-types can exist. For example, the following are considered 'sub-categories' for the event category 'Concert' : Classical / Pop Rock / Metal / Jazz / Electro etc.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.category_find_sub_categories_with_http_info(category_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int category_id: Provide an existing event category id (required)
        :return: CategoryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['category_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method category_find_sub_categories" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'category_id' is set
        if ('category_id' not in params) or (params['category_id'] is None):
            raise ValueError("Missing the required parameter `category_id` when calling `category_find_sub_categories`")


        collection_formats = {}

        path_params = {}
        if 'category_id' in params:
            path_params['categoryId'] = params['category_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api('/catalog/categories/{categoryId}/sub_categories', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CategoryResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def event_find_all(self, **kwargs):
        """
        Get events allocated in current saleschannel - i.e. events that are available for sale on this saleschannel
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.event_find_all(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int limit: Maximum number of returned events (page size)
        :param int offset: First offset to return (page position)
        :param list[int] filters_event_id: Filter by event ids
        :param list[int] filters_country_id: Filter by country ids
        :param list[str] filters_date_end: Filter according to a show's ending date and time
        :param list[str] filters_date_start: Filter according to a show's starting date and time
        :param list[str] filters_department: Filter by department numbers - departments are one level of France's administrative divisions
        :param list[str] filters_event_name: Filter by event names
        :param list[int] filters_producer_id: Filter by producer ids
        :param list[int] filters_sub_category_id: Filter by event sub-category ids
        :param list[int] filters_ticket_distributor_id: Filter by ticket distributor ids - Distributors display URL for webpages of events sold through Digitick's ticketing system.
        :param list[str] filters_venue_name: Filter by venue names
        :param list[int] filters_zip_code: Filter by zipcodes (postcodes)
        :return: EventsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.event_find_all_with_http_info(**kwargs)
        else:
            (data) = self.event_find_all_with_http_info(**kwargs)
            return data

    def event_find_all_with_http_info(self, **kwargs):
        """
        Get events allocated in current saleschannel - i.e. events that are available for sale on this saleschannel
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.event_find_all_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int limit: Maximum number of returned events (page size)
        :param int offset: First offset to return (page position)
        :param list[int] filters_event_id: Filter by event ids
        :param list[int] filters_country_id: Filter by country ids
        :param list[str] filters_date_end: Filter according to a show's ending date and time
        :param list[str] filters_date_start: Filter according to a show's starting date and time
        :param list[str] filters_department: Filter by department numbers - departments are one level of France's administrative divisions
        :param list[str] filters_event_name: Filter by event names
        :param list[int] filters_producer_id: Filter by producer ids
        :param list[int] filters_sub_category_id: Filter by event sub-category ids
        :param list[int] filters_ticket_distributor_id: Filter by ticket distributor ids - Distributors display URL for webpages of events sold through Digitick's ticketing system.
        :param list[str] filters_venue_name: Filter by venue names
        :param list[int] filters_zip_code: Filter by zipcodes (postcodes)
        :return: EventsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'offset', 'filters_event_id', 'filters_country_id', 'filters_date_end', 'filters_date_start', 'filters_department', 'filters_event_name', 'filters_producer_id', 'filters_sub_category_id', 'filters_ticket_distributor_id', 'filters_venue_name', 'filters_zip_code']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method event_find_all" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))
        if 'offset' in params:
            query_params.append(('offset', params['offset']))
        if 'filters_event_id' in params:
            query_params.append(('filters[eventId][]', params['filters_event_id']))
            collection_formats['filters[eventId][]'] = 'multi'
        if 'filters_country_id' in params:
            query_params.append(('filters[countryId][]', params['filters_country_id']))
            collection_formats['filters[countryId][]'] = 'multi'
        if 'filters_date_end' in params:
            query_params.append(('filters[dateEnd][]', params['filters_date_end']))
            collection_formats['filters[dateEnd][]'] = 'multi'
        if 'filters_date_start' in params:
            query_params.append(('filters[dateStart][]', params['filters_date_start']))
            collection_formats['filters[dateStart][]'] = 'multi'
        if 'filters_department' in params:
            query_params.append(('filters[department][]', params['filters_department']))
            collection_formats['filters[department][]'] = 'multi'
        if 'filters_event_name' in params:
            query_params.append(('filters[eventName][]', params['filters_event_name']))
            collection_formats['filters[eventName][]'] = 'multi'
        if 'filters_producer_id' in params:
            query_params.append(('filters[producerId][]', params['filters_producer_id']))
            collection_formats['filters[producerId][]'] = 'multi'
        if 'filters_sub_category_id' in params:
            query_params.append(('filters[subCategoryId][]', params['filters_sub_category_id']))
            collection_formats['filters[subCategoryId][]'] = 'multi'
        if 'filters_ticket_distributor_id' in params:
            query_params.append(('filters[ticketDistributorId][]', params['filters_ticket_distributor_id']))
            collection_formats['filters[ticketDistributorId][]'] = 'multi'
        if 'filters_venue_name' in params:
            query_params.append(('filters[venueName][]', params['filters_venue_name']))
            collection_formats['filters[venueName][]'] = 'multi'
        if 'filters_zip_code' in params:
            query_params.append(('filters[zipCode][]', params['filters_zip_code']))
            collection_formats['filters[zipCode][]'] = 'multi'

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api('/catalog/events', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EventsResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def event_find_shows_availability(self, event_id, **kwargs):
        """
        Get configured shows with price availability for the given event id - i.e. Shows that can be bought on this saleschannel. - A price defines the basic amount a ticket costs. A list of prices is set for each show. A price can be set on one or several shows from one or several events. Price availability is defined by the fact that a price active on the current saleschannel can be bought - i.e. not all seats to which this price has been added have been sold.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.event_find_shows_availability(event_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int event_id: An event id must be provided (required)
        :return: ShowsAvailabilityResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.event_find_shows_availability_with_http_info(event_id, **kwargs)
        else:
            (data) = self.event_find_shows_availability_with_http_info(event_id, **kwargs)
            return data

    def event_find_shows_availability_with_http_info(self, event_id, **kwargs):
        """
        Get configured shows with price availability for the given event id - i.e. Shows that can be bought on this saleschannel. - A price defines the basic amount a ticket costs. A list of prices is set for each show. A price can be set on one or several shows from one or several events. Price availability is defined by the fact that a price active on the current saleschannel can be bought - i.e. not all seats to which this price has been added have been sold.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.event_find_shows_availability_with_http_info(event_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int event_id: An event id must be provided (required)
        :return: ShowsAvailabilityResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['event_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method event_find_shows_availability" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'event_id' is set
        if ('event_id' not in params) or (params['event_id'] is None):
            raise ValueError("Missing the required parameter `event_id` when calling `event_find_shows_availability`")


        collection_formats = {}

        path_params = {}
        if 'event_id' in params:
            path_params['eventId'] = params['event_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api('/catalog/events/{eventId}/shows/availability', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ShowsAvailabilityResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def event_find_shows_by_event_id(self, event_id, **kwargs):
        """
        Get configured shows for the given event id - An event can consist of one or several shows. Each show has its own set-up and belongs to a single event.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.event_find_shows_by_event_id(event_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int event_id: An event id must be provided (required)
        :param int limit: Maximum number of returned shows (page size)
        :param int offset: First offset to return (page position)
        :param list[int] filters_show_id: Filter by show ids
        :param list[str] filters_venue_name: Filter by venue names
        :param list[int] filters_zip_code: Filter by zipcodes (postcodes)
        :return: ShowsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.event_find_shows_by_event_id_with_http_info(event_id, **kwargs)
        else:
            (data) = self.event_find_shows_by_event_id_with_http_info(event_id, **kwargs)
            return data

    def event_find_shows_by_event_id_with_http_info(self, event_id, **kwargs):
        """
        Get configured shows for the given event id - An event can consist of one or several shows. Each show has its own set-up and belongs to a single event.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.event_find_shows_by_event_id_with_http_info(event_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int event_id: An event id must be provided (required)
        :param int limit: Maximum number of returned shows (page size)
        :param int offset: First offset to return (page position)
        :param list[int] filters_show_id: Filter by show ids
        :param list[str] filters_venue_name: Filter by venue names
        :param list[int] filters_zip_code: Filter by zipcodes (postcodes)
        :return: ShowsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['event_id', 'limit', 'offset', 'filters_show_id', 'filters_venue_name', 'filters_zip_code']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method event_find_shows_by_event_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'event_id' is set
        if ('event_id' not in params) or (params['event_id'] is None):
            raise ValueError("Missing the required parameter `event_id` when calling `event_find_shows_by_event_id`")


        collection_formats = {}

        path_params = {}
        if 'event_id' in params:
            path_params['eventId'] = params['event_id']

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))
        if 'offset' in params:
            query_params.append(('offset', params['offset']))
        if 'filters_show_id' in params:
            query_params.append(('filters[showId][]', params['filters_show_id']))
            collection_formats['filters[showId][]'] = 'multi'
        if 'filters_venue_name' in params:
            query_params.append(('filters[venueName][]', params['filters_venue_name']))
            collection_formats['filters[venueName][]'] = 'multi'
        if 'filters_zip_code' in params:
            query_params.append(('filters[zipCode][]', params['filters_zip_code']))
            collection_formats['filters[zipCode][]'] = 'multi'

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api('/catalog/events/{eventId}/shows', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ShowsResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def grouping_find_all(self, **kwargs):
        """
        Get groupings - A grouping is an entity which contains events and can also contains other groupings.  'Groupings' can be used to classify events and act as virtual folders. An event can belong to one or several groupings. They make it easier looking for events : a. in the back-office if you are the promoter / b. online if you are looking to buy tickets. Groupings also allow the promoter to extract more targeted sales figures with grouping oriented sales reports. Example : In the case of a venue which hosts all sorts of musical events, the promoter might decide to use 'groupings' : a. to group events by their musical genres >> all classical music events would be added to a grouping named 'CLASSICAL', same for pop rock events etc / b. to group events for which special offers are proposed.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.grouping_find_all(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int grouping_parent_id: Grouping parent id. Set 0 for root.
        :param int limit: Maximum number of returned groupings (page size)
        :param int offset: First offset to return (page position)
        :param list[int] filters_regroupement_id: Filter by grouping ids
        :return: GroupingsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.grouping_find_all_with_http_info(**kwargs)
        else:
            (data) = self.grouping_find_all_with_http_info(**kwargs)
            return data

    def grouping_find_all_with_http_info(self, **kwargs):
        """
        Get groupings - A grouping is an entity which contains events and can also contains other groupings.  'Groupings' can be used to classify events and act as virtual folders. An event can belong to one or several groupings. They make it easier looking for events : a. in the back-office if you are the promoter / b. online if you are looking to buy tickets. Groupings also allow the promoter to extract more targeted sales figures with grouping oriented sales reports. Example : In the case of a venue which hosts all sorts of musical events, the promoter might decide to use 'groupings' : a. to group events by their musical genres >> all classical music events would be added to a grouping named 'CLASSICAL', same for pop rock events etc / b. to group events for which special offers are proposed.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.grouping_find_all_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int grouping_parent_id: Grouping parent id. Set 0 for root.
        :param int limit: Maximum number of returned groupings (page size)
        :param int offset: First offset to return (page position)
        :param list[int] filters_regroupement_id: Filter by grouping ids
        :return: GroupingsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['grouping_parent_id', 'limit', 'offset', 'filters_regroupement_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method grouping_find_all" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'grouping_parent_id' in params:
            query_params.append(('groupingParentId', params['grouping_parent_id']))
        if 'limit' in params:
            query_params.append(('limit', params['limit']))
        if 'offset' in params:
            query_params.append(('offset', params['offset']))
        if 'filters_regroupement_id' in params:
            query_params.append(('filters[regroupementId][]', params['filters_regroupement_id']))
            collection_formats['filters[regroupementId][]'] = 'multi'

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api('/catalog/groupings', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='GroupingsResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def show_find_prices_by_show_id(self, show_id, **kwargs):
        """
        Get all prices from a specific show - i.e. For a given show, prices active on the current saleschannel that can be bought - for which there is availability.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.show_find_prices_by_show_id(show_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int show_id: A show id must be provided (required)
        :param int limit: Maximum number of returned prices (page size)
        :param int offset: First offset to return (page position)
        :param list[str] filters_venue_city_name: Define venue city name filters
        :return: PricesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.show_find_prices_by_show_id_with_http_info(show_id, **kwargs)
        else:
            (data) = self.show_find_prices_by_show_id_with_http_info(show_id, **kwargs)
            return data

    def show_find_prices_by_show_id_with_http_info(self, show_id, **kwargs):
        """
        Get all prices from a specific show - i.e. For a given show, prices active on the current saleschannel that can be bought - for which there is availability.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.show_find_prices_by_show_id_with_http_info(show_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int show_id: A show id must be provided (required)
        :param int limit: Maximum number of returned prices (page size)
        :param int offset: First offset to return (page position)
        :param list[str] filters_venue_city_name: Define venue city name filters
        :return: PricesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['show_id', 'limit', 'offset', 'filters_venue_city_name']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method show_find_prices_by_show_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'show_id' is set
        if ('show_id' not in params) or (params['show_id'] is None):
            raise ValueError("Missing the required parameter `show_id` when calling `show_find_prices_by_show_id`")


        collection_formats = {}

        path_params = {}
        if 'show_id' in params:
            path_params['showId'] = params['show_id']

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))
        if 'offset' in params:
            query_params.append(('offset', params['offset']))
        if 'filters_venue_city_name' in params:
            query_params.append(('filters[venueCityName][]', params['filters_venue_city_name']))
            collection_formats['filters[venueCityName][]'] = 'multi'

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api('/catalog/shows/{showId}/prices', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='PricesResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def show_find_venues_blocks_availability_by_blocks_and_show_id(self, show_id, block_ids, **kwargs):
        """
        Get availability for the given block id(s) and show id - A venue is the place where the show takes place >> a venue has to be set for each show. A venue can have different set-ups.  A particular set-up can consist of one or several blocks of seats. If the venue's set-up selected for a show is made of blocks of seats, the user will decide which seats will carry a certain list of prices. A seat is considered available if at least one price listed for this seat is active on the current saleschannel.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.show_find_venues_blocks_availability_by_blocks_and_show_id(show_id, block_ids, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int show_id: A show id must be provided (required)
        :param str block_ids: One or more block ids separated by comma (required)
        :return: ShowsBlocksAvailabilityResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.show_find_venues_blocks_availability_by_blocks_and_show_id_with_http_info(show_id, block_ids, **kwargs)
        else:
            (data) = self.show_find_venues_blocks_availability_by_blocks_and_show_id_with_http_info(show_id, block_ids, **kwargs)
            return data

    def show_find_venues_blocks_availability_by_blocks_and_show_id_with_http_info(self, show_id, block_ids, **kwargs):
        """
        Get availability for the given block id(s) and show id - A venue is the place where the show takes place >> a venue has to be set for each show. A venue can have different set-ups.  A particular set-up can consist of one or several blocks of seats. If the venue's set-up selected for a show is made of blocks of seats, the user will decide which seats will carry a certain list of prices. A seat is considered available if at least one price listed for this seat is active on the current saleschannel.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.show_find_venues_blocks_availability_by_blocks_and_show_id_with_http_info(show_id, block_ids, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int show_id: A show id must be provided (required)
        :param str block_ids: One or more block ids separated by comma (required)
        :return: ShowsBlocksAvailabilityResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['show_id', 'block_ids']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method show_find_venues_blocks_availability_by_blocks_and_show_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'show_id' is set
        if ('show_id' not in params) or (params['show_id'] is None):
            raise ValueError("Missing the required parameter `show_id` when calling `show_find_venues_blocks_availability_by_blocks_and_show_id`")
        # verify the required parameter 'block_ids' is set
        if ('block_ids' not in params) or (params['block_ids'] is None):
            raise ValueError("Missing the required parameter `block_ids` when calling `show_find_venues_blocks_availability_by_blocks_and_show_id`")

        if 'block_ids' in params and not re.search('<id_1>,<id_2>...<id_n>', params['block_ids']):
            raise ValueError("Invalid value for parameter `block_ids` when calling `show_find_venues_blocks_availability_by_blocks_and_show_id`, must conform to the pattern `/<id_1>,<id_2>...<id_n>/`")

        collection_formats = {}

        path_params = {}
        if 'show_id' in params:
            path_params['showId'] = params['show_id']
        if 'block_ids' in params:
            path_params['blockIds'] = params['block_ids']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api('/catalog/shows/{showId}/blocks/{blockIds}/availability', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ShowsBlocksAvailabilityResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def venue_find_all(self, **kwargs):
        """
        Get all venues - i.e. Venues for which a show can actually be bought on the current saleschannel, a show with availability. - A venue is the place where the show takes place >> a venue has to be set for each show.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.venue_find_all(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int limit: Maximum number of returned venues (page size)
        :param int offset: First offset to return (page position)
        :param list[str] filters_venue_city_name: Define venue city name filters
        :param list[int] filters_venue_capacity: Define venue capacity filters - Capacity is a venue characteristic, as much as its name and address. Being a declared figure, capacity does not refer to an actual venue set-up. For example, capacity can be set at '0' for a venue but it will not stop the user from adding a set-up of 1000 seats.
        :param list[int] filters_venue_id: Define venue id filters
        :param list[str] filters_venue_name: Define venue name filters
        :param int sort_venue_name_value: Define venue name sort value
        :param int sort_venue_name_priority: Define venue name sort priority
        :return: VenuesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.venue_find_all_with_http_info(**kwargs)
        else:
            (data) = self.venue_find_all_with_http_info(**kwargs)
            return data

    def venue_find_all_with_http_info(self, **kwargs):
        """
        Get all venues - i.e. Venues for which a show can actually be bought on the current saleschannel, a show with availability. - A venue is the place where the show takes place >> a venue has to be set for each show.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.venue_find_all_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int limit: Maximum number of returned venues (page size)
        :param int offset: First offset to return (page position)
        :param list[str] filters_venue_city_name: Define venue city name filters
        :param list[int] filters_venue_capacity: Define venue capacity filters - Capacity is a venue characteristic, as much as its name and address. Being a declared figure, capacity does not refer to an actual venue set-up. For example, capacity can be set at '0' for a venue but it will not stop the user from adding a set-up of 1000 seats.
        :param list[int] filters_venue_id: Define venue id filters
        :param list[str] filters_venue_name: Define venue name filters
        :param int sort_venue_name_value: Define venue name sort value
        :param int sort_venue_name_priority: Define venue name sort priority
        :return: VenuesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'offset', 'filters_venue_city_name', 'filters_venue_capacity', 'filters_venue_id', 'filters_venue_name', 'sort_venue_name_value', 'sort_venue_name_priority']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method venue_find_all" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))
        if 'offset' in params:
            query_params.append(('offset', params['offset']))
        if 'filters_venue_city_name' in params:
            query_params.append(('filters[venueCityName][]', params['filters_venue_city_name']))
            collection_formats['filters[venueCityName][]'] = 'multi'
        if 'filters_venue_capacity' in params:
            query_params.append(('filters[venueCapacity][]', params['filters_venue_capacity']))
            collection_formats['filters[venueCapacity][]'] = 'multi'
        if 'filters_venue_id' in params:
            query_params.append(('filters[venueId][]', params['filters_venue_id']))
            collection_formats['filters[venueId][]'] = 'multi'
        if 'filters_venue_name' in params:
            query_params.append(('filters[venueName][]', params['filters_venue_name']))
            collection_formats['filters[venueName][]'] = 'multi'
        if 'sort_venue_name_value' in params:
            query_params.append(('sort[venueName][value]', params['sort_venue_name_value']))
        if 'sort_venue_name_priority' in params:
            query_params.append(('sort[venueName][priority]', params['sort_venue_name_priority']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api('/catalog/venues', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='VenuesResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
