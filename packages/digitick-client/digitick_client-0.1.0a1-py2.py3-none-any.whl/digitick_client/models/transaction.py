# coding: utf-8

"""
    Digitick REST API

    The Digitick REST API is a set of methods giving access to catalog, user and cart management.

    OpenAPI spec version: v1.0
    Contact: contact@digitick.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Transaction(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, ref_bank=None, purchase_date=None, payment_infos=None, delivery=None, sales_channel_id=None, currency_id=None, tickets=None, payments=None):
        """
        Transaction - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'ref_bank': 'str',
            'purchase_date': 'datetime',
            'payment_infos': 'str',
            'delivery': 'Delivery',
            'sales_channel_id': 'int',
            'currency_id': 'int',
            'tickets': 'list[int]',
            'payments': 'list[Payment]'
        }

        self.attribute_map = {
            'id': 'id',
            'ref_bank': 'refBank',
            'purchase_date': 'purchaseDate',
            'payment_infos': 'paymentInfos',
            'delivery': 'delivery',
            'sales_channel_id': 'salesChannelId',
            'currency_id': 'currencyId',
            'tickets': 'tickets',
            'payments': 'payments'
        }

        self._id = id
        self._ref_bank = ref_bank
        self._purchase_date = purchase_date
        self._payment_infos = payment_infos
        self._delivery = delivery
        self._sales_channel_id = sales_channel_id
        self._currency_id = currency_id
        self._tickets = tickets
        self._payments = payments

    @property
    def id(self):
        """
        Gets the id of this Transaction.

        :return: The id of this Transaction.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Transaction.

        :param id: The id of this Transaction.
        :type: int
        """

        self._id = id

    @property
    def ref_bank(self):
        """
        Gets the ref_bank of this Transaction.

        :return: The ref_bank of this Transaction.
        :rtype: str
        """
        return self._ref_bank

    @ref_bank.setter
    def ref_bank(self, ref_bank):
        """
        Sets the ref_bank of this Transaction.

        :param ref_bank: The ref_bank of this Transaction.
        :type: str
        """

        self._ref_bank = ref_bank

    @property
    def purchase_date(self):
        """
        Gets the purchase_date of this Transaction.

        :return: The purchase_date of this Transaction.
        :rtype: datetime
        """
        return self._purchase_date

    @purchase_date.setter
    def purchase_date(self, purchase_date):
        """
        Sets the purchase_date of this Transaction.

        :param purchase_date: The purchase_date of this Transaction.
        :type: datetime
        """

        self._purchase_date = purchase_date

    @property
    def payment_infos(self):
        """
        Gets the payment_infos of this Transaction.

        :return: The payment_infos of this Transaction.
        :rtype: str
        """
        return self._payment_infos

    @payment_infos.setter
    def payment_infos(self, payment_infos):
        """
        Sets the payment_infos of this Transaction.

        :param payment_infos: The payment_infos of this Transaction.
        :type: str
        """

        self._payment_infos = payment_infos

    @property
    def delivery(self):
        """
        Gets the delivery of this Transaction.

        :return: The delivery of this Transaction.
        :rtype: Delivery
        """
        return self._delivery

    @delivery.setter
    def delivery(self, delivery):
        """
        Sets the delivery of this Transaction.

        :param delivery: The delivery of this Transaction.
        :type: Delivery
        """

        self._delivery = delivery

    @property
    def sales_channel_id(self):
        """
        Gets the sales_channel_id of this Transaction.

        :return: The sales_channel_id of this Transaction.
        :rtype: int
        """
        return self._sales_channel_id

    @sales_channel_id.setter
    def sales_channel_id(self, sales_channel_id):
        """
        Sets the sales_channel_id of this Transaction.

        :param sales_channel_id: The sales_channel_id of this Transaction.
        :type: int
        """

        self._sales_channel_id = sales_channel_id

    @property
    def currency_id(self):
        """
        Gets the currency_id of this Transaction.

        :return: The currency_id of this Transaction.
        :rtype: int
        """
        return self._currency_id

    @currency_id.setter
    def currency_id(self, currency_id):
        """
        Sets the currency_id of this Transaction.

        :param currency_id: The currency_id of this Transaction.
        :type: int
        """

        self._currency_id = currency_id

    @property
    def tickets(self):
        """
        Gets the tickets of this Transaction.

        :return: The tickets of this Transaction.
        :rtype: list[int]
        """
        return self._tickets

    @tickets.setter
    def tickets(self, tickets):
        """
        Sets the tickets of this Transaction.

        :param tickets: The tickets of this Transaction.
        :type: list[int]
        """

        self._tickets = tickets

    @property
    def payments(self):
        """
        Gets the payments of this Transaction.

        :return: The payments of this Transaction.
        :rtype: list[Payment]
        """
        return self._payments

    @payments.setter
    def payments(self, payments):
        """
        Sets the payments of this Transaction.

        :param payments: The payments of this Transaction.
        :type: list[Payment]
        """

        self._payments = payments

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Transaction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
