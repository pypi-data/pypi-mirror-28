# coding: utf-8

"""
    Digitick REST API

    The Digitick REST API is a set of methods giving access to catalog, user and cart management.

    OpenAPI spec version: v1.0
    Contact: contact@digitick.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class RenamePlacesInner(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'first_name': 'str',
        'last_name': 'str',
        'partner_fiscal_id': 'int',
        'barcode': 'str',
        'ticket_type': 'str'
    }

    attribute_map = {
        'id': 'id',
        'first_name': 'firstName',
        'last_name': 'lastName',
        'partner_fiscal_id': 'partnerFiscalId',
        'barcode': 'barcode',
        'ticket_type': 'ticketType'
    }

    def __init__(self, id=None, first_name=None, last_name=None, partner_fiscal_id=None, barcode=None, ticket_type=None):
        """
        RenamePlacesInner - a model defined in Swagger
        """

        self._id = None
        self._first_name = None
        self._last_name = None
        self._partner_fiscal_id = None
        self._barcode = None
        self._ticket_type = None

        if id is not None:
          self.id = id
        if first_name is not None:
          self.first_name = first_name
        if last_name is not None:
          self.last_name = last_name
        if partner_fiscal_id is not None:
          self.partner_fiscal_id = partner_fiscal_id
        if barcode is not None:
          self.barcode = barcode
        if ticket_type is not None:
          self.ticket_type = ticket_type

    @property
    def id(self):
        """
        Gets the id of this RenamePlacesInner.

        :return: The id of this RenamePlacesInner.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this RenamePlacesInner.

        :param id: The id of this RenamePlacesInner.
        :type: int
        """

        self._id = id

    @property
    def first_name(self):
        """
        Gets the first_name of this RenamePlacesInner.

        :return: The first_name of this RenamePlacesInner.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """
        Sets the first_name of this RenamePlacesInner.

        :param first_name: The first_name of this RenamePlacesInner.
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """
        Gets the last_name of this RenamePlacesInner.

        :return: The last_name of this RenamePlacesInner.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """
        Sets the last_name of this RenamePlacesInner.

        :param last_name: The last_name of this RenamePlacesInner.
        :type: str
        """

        self._last_name = last_name

    @property
    def partner_fiscal_id(self):
        """
        Gets the partner_fiscal_id of this RenamePlacesInner.

        :return: The partner_fiscal_id of this RenamePlacesInner.
        :rtype: int
        """
        return self._partner_fiscal_id

    @partner_fiscal_id.setter
    def partner_fiscal_id(self, partner_fiscal_id):
        """
        Sets the partner_fiscal_id of this RenamePlacesInner.

        :param partner_fiscal_id: The partner_fiscal_id of this RenamePlacesInner.
        :type: int
        """

        self._partner_fiscal_id = partner_fiscal_id

    @property
    def barcode(self):
        """
        Gets the barcode of this RenamePlacesInner.

        :return: The barcode of this RenamePlacesInner.
        :rtype: str
        """
        return self._barcode

    @barcode.setter
    def barcode(self, barcode):
        """
        Sets the barcode of this RenamePlacesInner.

        :param barcode: The barcode of this RenamePlacesInner.
        :type: str
        """

        self._barcode = barcode

    @property
    def ticket_type(self):
        """
        Gets the ticket_type of this RenamePlacesInner.

        :return: The ticket_type of this RenamePlacesInner.
        :rtype: str
        """
        return self._ticket_type

    @ticket_type.setter
    def ticket_type(self, ticket_type):
        """
        Sets the ticket_type of this RenamePlacesInner.

        :param ticket_type: The ticket_type of this RenamePlacesInner.
        :type: str
        """

        self._ticket_type = ticket_type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, RenamePlacesInner):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
