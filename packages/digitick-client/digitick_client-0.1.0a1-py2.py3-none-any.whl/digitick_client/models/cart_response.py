# coding: utf-8

"""
    Digitick REST API

    The Digitick REST API is a set of methods giving access to catalog, user and cart management.

    OpenAPI spec version: v1.0
    Contact: contact@digitick.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CartResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'places': 'list[ERRORUNKNOWN]',
        'overheads': 'int',
        'overheads_vat': 'list[ERRORUNKNOWN]',
        'total_amount': 'int',
        'total_vat': 'list[ERRORUNKNOWN]'
    }

    attribute_map = {
        'places': 'places',
        'overheads': 'overheads',
        'overheads_vat': 'overheadsVat',
        'total_amount': 'totalAmount',
        'total_vat': 'totalVat'
    }

    def __init__(self, places=None, overheads=None, overheads_vat=None, total_amount=None, total_vat=None):
        """
        CartResponse - a model defined in Swagger
        """

        self._places = None
        self._overheads = None
        self._overheads_vat = None
        self._total_amount = None
        self._total_vat = None

        if places is not None:
          self.places = places
        if overheads is not None:
          self.overheads = overheads
        if overheads_vat is not None:
          self.overheads_vat = overheads_vat
        if total_amount is not None:
          self.total_amount = total_amount
        if total_vat is not None:
          self.total_vat = total_vat

    @property
    def places(self):
        """
        Gets the places of this CartResponse.

        :return: The places of this CartResponse.
        :rtype: list[ERRORUNKNOWN]
        """
        return self._places

    @places.setter
    def places(self, places):
        """
        Sets the places of this CartResponse.

        :param places: The places of this CartResponse.
        :type: list[ERRORUNKNOWN]
        """

        self._places = places

    @property
    def overheads(self):
        """
        Gets the overheads of this CartResponse.

        :return: The overheads of this CartResponse.
        :rtype: int
        """
        return self._overheads

    @overheads.setter
    def overheads(self, overheads):
        """
        Sets the overheads of this CartResponse.

        :param overheads: The overheads of this CartResponse.
        :type: int
        """

        self._overheads = overheads

    @property
    def overheads_vat(self):
        """
        Gets the overheads_vat of this CartResponse.

        :return: The overheads_vat of this CartResponse.
        :rtype: list[ERRORUNKNOWN]
        """
        return self._overheads_vat

    @overheads_vat.setter
    def overheads_vat(self, overheads_vat):
        """
        Sets the overheads_vat of this CartResponse.

        :param overheads_vat: The overheads_vat of this CartResponse.
        :type: list[ERRORUNKNOWN]
        """

        self._overheads_vat = overheads_vat

    @property
    def total_amount(self):
        """
        Gets the total_amount of this CartResponse.

        :return: The total_amount of this CartResponse.
        :rtype: int
        """
        return self._total_amount

    @total_amount.setter
    def total_amount(self, total_amount):
        """
        Sets the total_amount of this CartResponse.

        :param total_amount: The total_amount of this CartResponse.
        :type: int
        """

        self._total_amount = total_amount

    @property
    def total_vat(self):
        """
        Gets the total_vat of this CartResponse.

        :return: The total_vat of this CartResponse.
        :rtype: list[ERRORUNKNOWN]
        """
        return self._total_vat

    @total_vat.setter
    def total_vat(self, total_vat):
        """
        Sets the total_vat of this CartResponse.

        :param total_vat: The total_vat of this CartResponse.
        :type: list[ERRORUNKNOWN]
        """

        self._total_vat = total_vat

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CartResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
