# coding: utf-8

"""
    Digitick REST API

    The Digitick REST API is a set of methods giving access to catalog, user and cart management.

    OpenAPI spec version: v1.0
    Contact: contact@digitick.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Grouping(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, name=None, description=None, category_id=None, sub_category_id=None, country_id=None, region_id=None, date_start=None, date_end=None, formatted_date=None, banner=None, home_banner=None, background=None, thunbnail=None, external_videos=None, exclusive_mode=None):
        """
        Grouping - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'name': 'str',
            'description': 'str',
            'category_id': 'int',
            'sub_category_id': 'int',
            'country_id': 'int',
            'region_id': 'int',
            'date_start': 'str',
            'date_end': 'str',
            'formatted_date': 'str',
            'banner': 'str',
            'home_banner': 'str',
            'background': 'str',
            'thunbnail': 'str',
            'external_videos': 'list[str]',
            'exclusive_mode': 'bool'
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'description': 'description',
            'category_id': 'categoryId',
            'sub_category_id': 'subCategoryId',
            'country_id': 'countryId',
            'region_id': 'regionId',
            'date_start': 'dateStart',
            'date_end': 'dateEnd',
            'formatted_date': 'formattedDate',
            'banner': 'banner',
            'home_banner': 'homeBanner',
            'background': 'background',
            'thunbnail': 'thunbnail',
            'external_videos': 'externalVideos',
            'exclusive_mode': 'exclusiveMode'
        }

        self._id = id
        self._name = name
        self._description = description
        self._category_id = category_id
        self._sub_category_id = sub_category_id
        self._country_id = country_id
        self._region_id = region_id
        self._date_start = date_start
        self._date_end = date_end
        self._formatted_date = formatted_date
        self._banner = banner
        self._home_banner = home_banner
        self._background = background
        self._thunbnail = thunbnail
        self._external_videos = external_videos
        self._exclusive_mode = exclusive_mode

    @property
    def id(self):
        """
        Gets the id of this Grouping.

        :return: The id of this Grouping.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Grouping.

        :param id: The id of this Grouping.
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this Grouping.

        :return: The name of this Grouping.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Grouping.

        :param name: The name of this Grouping.
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """
        Gets the description of this Grouping.

        :return: The description of this Grouping.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Grouping.

        :param description: The description of this Grouping.
        :type: str
        """

        self._description = description

    @property
    def category_id(self):
        """
        Gets the category_id of this Grouping.

        :return: The category_id of this Grouping.
        :rtype: int
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """
        Sets the category_id of this Grouping.

        :param category_id: The category_id of this Grouping.
        :type: int
        """

        self._category_id = category_id

    @property
    def sub_category_id(self):
        """
        Gets the sub_category_id of this Grouping.

        :return: The sub_category_id of this Grouping.
        :rtype: int
        """
        return self._sub_category_id

    @sub_category_id.setter
    def sub_category_id(self, sub_category_id):
        """
        Sets the sub_category_id of this Grouping.

        :param sub_category_id: The sub_category_id of this Grouping.
        :type: int
        """

        self._sub_category_id = sub_category_id

    @property
    def country_id(self):
        """
        Gets the country_id of this Grouping.

        :return: The country_id of this Grouping.
        :rtype: int
        """
        return self._country_id

    @country_id.setter
    def country_id(self, country_id):
        """
        Sets the country_id of this Grouping.

        :param country_id: The country_id of this Grouping.
        :type: int
        """

        self._country_id = country_id

    @property
    def region_id(self):
        """
        Gets the region_id of this Grouping.

        :return: The region_id of this Grouping.
        :rtype: int
        """
        return self._region_id

    @region_id.setter
    def region_id(self, region_id):
        """
        Sets the region_id of this Grouping.

        :param region_id: The region_id of this Grouping.
        :type: int
        """

        self._region_id = region_id

    @property
    def date_start(self):
        """
        Gets the date_start of this Grouping.

        :return: The date_start of this Grouping.
        :rtype: str
        """
        return self._date_start

    @date_start.setter
    def date_start(self, date_start):
        """
        Sets the date_start of this Grouping.

        :param date_start: The date_start of this Grouping.
        :type: str
        """

        self._date_start = date_start

    @property
    def date_end(self):
        """
        Gets the date_end of this Grouping.

        :return: The date_end of this Grouping.
        :rtype: str
        """
        return self._date_end

    @date_end.setter
    def date_end(self, date_end):
        """
        Sets the date_end of this Grouping.

        :param date_end: The date_end of this Grouping.
        :type: str
        """

        self._date_end = date_end

    @property
    def formatted_date(self):
        """
        Gets the formatted_date of this Grouping.

        :return: The formatted_date of this Grouping.
        :rtype: str
        """
        return self._formatted_date

    @formatted_date.setter
    def formatted_date(self, formatted_date):
        """
        Sets the formatted_date of this Grouping.

        :param formatted_date: The formatted_date of this Grouping.
        :type: str
        """

        self._formatted_date = formatted_date

    @property
    def banner(self):
        """
        Gets the banner of this Grouping.

        :return: The banner of this Grouping.
        :rtype: str
        """
        return self._banner

    @banner.setter
    def banner(self, banner):
        """
        Sets the banner of this Grouping.

        :param banner: The banner of this Grouping.
        :type: str
        """

        self._banner = banner

    @property
    def home_banner(self):
        """
        Gets the home_banner of this Grouping.

        :return: The home_banner of this Grouping.
        :rtype: str
        """
        return self._home_banner

    @home_banner.setter
    def home_banner(self, home_banner):
        """
        Sets the home_banner of this Grouping.

        :param home_banner: The home_banner of this Grouping.
        :type: str
        """

        self._home_banner = home_banner

    @property
    def background(self):
        """
        Gets the background of this Grouping.

        :return: The background of this Grouping.
        :rtype: str
        """
        return self._background

    @background.setter
    def background(self, background):
        """
        Sets the background of this Grouping.

        :param background: The background of this Grouping.
        :type: str
        """

        self._background = background

    @property
    def thunbnail(self):
        """
        Gets the thunbnail of this Grouping.

        :return: The thunbnail of this Grouping.
        :rtype: str
        """
        return self._thunbnail

    @thunbnail.setter
    def thunbnail(self, thunbnail):
        """
        Sets the thunbnail of this Grouping.

        :param thunbnail: The thunbnail of this Grouping.
        :type: str
        """

        self._thunbnail = thunbnail

    @property
    def external_videos(self):
        """
        Gets the external_videos of this Grouping.

        :return: The external_videos of this Grouping.
        :rtype: list[str]
        """
        return self._external_videos

    @external_videos.setter
    def external_videos(self, external_videos):
        """
        Sets the external_videos of this Grouping.

        :param external_videos: The external_videos of this Grouping.
        :type: list[str]
        """

        self._external_videos = external_videos

    @property
    def exclusive_mode(self):
        """
        Gets the exclusive_mode of this Grouping.

        :return: The exclusive_mode of this Grouping.
        :rtype: bool
        """
        return self._exclusive_mode

    @exclusive_mode.setter
    def exclusive_mode(self, exclusive_mode):
        """
        Sets the exclusive_mode of this Grouping.

        :param exclusive_mode: The exclusive_mode of this Grouping.
        :type: bool
        """

        self._exclusive_mode = exclusive_mode

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Grouping):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
