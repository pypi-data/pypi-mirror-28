# coding: utf-8

"""
    Digitick REST API

    The Digitick REST API is a set of methods giving access to catalog, user and cart management.

    OpenAPI spec version: v1.0
    Contact: contact@digitick.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class HolderFieldsResponseInnerHolderFields(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, _property=None, label=None, holder_field_value=None):
        """
        HolderFieldsResponseInnerHolderFields - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            '_property': 'str',
            'label': 'str',
            'holder_field_value': 'bool'
        }

        self.attribute_map = {
            '_property': 'property',
            'label': 'label',
            'holder_field_value': 'holderFieldValue'
        }

        self.__property = _property
        self._label = label
        self._holder_field_value = holder_field_value

    @property
    def _property(self):
        """
        Gets the _property of this HolderFieldsResponseInnerHolderFields.

        :return: The _property of this HolderFieldsResponseInnerHolderFields.
        :rtype: str
        """
        return self.__property

    @_property.setter
    def _property(self, _property):
        """
        Sets the _property of this HolderFieldsResponseInnerHolderFields.

        :param _property: The _property of this HolderFieldsResponseInnerHolderFields.
        :type: str
        """

        self.__property = _property

    @property
    def label(self):
        """
        Gets the label of this HolderFieldsResponseInnerHolderFields.

        :return: The label of this HolderFieldsResponseInnerHolderFields.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """
        Sets the label of this HolderFieldsResponseInnerHolderFields.

        :param label: The label of this HolderFieldsResponseInnerHolderFields.
        :type: str
        """

        self._label = label

    @property
    def holder_field_value(self):
        """
        Gets the holder_field_value of this HolderFieldsResponseInnerHolderFields.

        :return: The holder_field_value of this HolderFieldsResponseInnerHolderFields.
        :rtype: bool
        """
        return self._holder_field_value

    @holder_field_value.setter
    def holder_field_value(self, holder_field_value):
        """
        Sets the holder_field_value of this HolderFieldsResponseInnerHolderFields.

        :param holder_field_value: The holder_field_value of this HolderFieldsResponseInnerHolderFields.
        :type: bool
        """

        self._holder_field_value = holder_field_value

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, HolderFieldsResponseInnerHolderFields):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
