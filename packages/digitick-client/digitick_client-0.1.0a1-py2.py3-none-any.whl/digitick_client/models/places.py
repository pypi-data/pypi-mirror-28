# coding: utf-8

"""
    Digitick REST API

    The Digitick REST API is a set of methods giving access to catalog, user and cart management.

    OpenAPI spec version: v1.0
    Contact: contact@digitick.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Places(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'show_id': 'int',
        'places_with_position': 'list[PlaceWithBlock]',
        'places_without_position': 'list[PlaceNoBlock]'
    }

    attribute_map = {
        'show_id': 'showId',
        'places_with_position': 'placesWithPosition',
        'places_without_position': 'placesWithoutPosition'
    }

    def __init__(self, show_id=None, places_with_position=None, places_without_position=None):
        """
        Places - a model defined in Swagger
        """

        self._show_id = None
        self._places_with_position = None
        self._places_without_position = None

        if show_id is not None:
          self.show_id = show_id
        if places_with_position is not None:
          self.places_with_position = places_with_position
        if places_without_position is not None:
          self.places_without_position = places_without_position

    @property
    def show_id(self):
        """
        Gets the show_id of this Places.

        :return: The show_id of this Places.
        :rtype: int
        """
        return self._show_id

    @show_id.setter
    def show_id(self, show_id):
        """
        Sets the show_id of this Places.

        :param show_id: The show_id of this Places.
        :type: int
        """

        self._show_id = show_id

    @property
    def places_with_position(self):
        """
        Gets the places_with_position of this Places.

        :return: The places_with_position of this Places.
        :rtype: list[PlaceWithBlock]
        """
        return self._places_with_position

    @places_with_position.setter
    def places_with_position(self, places_with_position):
        """
        Sets the places_with_position of this Places.

        :param places_with_position: The places_with_position of this Places.
        :type: list[PlaceWithBlock]
        """

        self._places_with_position = places_with_position

    @property
    def places_without_position(self):
        """
        Gets the places_without_position of this Places.

        :return: The places_without_position of this Places.
        :rtype: list[PlaceNoBlock]
        """
        return self._places_without_position

    @places_without_position.setter
    def places_without_position(self, places_without_position):
        """
        Sets the places_without_position of this Places.

        :param places_without_position: The places_without_position of this Places.
        :type: list[PlaceNoBlock]
        """

        self._places_without_position = places_without_position

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Places):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
