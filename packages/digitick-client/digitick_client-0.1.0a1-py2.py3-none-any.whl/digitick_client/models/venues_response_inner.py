# coding: utf-8

"""
    Digitick REST API

    The Digitick REST API is a set of methods giving access to catalog, user and cart management.

    OpenAPI spec version: v1.0
    Contact: contact@digitick.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class VenuesResponseInner(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'address': 'int',
        'zip_code': 'str',
        'city': 'str',
        'country_id': 'bool',
        'capacity': 'int',
        'picture_url110_png': 'str',
        'picture_url80_gif': 'str',
        'picture_url45_gif': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'address': 'address',
        'zip_code': 'zipCode',
        'city': 'city',
        'country_id': 'countryId',
        'capacity': 'capacity',
        'picture_url110_png': 'pictureUrl110Png',
        'picture_url80_gif': 'pictureUrl80Gif',
        'picture_url45_gif': 'pictureUrl45Gif'
    }

    def __init__(self, id=None, name=None, address=None, zip_code=None, city=None, country_id=None, capacity=None, picture_url110_png=None, picture_url80_gif=None, picture_url45_gif=None):
        """
        VenuesResponseInner - a model defined in Swagger
        """

        self._id = None
        self._name = None
        self._address = None
        self._zip_code = None
        self._city = None
        self._country_id = None
        self._capacity = None
        self._picture_url110_png = None
        self._picture_url80_gif = None
        self._picture_url45_gif = None

        if id is not None:
          self.id = id
        if name is not None:
          self.name = name
        if address is not None:
          self.address = address
        if zip_code is not None:
          self.zip_code = zip_code
        if city is not None:
          self.city = city
        if country_id is not None:
          self.country_id = country_id
        if capacity is not None:
          self.capacity = capacity
        if picture_url110_png is not None:
          self.picture_url110_png = picture_url110_png
        if picture_url80_gif is not None:
          self.picture_url80_gif = picture_url80_gif
        if picture_url45_gif is not None:
          self.picture_url45_gif = picture_url45_gif

    @property
    def id(self):
        """
        Gets the id of this VenuesResponseInner.

        :return: The id of this VenuesResponseInner.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this VenuesResponseInner.

        :param id: The id of this VenuesResponseInner.
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this VenuesResponseInner.

        :return: The name of this VenuesResponseInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this VenuesResponseInner.

        :param name: The name of this VenuesResponseInner.
        :type: str
        """

        self._name = name

    @property
    def address(self):
        """
        Gets the address of this VenuesResponseInner.

        :return: The address of this VenuesResponseInner.
        :rtype: int
        """
        return self._address

    @address.setter
    def address(self, address):
        """
        Sets the address of this VenuesResponseInner.

        :param address: The address of this VenuesResponseInner.
        :type: int
        """

        self._address = address

    @property
    def zip_code(self):
        """
        Gets the zip_code of this VenuesResponseInner.

        :return: The zip_code of this VenuesResponseInner.
        :rtype: str
        """
        return self._zip_code

    @zip_code.setter
    def zip_code(self, zip_code):
        """
        Sets the zip_code of this VenuesResponseInner.

        :param zip_code: The zip_code of this VenuesResponseInner.
        :type: str
        """

        self._zip_code = zip_code

    @property
    def city(self):
        """
        Gets the city of this VenuesResponseInner.

        :return: The city of this VenuesResponseInner.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """
        Sets the city of this VenuesResponseInner.

        :param city: The city of this VenuesResponseInner.
        :type: str
        """

        self._city = city

    @property
    def country_id(self):
        """
        Gets the country_id of this VenuesResponseInner.

        :return: The country_id of this VenuesResponseInner.
        :rtype: bool
        """
        return self._country_id

    @country_id.setter
    def country_id(self, country_id):
        """
        Sets the country_id of this VenuesResponseInner.

        :param country_id: The country_id of this VenuesResponseInner.
        :type: bool
        """

        self._country_id = country_id

    @property
    def capacity(self):
        """
        Gets the capacity of this VenuesResponseInner.

        :return: The capacity of this VenuesResponseInner.
        :rtype: int
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity):
        """
        Sets the capacity of this VenuesResponseInner.

        :param capacity: The capacity of this VenuesResponseInner.
        :type: int
        """

        self._capacity = capacity

    @property
    def picture_url110_png(self):
        """
        Gets the picture_url110_png of this VenuesResponseInner.

        :return: The picture_url110_png of this VenuesResponseInner.
        :rtype: str
        """
        return self._picture_url110_png

    @picture_url110_png.setter
    def picture_url110_png(self, picture_url110_png):
        """
        Sets the picture_url110_png of this VenuesResponseInner.

        :param picture_url110_png: The picture_url110_png of this VenuesResponseInner.
        :type: str
        """

        self._picture_url110_png = picture_url110_png

    @property
    def picture_url80_gif(self):
        """
        Gets the picture_url80_gif of this VenuesResponseInner.

        :return: The picture_url80_gif of this VenuesResponseInner.
        :rtype: str
        """
        return self._picture_url80_gif

    @picture_url80_gif.setter
    def picture_url80_gif(self, picture_url80_gif):
        """
        Sets the picture_url80_gif of this VenuesResponseInner.

        :param picture_url80_gif: The picture_url80_gif of this VenuesResponseInner.
        :type: str
        """

        self._picture_url80_gif = picture_url80_gif

    @property
    def picture_url45_gif(self):
        """
        Gets the picture_url45_gif of this VenuesResponseInner.

        :return: The picture_url45_gif of this VenuesResponseInner.
        :rtype: str
        """
        return self._picture_url45_gif

    @picture_url45_gif.setter
    def picture_url45_gif(self, picture_url45_gif):
        """
        Sets the picture_url45_gif of this VenuesResponseInner.

        :param picture_url45_gif: The picture_url45_gif of this VenuesResponseInner.
        :type: str
        """

        self._picture_url45_gif = picture_url45_gif

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, VenuesResponseInner):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
