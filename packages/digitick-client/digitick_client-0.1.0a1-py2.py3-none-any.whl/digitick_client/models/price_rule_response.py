# coding: utf-8

"""
    Digitick REST API

    The Digitick REST API is a set of methods giving access to catalog, user and cart management.

    OpenAPI spec version: v1.0
    Contact: contact@digitick.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class PriceRuleResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, name=None, quantity=None, is_mandatory=None, is_byrepresentation=None, is_added_automatically=None, conditions=None):
        """
        PriceRuleResponse - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'name': 'str',
            'quantity': 'int',
            'is_mandatory': 'bool',
            'is_byrepresentation': 'bool',
            'is_added_automatically': 'bool',
            'conditions': 'list[PriceCondition]'
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'quantity': 'quantity',
            'is_mandatory': 'isMandatory',
            'is_byrepresentation': 'isByrepresentation',
            'is_added_automatically': 'isAddedAutomatically',
            'conditions': 'conditions'
        }

        self._id = id
        self._name = name
        self._quantity = quantity
        self._is_mandatory = is_mandatory
        self._is_byrepresentation = is_byrepresentation
        self._is_added_automatically = is_added_automatically
        self._conditions = conditions

    @property
    def id(self):
        """
        Gets the id of this PriceRuleResponse.

        :return: The id of this PriceRuleResponse.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this PriceRuleResponse.

        :param id: The id of this PriceRuleResponse.
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this PriceRuleResponse.

        :return: The name of this PriceRuleResponse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this PriceRuleResponse.

        :param name: The name of this PriceRuleResponse.
        :type: str
        """

        self._name = name

    @property
    def quantity(self):
        """
        Gets the quantity of this PriceRuleResponse.

        :return: The quantity of this PriceRuleResponse.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """
        Sets the quantity of this PriceRuleResponse.

        :param quantity: The quantity of this PriceRuleResponse.
        :type: int
        """

        self._quantity = quantity

    @property
    def is_mandatory(self):
        """
        Gets the is_mandatory of this PriceRuleResponse.

        :return: The is_mandatory of this PriceRuleResponse.
        :rtype: bool
        """
        return self._is_mandatory

    @is_mandatory.setter
    def is_mandatory(self, is_mandatory):
        """
        Sets the is_mandatory of this PriceRuleResponse.

        :param is_mandatory: The is_mandatory of this PriceRuleResponse.
        :type: bool
        """

        self._is_mandatory = is_mandatory

    @property
    def is_byrepresentation(self):
        """
        Gets the is_byrepresentation of this PriceRuleResponse.

        :return: The is_byrepresentation of this PriceRuleResponse.
        :rtype: bool
        """
        return self._is_byrepresentation

    @is_byrepresentation.setter
    def is_byrepresentation(self, is_byrepresentation):
        """
        Sets the is_byrepresentation of this PriceRuleResponse.

        :param is_byrepresentation: The is_byrepresentation of this PriceRuleResponse.
        :type: bool
        """

        self._is_byrepresentation = is_byrepresentation

    @property
    def is_added_automatically(self):
        """
        Gets the is_added_automatically of this PriceRuleResponse.

        :return: The is_added_automatically of this PriceRuleResponse.
        :rtype: bool
        """
        return self._is_added_automatically

    @is_added_automatically.setter
    def is_added_automatically(self, is_added_automatically):
        """
        Sets the is_added_automatically of this PriceRuleResponse.

        :param is_added_automatically: The is_added_automatically of this PriceRuleResponse.
        :type: bool
        """

        self._is_added_automatically = is_added_automatically

    @property
    def conditions(self):
        """
        Gets the conditions of this PriceRuleResponse.

        :return: The conditions of this PriceRuleResponse.
        :rtype: list[PriceCondition]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """
        Sets the conditions of this PriceRuleResponse.

        :param conditions: The conditions of this PriceRuleResponse.
        :type: list[PriceCondition]
        """

        self._conditions = conditions

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, PriceRuleResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
