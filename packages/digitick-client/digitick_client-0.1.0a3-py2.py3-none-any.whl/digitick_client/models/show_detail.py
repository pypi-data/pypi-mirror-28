# coding: utf-8

"""
    Digitick REST API

    The Digitick REST API is a set of methods giving access to catalog, user and cart management.

    OpenAPI spec version: v1.0
    Contact: contact@digitick.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ShowDetail(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, start=None, end=None, venue=None, address=None, zip_code=None, city=None, country_id=None, number_of_prices=None, min_price_cents=None, max_price_cents=None, reserved_seats=None, plan_url=None, plan_last_change=None, status=None, sales_start=None, sales_end=None, is_exclu=None, guest=None, organizer_message=None, downloadable_on_mobile=None):
        """
        ShowDetail - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'start': 'str',
            'end': 'str',
            'venue': 'str',
            'address': 'str',
            'zip_code': 'str',
            'city': 'str',
            'country_id': 'int',
            'number_of_prices': 'int',
            'min_price_cents': 'int',
            'max_price_cents': 'int',
            'reserved_seats': 'bool',
            'plan_url': 'str',
            'plan_last_change': 'str',
            'status': 'int',
            'sales_start': 'str',
            'sales_end': 'str',
            'is_exclu': 'bool',
            'guest': 'str',
            'organizer_message': 'str',
            'downloadable_on_mobile': 'bool'
        }

        self.attribute_map = {
            'id': 'id',
            'start': 'start',
            'end': 'end',
            'venue': 'venue',
            'address': 'address',
            'zip_code': 'zipCode',
            'city': 'city',
            'country_id': 'countryId',
            'number_of_prices': 'numberOfPrices',
            'min_price_cents': 'minPriceCents',
            'max_price_cents': 'maxPriceCents',
            'reserved_seats': 'reservedSeats',
            'plan_url': 'planUrl',
            'plan_last_change': 'planLastChange',
            'status': 'status',
            'sales_start': 'salesStart',
            'sales_end': 'salesEnd',
            'is_exclu': 'isExclu',
            'guest': 'guest',
            'organizer_message': 'organizerMessage',
            'downloadable_on_mobile': 'downloadableOnMobile'
        }

        self._id = id
        self._start = start
        self._end = end
        self._venue = venue
        self._address = address
        self._zip_code = zip_code
        self._city = city
        self._country_id = country_id
        self._number_of_prices = number_of_prices
        self._min_price_cents = min_price_cents
        self._max_price_cents = max_price_cents
        self._reserved_seats = reserved_seats
        self._plan_url = plan_url
        self._plan_last_change = plan_last_change
        self._status = status
        self._sales_start = sales_start
        self._sales_end = sales_end
        self._is_exclu = is_exclu
        self._guest = guest
        self._organizer_message = organizer_message
        self._downloadable_on_mobile = downloadable_on_mobile

    @property
    def id(self):
        """
        Gets the id of this ShowDetail.

        :return: The id of this ShowDetail.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ShowDetail.

        :param id: The id of this ShowDetail.
        :type: int
        """

        self._id = id

    @property
    def start(self):
        """
        Gets the start of this ShowDetail.

        :return: The start of this ShowDetail.
        :rtype: str
        """
        return self._start

    @start.setter
    def start(self, start):
        """
        Sets the start of this ShowDetail.

        :param start: The start of this ShowDetail.
        :type: str
        """

        self._start = start

    @property
    def end(self):
        """
        Gets the end of this ShowDetail.

        :return: The end of this ShowDetail.
        :rtype: str
        """
        return self._end

    @end.setter
    def end(self, end):
        """
        Sets the end of this ShowDetail.

        :param end: The end of this ShowDetail.
        :type: str
        """

        self._end = end

    @property
    def venue(self):
        """
        Gets the venue of this ShowDetail.

        :return: The venue of this ShowDetail.
        :rtype: str
        """
        return self._venue

    @venue.setter
    def venue(self, venue):
        """
        Sets the venue of this ShowDetail.

        :param venue: The venue of this ShowDetail.
        :type: str
        """

        self._venue = venue

    @property
    def address(self):
        """
        Gets the address of this ShowDetail.

        :return: The address of this ShowDetail.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """
        Sets the address of this ShowDetail.

        :param address: The address of this ShowDetail.
        :type: str
        """

        self._address = address

    @property
    def zip_code(self):
        """
        Gets the zip_code of this ShowDetail.

        :return: The zip_code of this ShowDetail.
        :rtype: str
        """
        return self._zip_code

    @zip_code.setter
    def zip_code(self, zip_code):
        """
        Sets the zip_code of this ShowDetail.

        :param zip_code: The zip_code of this ShowDetail.
        :type: str
        """

        self._zip_code = zip_code

    @property
    def city(self):
        """
        Gets the city of this ShowDetail.

        :return: The city of this ShowDetail.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """
        Sets the city of this ShowDetail.

        :param city: The city of this ShowDetail.
        :type: str
        """

        self._city = city

    @property
    def country_id(self):
        """
        Gets the country_id of this ShowDetail.

        :return: The country_id of this ShowDetail.
        :rtype: int
        """
        return self._country_id

    @country_id.setter
    def country_id(self, country_id):
        """
        Sets the country_id of this ShowDetail.

        :param country_id: The country_id of this ShowDetail.
        :type: int
        """

        self._country_id = country_id

    @property
    def number_of_prices(self):
        """
        Gets the number_of_prices of this ShowDetail.

        :return: The number_of_prices of this ShowDetail.
        :rtype: int
        """
        return self._number_of_prices

    @number_of_prices.setter
    def number_of_prices(self, number_of_prices):
        """
        Sets the number_of_prices of this ShowDetail.

        :param number_of_prices: The number_of_prices of this ShowDetail.
        :type: int
        """

        self._number_of_prices = number_of_prices

    @property
    def min_price_cents(self):
        """
        Gets the min_price_cents of this ShowDetail.

        :return: The min_price_cents of this ShowDetail.
        :rtype: int
        """
        return self._min_price_cents

    @min_price_cents.setter
    def min_price_cents(self, min_price_cents):
        """
        Sets the min_price_cents of this ShowDetail.

        :param min_price_cents: The min_price_cents of this ShowDetail.
        :type: int
        """

        self._min_price_cents = min_price_cents

    @property
    def max_price_cents(self):
        """
        Gets the max_price_cents of this ShowDetail.

        :return: The max_price_cents of this ShowDetail.
        :rtype: int
        """
        return self._max_price_cents

    @max_price_cents.setter
    def max_price_cents(self, max_price_cents):
        """
        Sets the max_price_cents of this ShowDetail.

        :param max_price_cents: The max_price_cents of this ShowDetail.
        :type: int
        """

        self._max_price_cents = max_price_cents

    @property
    def reserved_seats(self):
        """
        Gets the reserved_seats of this ShowDetail.

        :return: The reserved_seats of this ShowDetail.
        :rtype: bool
        """
        return self._reserved_seats

    @reserved_seats.setter
    def reserved_seats(self, reserved_seats):
        """
        Sets the reserved_seats of this ShowDetail.

        :param reserved_seats: The reserved_seats of this ShowDetail.
        :type: bool
        """

        self._reserved_seats = reserved_seats

    @property
    def plan_url(self):
        """
        Gets the plan_url of this ShowDetail.

        :return: The plan_url of this ShowDetail.
        :rtype: str
        """
        return self._plan_url

    @plan_url.setter
    def plan_url(self, plan_url):
        """
        Sets the plan_url of this ShowDetail.

        :param plan_url: The plan_url of this ShowDetail.
        :type: str
        """

        self._plan_url = plan_url

    @property
    def plan_last_change(self):
        """
        Gets the plan_last_change of this ShowDetail.

        :return: The plan_last_change of this ShowDetail.
        :rtype: str
        """
        return self._plan_last_change

    @plan_last_change.setter
    def plan_last_change(self, plan_last_change):
        """
        Sets the plan_last_change of this ShowDetail.

        :param plan_last_change: The plan_last_change of this ShowDetail.
        :type: str
        """

        self._plan_last_change = plan_last_change

    @property
    def status(self):
        """
        Gets the status of this ShowDetail.

        :return: The status of this ShowDetail.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this ShowDetail.

        :param status: The status of this ShowDetail.
        :type: int
        """

        self._status = status

    @property
    def sales_start(self):
        """
        Gets the sales_start of this ShowDetail.

        :return: The sales_start of this ShowDetail.
        :rtype: str
        """
        return self._sales_start

    @sales_start.setter
    def sales_start(self, sales_start):
        """
        Sets the sales_start of this ShowDetail.

        :param sales_start: The sales_start of this ShowDetail.
        :type: str
        """

        self._sales_start = sales_start

    @property
    def sales_end(self):
        """
        Gets the sales_end of this ShowDetail.

        :return: The sales_end of this ShowDetail.
        :rtype: str
        """
        return self._sales_end

    @sales_end.setter
    def sales_end(self, sales_end):
        """
        Sets the sales_end of this ShowDetail.

        :param sales_end: The sales_end of this ShowDetail.
        :type: str
        """

        self._sales_end = sales_end

    @property
    def is_exclu(self):
        """
        Gets the is_exclu of this ShowDetail.

        :return: The is_exclu of this ShowDetail.
        :rtype: bool
        """
        return self._is_exclu

    @is_exclu.setter
    def is_exclu(self, is_exclu):
        """
        Sets the is_exclu of this ShowDetail.

        :param is_exclu: The is_exclu of this ShowDetail.
        :type: bool
        """

        self._is_exclu = is_exclu

    @property
    def guest(self):
        """
        Gets the guest of this ShowDetail.

        :return: The guest of this ShowDetail.
        :rtype: str
        """
        return self._guest

    @guest.setter
    def guest(self, guest):
        """
        Sets the guest of this ShowDetail.

        :param guest: The guest of this ShowDetail.
        :type: str
        """

        self._guest = guest

    @property
    def organizer_message(self):
        """
        Gets the organizer_message of this ShowDetail.

        :return: The organizer_message of this ShowDetail.
        :rtype: str
        """
        return self._organizer_message

    @organizer_message.setter
    def organizer_message(self, organizer_message):
        """
        Sets the organizer_message of this ShowDetail.

        :param organizer_message: The organizer_message of this ShowDetail.
        :type: str
        """

        self._organizer_message = organizer_message

    @property
    def downloadable_on_mobile(self):
        """
        Gets the downloadable_on_mobile of this ShowDetail.

        :return: The downloadable_on_mobile of this ShowDetail.
        :rtype: bool
        """
        return self._downloadable_on_mobile

    @downloadable_on_mobile.setter
    def downloadable_on_mobile(self, downloadable_on_mobile):
        """
        Sets the downloadable_on_mobile of this ShowDetail.

        :param downloadable_on_mobile: The downloadable_on_mobile of this ShowDetail.
        :type: bool
        """

        self._downloadable_on_mobile = downloadable_on_mobile

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ShowDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
