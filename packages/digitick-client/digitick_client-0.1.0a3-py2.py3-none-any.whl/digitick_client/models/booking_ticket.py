# coding: utf-8

"""
    Digitick REST API

    The Digitick REST API is a set of methods giving access to catalog, user and cart management.

    OpenAPI spec version: v1.0
    Contact: contact@digitick.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class BookingTicket(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, owner_lastname=None, owner_firstname=None, price_id=None, show_id=None, nb_entries=None, seat_id=None):
        """
        BookingTicket - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'owner_lastname': 'str',
            'owner_firstname': 'str',
            'price_id': 'int',
            'show_id': 'int',
            'nb_entries': 'int',
            'seat_id': 'int'
        }

        self.attribute_map = {
            'id': 'id',
            'owner_lastname': 'ownerLastname',
            'owner_firstname': 'ownerFirstname',
            'price_id': 'priceId',
            'show_id': 'showId',
            'nb_entries': 'nbEntries',
            'seat_id': 'seatId'
        }

        self._id = id
        self._owner_lastname = owner_lastname
        self._owner_firstname = owner_firstname
        self._price_id = price_id
        self._show_id = show_id
        self._nb_entries = nb_entries
        self._seat_id = seat_id

    @property
    def id(self):
        """
        Gets the id of this BookingTicket.

        :return: The id of this BookingTicket.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this BookingTicket.

        :param id: The id of this BookingTicket.
        :type: int
        """

        self._id = id

    @property
    def owner_lastname(self):
        """
        Gets the owner_lastname of this BookingTicket.

        :return: The owner_lastname of this BookingTicket.
        :rtype: str
        """
        return self._owner_lastname

    @owner_lastname.setter
    def owner_lastname(self, owner_lastname):
        """
        Sets the owner_lastname of this BookingTicket.

        :param owner_lastname: The owner_lastname of this BookingTicket.
        :type: str
        """

        self._owner_lastname = owner_lastname

    @property
    def owner_firstname(self):
        """
        Gets the owner_firstname of this BookingTicket.

        :return: The owner_firstname of this BookingTicket.
        :rtype: str
        """
        return self._owner_firstname

    @owner_firstname.setter
    def owner_firstname(self, owner_firstname):
        """
        Sets the owner_firstname of this BookingTicket.

        :param owner_firstname: The owner_firstname of this BookingTicket.
        :type: str
        """

        self._owner_firstname = owner_firstname

    @property
    def price_id(self):
        """
        Gets the price_id of this BookingTicket.

        :return: The price_id of this BookingTicket.
        :rtype: int
        """
        return self._price_id

    @price_id.setter
    def price_id(self, price_id):
        """
        Sets the price_id of this BookingTicket.

        :param price_id: The price_id of this BookingTicket.
        :type: int
        """

        self._price_id = price_id

    @property
    def show_id(self):
        """
        Gets the show_id of this BookingTicket.

        :return: The show_id of this BookingTicket.
        :rtype: int
        """
        return self._show_id

    @show_id.setter
    def show_id(self, show_id):
        """
        Sets the show_id of this BookingTicket.

        :param show_id: The show_id of this BookingTicket.
        :type: int
        """

        self._show_id = show_id

    @property
    def nb_entries(self):
        """
        Gets the nb_entries of this BookingTicket.

        :return: The nb_entries of this BookingTicket.
        :rtype: int
        """
        return self._nb_entries

    @nb_entries.setter
    def nb_entries(self, nb_entries):
        """
        Sets the nb_entries of this BookingTicket.

        :param nb_entries: The nb_entries of this BookingTicket.
        :type: int
        """

        self._nb_entries = nb_entries

    @property
    def seat_id(self):
        """
        Gets the seat_id of this BookingTicket.

        :return: The seat_id of this BookingTicket.
        :rtype: int
        """
        return self._seat_id

    @seat_id.setter
    def seat_id(self, seat_id):
        """
        Sets the seat_id of this BookingTicket.

        :param seat_id: The seat_id of this BookingTicket.
        :type: int
        """

        self._seat_id = seat_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, BookingTicket):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
