# coding: utf-8

"""
    Digitick REST API

    The Digitick REST API is a set of methods giving access to catalog, user and cart management.

    OpenAPI spec version: v1.0
    Contact: contact@digitick.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class PricesResponseInner(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, name=None, value_cents=None, quantity_list=None, required_document=None, access_code_required=None, total_available_seats=None, customer_category=None, price_type=None, block_id_list=None, is_exclu=None, customer_type=None, customer_type_id=None, price_category=None, price_category_id=None):
        """
        PricesResponseInner - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'name': 'str',
            'value_cents': 'int',
            'quantity_list': 'list[int]',
            'required_document': 'str',
            'access_code_required': 'bool',
            'total_available_seats': 'int',
            'customer_category': 'str',
            'price_type': 'str',
            'block_id_list': 'list[int]',
            'is_exclu': 'bool',
            'customer_type': 'str',
            'customer_type_id': 'int',
            'price_category': 'str',
            'price_category_id': 'int'
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'value_cents': 'valueCents',
            'quantity_list': 'quantityList',
            'required_document': 'requiredDocument',
            'access_code_required': 'accessCodeRequired',
            'total_available_seats': 'totalAvailableSeats',
            'customer_category': 'customerCategory',
            'price_type': 'priceType',
            'block_id_list': 'blockIdList',
            'is_exclu': 'isExclu',
            'customer_type': 'customerType',
            'customer_type_id': 'customerTypeId',
            'price_category': 'priceCategory',
            'price_category_id': 'priceCategoryId'
        }

        self._id = id
        self._name = name
        self._value_cents = value_cents
        self._quantity_list = quantity_list
        self._required_document = required_document
        self._access_code_required = access_code_required
        self._total_available_seats = total_available_seats
        self._customer_category = customer_category
        self._price_type = price_type
        self._block_id_list = block_id_list
        self._is_exclu = is_exclu
        self._customer_type = customer_type
        self._customer_type_id = customer_type_id
        self._price_category = price_category
        self._price_category_id = price_category_id

    @property
    def id(self):
        """
        Gets the id of this PricesResponseInner.

        :return: The id of this PricesResponseInner.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this PricesResponseInner.

        :param id: The id of this PricesResponseInner.
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this PricesResponseInner.

        :return: The name of this PricesResponseInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this PricesResponseInner.

        :param name: The name of this PricesResponseInner.
        :type: str
        """

        self._name = name

    @property
    def value_cents(self):
        """
        Gets the value_cents of this PricesResponseInner.

        :return: The value_cents of this PricesResponseInner.
        :rtype: int
        """
        return self._value_cents

    @value_cents.setter
    def value_cents(self, value_cents):
        """
        Sets the value_cents of this PricesResponseInner.

        :param value_cents: The value_cents of this PricesResponseInner.
        :type: int
        """

        self._value_cents = value_cents

    @property
    def quantity_list(self):
        """
        Gets the quantity_list of this PricesResponseInner.

        :return: The quantity_list of this PricesResponseInner.
        :rtype: list[int]
        """
        return self._quantity_list

    @quantity_list.setter
    def quantity_list(self, quantity_list):
        """
        Sets the quantity_list of this PricesResponseInner.

        :param quantity_list: The quantity_list of this PricesResponseInner.
        :type: list[int]
        """

        self._quantity_list = quantity_list

    @property
    def required_document(self):
        """
        Gets the required_document of this PricesResponseInner.

        :return: The required_document of this PricesResponseInner.
        :rtype: str
        """
        return self._required_document

    @required_document.setter
    def required_document(self, required_document):
        """
        Sets the required_document of this PricesResponseInner.

        :param required_document: The required_document of this PricesResponseInner.
        :type: str
        """

        self._required_document = required_document

    @property
    def access_code_required(self):
        """
        Gets the access_code_required of this PricesResponseInner.

        :return: The access_code_required of this PricesResponseInner.
        :rtype: bool
        """
        return self._access_code_required

    @access_code_required.setter
    def access_code_required(self, access_code_required):
        """
        Sets the access_code_required of this PricesResponseInner.

        :param access_code_required: The access_code_required of this PricesResponseInner.
        :type: bool
        """

        self._access_code_required = access_code_required

    @property
    def total_available_seats(self):
        """
        Gets the total_available_seats of this PricesResponseInner.

        :return: The total_available_seats of this PricesResponseInner.
        :rtype: int
        """
        return self._total_available_seats

    @total_available_seats.setter
    def total_available_seats(self, total_available_seats):
        """
        Sets the total_available_seats of this PricesResponseInner.

        :param total_available_seats: The total_available_seats of this PricesResponseInner.
        :type: int
        """

        self._total_available_seats = total_available_seats

    @property
    def customer_category(self):
        """
        Gets the customer_category of this PricesResponseInner.

        :return: The customer_category of this PricesResponseInner.
        :rtype: str
        """
        return self._customer_category

    @customer_category.setter
    def customer_category(self, customer_category):
        """
        Sets the customer_category of this PricesResponseInner.

        :param customer_category: The customer_category of this PricesResponseInner.
        :type: str
        """

        self._customer_category = customer_category

    @property
    def price_type(self):
        """
        Gets the price_type of this PricesResponseInner.

        :return: The price_type of this PricesResponseInner.
        :rtype: str
        """
        return self._price_type

    @price_type.setter
    def price_type(self, price_type):
        """
        Sets the price_type of this PricesResponseInner.

        :param price_type: The price_type of this PricesResponseInner.
        :type: str
        """

        self._price_type = price_type

    @property
    def block_id_list(self):
        """
        Gets the block_id_list of this PricesResponseInner.

        :return: The block_id_list of this PricesResponseInner.
        :rtype: list[int]
        """
        return self._block_id_list

    @block_id_list.setter
    def block_id_list(self, block_id_list):
        """
        Sets the block_id_list of this PricesResponseInner.

        :param block_id_list: The block_id_list of this PricesResponseInner.
        :type: list[int]
        """

        self._block_id_list = block_id_list

    @property
    def is_exclu(self):
        """
        Gets the is_exclu of this PricesResponseInner.

        :return: The is_exclu of this PricesResponseInner.
        :rtype: bool
        """
        return self._is_exclu

    @is_exclu.setter
    def is_exclu(self, is_exclu):
        """
        Sets the is_exclu of this PricesResponseInner.

        :param is_exclu: The is_exclu of this PricesResponseInner.
        :type: bool
        """

        self._is_exclu = is_exclu

    @property
    def customer_type(self):
        """
        Gets the customer_type of this PricesResponseInner.

        :return: The customer_type of this PricesResponseInner.
        :rtype: str
        """
        return self._customer_type

    @customer_type.setter
    def customer_type(self, customer_type):
        """
        Sets the customer_type of this PricesResponseInner.

        :param customer_type: The customer_type of this PricesResponseInner.
        :type: str
        """

        self._customer_type = customer_type

    @property
    def customer_type_id(self):
        """
        Gets the customer_type_id of this PricesResponseInner.

        :return: The customer_type_id of this PricesResponseInner.
        :rtype: int
        """
        return self._customer_type_id

    @customer_type_id.setter
    def customer_type_id(self, customer_type_id):
        """
        Sets the customer_type_id of this PricesResponseInner.

        :param customer_type_id: The customer_type_id of this PricesResponseInner.
        :type: int
        """

        self._customer_type_id = customer_type_id

    @property
    def price_category(self):
        """
        Gets the price_category of this PricesResponseInner.

        :return: The price_category of this PricesResponseInner.
        :rtype: str
        """
        return self._price_category

    @price_category.setter
    def price_category(self, price_category):
        """
        Sets the price_category of this PricesResponseInner.

        :param price_category: The price_category of this PricesResponseInner.
        :type: str
        """

        self._price_category = price_category

    @property
    def price_category_id(self):
        """
        Gets the price_category_id of this PricesResponseInner.

        :return: The price_category_id of this PricesResponseInner.
        :rtype: int
        """
        return self._price_category_id

    @price_category_id.setter
    def price_category_id(self, price_category_id):
        """
        Sets the price_category_id of this PricesResponseInner.

        :param price_category_id: The price_category_id of this PricesResponseInner.
        :type: int
        """

        self._price_category_id = price_category_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, PricesResponseInner):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
