# coding: utf-8

"""
    Digitick REST API

    The Digitick REST API is a set of methods giving access to catalog, user and cart management.

    OpenAPI spec version: v1.0
    Contact: contact@digitick.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ShowsBlocksAvailabilityResponseInner(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, block_id=None, price_id=None, customer_category=None, price_type=None, reserved_seats=None, availability=None, block_availability=None, date_status=None):
        """
        ShowsBlocksAvailabilityResponseInner - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'block_id': 'int',
            'price_id': 'int',
            'customer_category': 'str',
            'price_type': 'str',
            'reserved_seats': 'bool',
            'availability': 'int',
            'block_availability': 'int',
            'date_status': 'int'
        }

        self.attribute_map = {
            'block_id': 'blockId',
            'price_id': 'priceId',
            'customer_category': 'customerCategory',
            'price_type': 'priceType',
            'reserved_seats': 'reservedSeats',
            'availability': 'availability',
            'block_availability': 'blockAvailability',
            'date_status': 'dateStatus'
        }

        self._block_id = block_id
        self._price_id = price_id
        self._customer_category = customer_category
        self._price_type = price_type
        self._reserved_seats = reserved_seats
        self._availability = availability
        self._block_availability = block_availability
        self._date_status = date_status

    @property
    def block_id(self):
        """
        Gets the block_id of this ShowsBlocksAvailabilityResponseInner.

        :return: The block_id of this ShowsBlocksAvailabilityResponseInner.
        :rtype: int
        """
        return self._block_id

    @block_id.setter
    def block_id(self, block_id):
        """
        Sets the block_id of this ShowsBlocksAvailabilityResponseInner.

        :param block_id: The block_id of this ShowsBlocksAvailabilityResponseInner.
        :type: int
        """

        self._block_id = block_id

    @property
    def price_id(self):
        """
        Gets the price_id of this ShowsBlocksAvailabilityResponseInner.

        :return: The price_id of this ShowsBlocksAvailabilityResponseInner.
        :rtype: int
        """
        return self._price_id

    @price_id.setter
    def price_id(self, price_id):
        """
        Sets the price_id of this ShowsBlocksAvailabilityResponseInner.

        :param price_id: The price_id of this ShowsBlocksAvailabilityResponseInner.
        :type: int
        """

        self._price_id = price_id

    @property
    def customer_category(self):
        """
        Gets the customer_category of this ShowsBlocksAvailabilityResponseInner.

        :return: The customer_category of this ShowsBlocksAvailabilityResponseInner.
        :rtype: str
        """
        return self._customer_category

    @customer_category.setter
    def customer_category(self, customer_category):
        """
        Sets the customer_category of this ShowsBlocksAvailabilityResponseInner.

        :param customer_category: The customer_category of this ShowsBlocksAvailabilityResponseInner.
        :type: str
        """

        self._customer_category = customer_category

    @property
    def price_type(self):
        """
        Gets the price_type of this ShowsBlocksAvailabilityResponseInner.

        :return: The price_type of this ShowsBlocksAvailabilityResponseInner.
        :rtype: str
        """
        return self._price_type

    @price_type.setter
    def price_type(self, price_type):
        """
        Sets the price_type of this ShowsBlocksAvailabilityResponseInner.

        :param price_type: The price_type of this ShowsBlocksAvailabilityResponseInner.
        :type: str
        """

        self._price_type = price_type

    @property
    def reserved_seats(self):
        """
        Gets the reserved_seats of this ShowsBlocksAvailabilityResponseInner.

        :return: The reserved_seats of this ShowsBlocksAvailabilityResponseInner.
        :rtype: bool
        """
        return self._reserved_seats

    @reserved_seats.setter
    def reserved_seats(self, reserved_seats):
        """
        Sets the reserved_seats of this ShowsBlocksAvailabilityResponseInner.

        :param reserved_seats: The reserved_seats of this ShowsBlocksAvailabilityResponseInner.
        :type: bool
        """

        self._reserved_seats = reserved_seats

    @property
    def availability(self):
        """
        Gets the availability of this ShowsBlocksAvailabilityResponseInner.

        :return: The availability of this ShowsBlocksAvailabilityResponseInner.
        :rtype: int
        """
        return self._availability

    @availability.setter
    def availability(self, availability):
        """
        Sets the availability of this ShowsBlocksAvailabilityResponseInner.

        :param availability: The availability of this ShowsBlocksAvailabilityResponseInner.
        :type: int
        """

        self._availability = availability

    @property
    def block_availability(self):
        """
        Gets the block_availability of this ShowsBlocksAvailabilityResponseInner.

        :return: The block_availability of this ShowsBlocksAvailabilityResponseInner.
        :rtype: int
        """
        return self._block_availability

    @block_availability.setter
    def block_availability(self, block_availability):
        """
        Sets the block_availability of this ShowsBlocksAvailabilityResponseInner.

        :param block_availability: The block_availability of this ShowsBlocksAvailabilityResponseInner.
        :type: int
        """

        self._block_availability = block_availability

    @property
    def date_status(self):
        """
        Gets the date_status of this ShowsBlocksAvailabilityResponseInner.

        :return: The date_status of this ShowsBlocksAvailabilityResponseInner.
        :rtype: int
        """
        return self._date_status

    @date_status.setter
    def date_status(self, date_status):
        """
        Sets the date_status of this ShowsBlocksAvailabilityResponseInner.

        :param date_status: The date_status of this ShowsBlocksAvailabilityResponseInner.
        :type: int
        """

        self._date_status = date_status

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ShowsBlocksAvailabilityResponseInner):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
