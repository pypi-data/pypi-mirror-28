# coding: utf-8

"""
    Digitick REST API

    The Digitick REST API is a set of methods giving access to catalog, user and cart management.

    OpenAPI spec version: v1.0
    Contact: contact@digitick.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class UserResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, first_name=None, last_name=None, login=None, cell_phone_number=None, email=None, password=None, address=None, zipcode=None, city=None, country_id=None, birth_date=None, is_invited_account=None, facebook_user_id=None):
        """
        UserResponse - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'first_name': 'str',
            'last_name': 'str',
            'login': 'str',
            'cell_phone_number': 'str',
            'email': 'str',
            'password': 'str',
            'address': 'str',
            'zipcode': 'int',
            'city': 'str',
            'country_id': 'int',
            'birth_date': 'str',
            'is_invited_account': 'bool',
            'facebook_user_id': 'int'
        }

        self.attribute_map = {
            'id': 'id',
            'first_name': 'firstName',
            'last_name': 'lastName',
            'login': 'login',
            'cell_phone_number': 'cellPhoneNumber',
            'email': 'email',
            'password': 'password',
            'address': 'address',
            'zipcode': 'zipcode',
            'city': 'city',
            'country_id': 'countryId',
            'birth_date': 'birthDate',
            'is_invited_account': 'isInvitedAccount',
            'facebook_user_id': 'facebookUserId'
        }

        self._id = id
        self._first_name = first_name
        self._last_name = last_name
        self._login = login
        self._cell_phone_number = cell_phone_number
        self._email = email
        self._password = password
        self._address = address
        self._zipcode = zipcode
        self._city = city
        self._country_id = country_id
        self._birth_date = birth_date
        self._is_invited_account = is_invited_account
        self._facebook_user_id = facebook_user_id

    @property
    def id(self):
        """
        Gets the id of this UserResponse.

        :return: The id of this UserResponse.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this UserResponse.

        :param id: The id of this UserResponse.
        :type: int
        """

        self._id = id

    @property
    def first_name(self):
        """
        Gets the first_name of this UserResponse.

        :return: The first_name of this UserResponse.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """
        Sets the first_name of this UserResponse.

        :param first_name: The first_name of this UserResponse.
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """
        Gets the last_name of this UserResponse.

        :return: The last_name of this UserResponse.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """
        Sets the last_name of this UserResponse.

        :param last_name: The last_name of this UserResponse.
        :type: str
        """

        self._last_name = last_name

    @property
    def login(self):
        """
        Gets the login of this UserResponse.

        :return: The login of this UserResponse.
        :rtype: str
        """
        return self._login

    @login.setter
    def login(self, login):
        """
        Sets the login of this UserResponse.

        :param login: The login of this UserResponse.
        :type: str
        """

        self._login = login

    @property
    def cell_phone_number(self):
        """
        Gets the cell_phone_number of this UserResponse.

        :return: The cell_phone_number of this UserResponse.
        :rtype: str
        """
        return self._cell_phone_number

    @cell_phone_number.setter
    def cell_phone_number(self, cell_phone_number):
        """
        Sets the cell_phone_number of this UserResponse.

        :param cell_phone_number: The cell_phone_number of this UserResponse.
        :type: str
        """

        self._cell_phone_number = cell_phone_number

    @property
    def email(self):
        """
        Gets the email of this UserResponse.

        :return: The email of this UserResponse.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this UserResponse.

        :param email: The email of this UserResponse.
        :type: str
        """

        self._email = email

    @property
    def password(self):
        """
        Gets the password of this UserResponse.

        :return: The password of this UserResponse.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """
        Sets the password of this UserResponse.

        :param password: The password of this UserResponse.
        :type: str
        """

        self._password = password

    @property
    def address(self):
        """
        Gets the address of this UserResponse.

        :return: The address of this UserResponse.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """
        Sets the address of this UserResponse.

        :param address: The address of this UserResponse.
        :type: str
        """

        self._address = address

    @property
    def zipcode(self):
        """
        Gets the zipcode of this UserResponse.

        :return: The zipcode of this UserResponse.
        :rtype: int
        """
        return self._zipcode

    @zipcode.setter
    def zipcode(self, zipcode):
        """
        Sets the zipcode of this UserResponse.

        :param zipcode: The zipcode of this UserResponse.
        :type: int
        """

        self._zipcode = zipcode

    @property
    def city(self):
        """
        Gets the city of this UserResponse.

        :return: The city of this UserResponse.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """
        Sets the city of this UserResponse.

        :param city: The city of this UserResponse.
        :type: str
        """

        self._city = city

    @property
    def country_id(self):
        """
        Gets the country_id of this UserResponse.

        :return: The country_id of this UserResponse.
        :rtype: int
        """
        return self._country_id

    @country_id.setter
    def country_id(self, country_id):
        """
        Sets the country_id of this UserResponse.

        :param country_id: The country_id of this UserResponse.
        :type: int
        """

        self._country_id = country_id

    @property
    def birth_date(self):
        """
        Gets the birth_date of this UserResponse.

        :return: The birth_date of this UserResponse.
        :rtype: str
        """
        return self._birth_date

    @birth_date.setter
    def birth_date(self, birth_date):
        """
        Sets the birth_date of this UserResponse.

        :param birth_date: The birth_date of this UserResponse.
        :type: str
        """

        self._birth_date = birth_date

    @property
    def is_invited_account(self):
        """
        Gets the is_invited_account of this UserResponse.

        :return: The is_invited_account of this UserResponse.
        :rtype: bool
        """
        return self._is_invited_account

    @is_invited_account.setter
    def is_invited_account(self, is_invited_account):
        """
        Sets the is_invited_account of this UserResponse.

        :param is_invited_account: The is_invited_account of this UserResponse.
        :type: bool
        """

        self._is_invited_account = is_invited_account

    @property
    def facebook_user_id(self):
        """
        Gets the facebook_user_id of this UserResponse.

        :return: The facebook_user_id of this UserResponse.
        :rtype: int
        """
        return self._facebook_user_id

    @facebook_user_id.setter
    def facebook_user_id(self, facebook_user_id):
        """
        Sets the facebook_user_id of this UserResponse.

        :param facebook_user_id: The facebook_user_id of this UserResponse.
        :type: int
        """

        self._facebook_user_id = facebook_user_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, UserResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
