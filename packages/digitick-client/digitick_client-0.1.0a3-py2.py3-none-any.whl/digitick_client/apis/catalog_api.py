# coding: utf-8

"""
    Digitick REST API

    The Digitick REST API is a set of methods giving access to catalog, user and cart management.

    OpenAPI spec version: v1.0
    Contact: contact@digitick.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class CatalogApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def category_find_all_categories(self, **kwargs):
        """
        Get all event categories. An 'event category' defines the type of an event. The following are considered 'event categories' : Concert, Sport, Theatre, Festival etc.  When planning an event, the user defines the event category.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.category_find_all_categories(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: CategoryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.category_find_all_categories_with_http_info(**kwargs)
        else:
            (data) = self.category_find_all_categories_with_http_info(**kwargs)
            return data

    def category_find_all_categories_with_http_info(self, **kwargs):
        """
        Get all event categories. An 'event category' defines the type of an event. The following are considered 'event categories' : Concert, Sport, Theatre, Festival etc.  When planning an event, the user defines the event category.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.category_find_all_categories_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: CategoryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method category_find_all_categories" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        resource_path = '/catalog/categories'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CategoryResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def category_find_sub_categories(self, category_id, **kwargs):
        """
        Get event sub-categories for the given category. Within an event category, different sub-types can exist. For example, the following are considered 'sub-categories' for the event category 'Concert' : Classical / Pop Rock / Metal / Jazz / Electro etc.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.category_find_sub_categories(category_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int category_id: Provide an existing event category id (required)
        :return: CategoryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.category_find_sub_categories_with_http_info(category_id, **kwargs)
        else:
            (data) = self.category_find_sub_categories_with_http_info(category_id, **kwargs)
            return data

    def category_find_sub_categories_with_http_info(self, category_id, **kwargs):
        """
        Get event sub-categories for the given category. Within an event category, different sub-types can exist. For example, the following are considered 'sub-categories' for the event category 'Concert' : Classical / Pop Rock / Metal / Jazz / Electro etc.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.category_find_sub_categories_with_http_info(category_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int category_id: Provide an existing event category id (required)
        :return: CategoryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['category_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method category_find_sub_categories" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'category_id' is set
        if ('category_id' not in params) or (params['category_id'] is None):
            raise ValueError("Missing the required parameter `category_id` when calling `category_find_sub_categories`")


        collection_formats = {}

        resource_path = '/catalog/categories/{categoryId}/subCategories'.replace('{format}', 'json')
        path_params = {}
        if 'category_id' in params:
            path_params['categoryId'] = params['category_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CategoryResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def event_find_event_by_id(self, event_id, **kwargs):
        """
        Get event details
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.event_find_event_by_id(event_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int event_id: Event identifier (required)
        :param str lang: Language code identifier
        :return: SalesChannelEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.event_find_event_by_id_with_http_info(event_id, **kwargs)
        else:
            (data) = self.event_find_event_by_id_with_http_info(event_id, **kwargs)
            return data

    def event_find_event_by_id_with_http_info(self, event_id, **kwargs):
        """
        Get event details
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.event_find_event_by_id_with_http_info(event_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int event_id: Event identifier (required)
        :param str lang: Language code identifier
        :return: SalesChannelEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['event_id', 'lang']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method event_find_event_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'event_id' is set
        if ('event_id' not in params) or (params['event_id'] is None):
            raise ValueError("Missing the required parameter `event_id` when calling `event_find_event_by_id`")


        collection_formats = {}

        resource_path = '/catalog/events/{eventId}'.replace('{format}', 'json')
        path_params = {}
        if 'event_id' in params:
            path_params['eventId'] = params['event_id']

        query_params = {}
        if 'lang' in params:
            query_params['lang'] = params['lang']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SalesChannelEvent',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def grouping_find(self, grouping_id, **kwargs):
        """
        Get grouping detail
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.grouping_find(grouping_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int grouping_id: Grouping identifier (required)
        :param str lang: Language code identifier
        :return: Grouping
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.grouping_find_with_http_info(grouping_id, **kwargs)
        else:
            (data) = self.grouping_find_with_http_info(grouping_id, **kwargs)
            return data

    def grouping_find_with_http_info(self, grouping_id, **kwargs):
        """
        Get grouping detail
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.grouping_find_with_http_info(grouping_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int grouping_id: Grouping identifier (required)
        :param str lang: Language code identifier
        :return: Grouping
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['grouping_id', 'lang']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method grouping_find" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'grouping_id' is set
        if ('grouping_id' not in params) or (params['grouping_id'] is None):
            raise ValueError("Missing the required parameter `grouping_id` when calling `grouping_find`")


        collection_formats = {}

        resource_path = '/catalog/groupings/{groupingId}'.replace('{format}', 'json')
        path_params = {}
        if 'grouping_id' in params:
            path_params['groupingId'] = params['grouping_id']

        query_params = {}
        if 'lang' in params:
            query_params['lang'] = params['lang']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Grouping',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def show_find_one_by_event_and_sales_channel_id(self, show_id, **kwargs):
        """
        Get configured show for the given event id - An event can consist of one or several shows. Each show has its own set-up and belongs to a single event.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.show_find_one_by_event_and_sales_channel_id(show_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int show_id: An show id must be provided (required)
        :param str lang: Language code identifier
        :return: ShowDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.show_find_one_by_event_and_sales_channel_id_with_http_info(show_id, **kwargs)
        else:
            (data) = self.show_find_one_by_event_and_sales_channel_id_with_http_info(show_id, **kwargs)
            return data

    def show_find_one_by_event_and_sales_channel_id_with_http_info(self, show_id, **kwargs):
        """
        Get configured show for the given event id - An event can consist of one or several shows. Each show has its own set-up and belongs to a single event.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.show_find_one_by_event_and_sales_channel_id_with_http_info(show_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int show_id: An show id must be provided (required)
        :param str lang: Language code identifier
        :return: ShowDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['show_id', 'lang']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method show_find_one_by_event_and_sales_channel_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'show_id' is set
        if ('show_id' not in params) or (params['show_id'] is None):
            raise ValueError("Missing the required parameter `show_id` when calling `show_find_one_by_event_and_sales_channel_id`")


        collection_formats = {}

        resource_path = '/catalog/shows/{showId}'.replace('{format}', 'json')
        path_params = {}
        if 'show_id' in params:
            path_params['showId'] = params['show_id']

        query_params = {}
        if 'lang' in params:
            query_params['lang'] = params['lang']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ShowDetail',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def show_find_one_price_by_show_id(self, price_id, **kwargs):
        """
        Get all the details of the price for a specific show
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.show_find_one_price_by_show_id(price_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int price_id: Id of the price (required)
        :return: PriceDetailResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.show_find_one_price_by_show_id_with_http_info(price_id, **kwargs)
        else:
            (data) = self.show_find_one_price_by_show_id_with_http_info(price_id, **kwargs)
            return data

    def show_find_one_price_by_show_id_with_http_info(self, price_id, **kwargs):
        """
        Get all the details of the price for a specific show
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.show_find_one_price_by_show_id_with_http_info(price_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int price_id: Id of the price (required)
        :return: PriceDetailResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['price_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method show_find_one_price_by_show_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'price_id' is set
        if ('price_id' not in params) or (params['price_id'] is None):
            raise ValueError("Missing the required parameter `price_id` when calling `show_find_one_price_by_show_id`")


        collection_formats = {}

        resource_path = '/catalog/prices/{priceId}'.replace('{format}', 'json')
        path_params = {}
        if 'price_id' in params:
            path_params['priceId'] = params['price_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='PriceDetailResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def venue_find_all(self, **kwargs):
        """
        Get all venues - i.e. Venues for which a show can actually be bought on the current saleschannel, a show with availability. - A venue is the place where the show takes place >> a venue has to be set for each show.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.venue_find_all(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int limit: Maximum number of returned venues (page size)
        :param int offset: First offset to return (page position)
        :param list[str] filters_venue_city_name: Define venue city name filters
        :param list[int] filters_venue_capacity: Define venue capacity filters - Capacity is a venue characteristic, as much as its name and address. Being a declared figure, capacity does not refer to an actual venue set-up. For example, capacity can be set at '0' for a venue but it will not stop the user from adding a set-up of 1000 seats.
        :param list[int] filters_venue_id: Define venue id filters
        :param list[str] filters_venue_name: Define venue name filters
        :param int sort_venue_name_value: Define venue name sort value
        :param int sort_venue_name_priority: Define venue name sort priority
        :return: VenuesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.venue_find_all_with_http_info(**kwargs)
        else:
            (data) = self.venue_find_all_with_http_info(**kwargs)
            return data

    def venue_find_all_with_http_info(self, **kwargs):
        """
        Get all venues - i.e. Venues for which a show can actually be bought on the current saleschannel, a show with availability. - A venue is the place where the show takes place >> a venue has to be set for each show.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.venue_find_all_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int limit: Maximum number of returned venues (page size)
        :param int offset: First offset to return (page position)
        :param list[str] filters_venue_city_name: Define venue city name filters
        :param list[int] filters_venue_capacity: Define venue capacity filters - Capacity is a venue characteristic, as much as its name and address. Being a declared figure, capacity does not refer to an actual venue set-up. For example, capacity can be set at '0' for a venue but it will not stop the user from adding a set-up of 1000 seats.
        :param list[int] filters_venue_id: Define venue id filters
        :param list[str] filters_venue_name: Define venue name filters
        :param int sort_venue_name_value: Define venue name sort value
        :param int sort_venue_name_priority: Define venue name sort priority
        :return: VenuesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'offset', 'filters_venue_city_name', 'filters_venue_capacity', 'filters_venue_id', 'filters_venue_name', 'sort_venue_name_value', 'sort_venue_name_priority']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method venue_find_all" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        resource_path = '/catalog/venues'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'filters_venue_city_name' in params:
            query_params['filters[venueCityName][]'] = params['filters_venue_city_name']
            collection_formats['filters[venueCityName][]'] = 'multi'
        if 'filters_venue_capacity' in params:
            query_params['filters[venueCapacity][]'] = params['filters_venue_capacity']
            collection_formats['filters[venueCapacity][]'] = 'multi'
        if 'filters_venue_id' in params:
            query_params['filters[venueId][]'] = params['filters_venue_id']
            collection_formats['filters[venueId][]'] = 'multi'
        if 'filters_venue_name' in params:
            query_params['filters[venueName][]'] = params['filters_venue_name']
            collection_formats['filters[venueName][]'] = 'multi'
        if 'sort_venue_name_value' in params:
            query_params['sort[venueName][value]'] = params['sort_venue_name_value']
        if 'sort_venue_name_priority' in params:
            query_params['sort[venueName][priority]'] = params['sort_venue_name_priority']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='VenuesResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
