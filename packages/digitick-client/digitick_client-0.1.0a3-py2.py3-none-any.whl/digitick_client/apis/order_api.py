# coding: utf-8

"""
    Digitick REST API

    The Digitick REST API is a set of methods giving access to catalog, user and cart management.

    OpenAPI spec version: v1.0
    Contact: contact@digitick.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class OrderApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def cart_add_entry(self, cart_id, body, **kwargs):
        """
        Add seat(s)/entry(ies) in cart by price(s)
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cart_add_entry(cart_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str cart_id: Define a cart id after its creation (required)
        :param CartEntriesByPrices body: The 'Entry' object that needs to be added to the cart (which will hence update the cart). Take a look at models to know exactly what to send. (required)
        :return: CartAddResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cart_add_entry_with_http_info(cart_id, body, **kwargs)
        else:
            (data) = self.cart_add_entry_with_http_info(cart_id, body, **kwargs)
            return data

    def cart_add_entry_with_http_info(self, cart_id, body, **kwargs):
        """
        Add seat(s)/entry(ies) in cart by price(s)
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cart_add_entry_with_http_info(cart_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str cart_id: Define a cart id after its creation (required)
        :param CartEntriesByPrices body: The 'Entry' object that needs to be added to the cart (which will hence update the cart). Take a look at models to know exactly what to send. (required)
        :return: CartAddResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cart_id', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cart_add_entry" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cart_id' is set
        if ('cart_id' not in params) or (params['cart_id'] is None):
            raise ValueError("Missing the required parameter `cart_id` when calling `cart_add_entry`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `cart_add_entry`")


        collection_formats = {}

        resource_path = '/order/carts/{cartId}/entries/createByPrices'.replace('{format}', 'json')
        path_params = {}
        if 'cart_id' in params:
            path_params['cartId'] = params['cart_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CartAddResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def cart_add_entry_0(self, cart_id, body, **kwargs):
        """
        Add seat(s)/entry(ies) in cart by section and price(s)
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cart_add_entry_0(cart_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str cart_id: Define a cart id after its creation (required)
        :param CartEntriesBySection body: The 'Entry' object that needs to be added to the cart (which will hence update the cart). Take a look at models to know exactly what to send. (required)
        :return: CartAddResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cart_add_entry_0_with_http_info(cart_id, body, **kwargs)
        else:
            (data) = self.cart_add_entry_0_with_http_info(cart_id, body, **kwargs)
            return data

    def cart_add_entry_0_with_http_info(self, cart_id, body, **kwargs):
        """
        Add seat(s)/entry(ies) in cart by section and price(s)
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cart_add_entry_0_with_http_info(cart_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str cart_id: Define a cart id after its creation (required)
        :param CartEntriesBySection body: The 'Entry' object that needs to be added to the cart (which will hence update the cart). Take a look at models to know exactly what to send. (required)
        :return: CartAddResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cart_id', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cart_add_entry_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cart_id' is set
        if ('cart_id' not in params) or (params['cart_id'] is None):
            raise ValueError("Missing the required parameter `cart_id` when calling `cart_add_entry_0`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `cart_add_entry_0`")


        collection_formats = {}

        resource_path = '/order/carts/{cartId}/entries/createBySection'.replace('{format}', 'json')
        path_params = {}
        if 'cart_id' in params:
            path_params['cartId'] = params['cart_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CartAddResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def cart_add_entry_1(self, cart_id, body, **kwargs):
        """
        Add seat(s)/entry(ies) in cart by seats ids and price(s)
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cart_add_entry_1(cart_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str cart_id: Define a cart id after its creation (required)
        :param CartEntriesBySeats body: The 'Entry' object that needs to be added to the cart (which will hence update the cart). Take a look at models to know exactly what to send. (required)
        :return: CartAddBySeatsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cart_add_entry_1_with_http_info(cart_id, body, **kwargs)
        else:
            (data) = self.cart_add_entry_1_with_http_info(cart_id, body, **kwargs)
            return data

    def cart_add_entry_1_with_http_info(self, cart_id, body, **kwargs):
        """
        Add seat(s)/entry(ies) in cart by seats ids and price(s)
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cart_add_entry_1_with_http_info(cart_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str cart_id: Define a cart id after its creation (required)
        :param CartEntriesBySeats body: The 'Entry' object that needs to be added to the cart (which will hence update the cart). Take a look at models to know exactly what to send. (required)
        :return: CartAddBySeatsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cart_id', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cart_add_entry_1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cart_id' is set
        if ('cart_id' not in params) or (params['cart_id'] is None):
            raise ValueError("Missing the required parameter `cart_id` when calling `cart_add_entry_1`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `cart_add_entry_1`")


        collection_formats = {}

        resource_path = '/order/carts/{cartId}/entries/createBySeats'.replace('{format}', 'json')
        path_params = {}
        if 'cart_id' in params:
            path_params['cartId'] = params['cart_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CartAddBySeatsResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def cart_create(self, body, **kwargs):
        """
        Create a new cart
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cart_create(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param CreateCart body: The information to create the cart. (required)
        :return: CartCreateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cart_create_with_http_info(body, **kwargs)
        else:
            (data) = self.cart_create_with_http_info(body, **kwargs)
            return data

    def cart_create_with_http_info(self, body, **kwargs):
        """
        Create a new cart
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cart_create_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param CreateCart body: The information to create the cart. (required)
        :return: CartCreateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cart_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `cart_create`")


        collection_formats = {}

        resource_path = '/order/carts'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CartCreateResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def cart_delete_entry(self, cart_id, entry_id, **kwargs):
        """
        Delete entry(s) from cart
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cart_delete_entry(cart_id, entry_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str cart_id: Define a cart id after its creation (required)
        :param str entry_id: Define a entry id or a comma separated list (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cart_delete_entry_with_http_info(cart_id, entry_id, **kwargs)
        else:
            (data) = self.cart_delete_entry_with_http_info(cart_id, entry_id, **kwargs)
            return data

    def cart_delete_entry_with_http_info(self, cart_id, entry_id, **kwargs):
        """
        Delete entry(s) from cart
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cart_delete_entry_with_http_info(cart_id, entry_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str cart_id: Define a cart id after its creation (required)
        :param str entry_id: Define a entry id or a comma separated list (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cart_id', 'entry_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cart_delete_entry" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cart_id' is set
        if ('cart_id' not in params) or (params['cart_id'] is None):
            raise ValueError("Missing the required parameter `cart_id` when calling `cart_delete_entry`")
        # verify the required parameter 'entry_id' is set
        if ('entry_id' not in params) or (params['entry_id'] is None):
            raise ValueError("Missing the required parameter `entry_id` when calling `cart_delete_entry`")


        collection_formats = {}

        resource_path = '/order/carts/{cartId}/entries/{entryId}'.replace('{format}', 'json')
        path_params = {}
        if 'cart_id' in params:
            path_params['cartId'] = params['cart_id']
        if 'entry_id' in params:
            path_params['entryId'] = params['entry_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def cart_empty(self, cart_id, **kwargs):
        """
        Empty cart
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cart_empty(cart_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str cart_id: Define a cart id after its creation (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cart_empty_with_http_info(cart_id, **kwargs)
        else:
            (data) = self.cart_empty_with_http_info(cart_id, **kwargs)
            return data

    def cart_empty_with_http_info(self, cart_id, **kwargs):
        """
        Empty cart
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cart_empty_with_http_info(cart_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str cart_id: Define a cart id after its creation (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cart_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cart_empty" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cart_id' is set
        if ('cart_id' not in params) or (params['cart_id'] is None):
            raise ValueError("Missing the required parameter `cart_id` when calling `cart_empty`")


        collection_formats = {}

        resource_path = '/order/carts/{cartId}'.replace('{format}', 'json')
        path_params = {}
        if 'cart_id' in params:
            path_params['cartId'] = params['cart_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def cart_find_details(self, cart_id, **kwargs):
        """
        Get a cart
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cart_find_details(cart_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str cart_id: Define a cart id after its creation (required)
        :return: CartResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cart_find_details_with_http_info(cart_id, **kwargs)
        else:
            (data) = self.cart_find_details_with_http_info(cart_id, **kwargs)
            return data

    def cart_find_details_with_http_info(self, cart_id, **kwargs):
        """
        Get a cart
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cart_find_details_with_http_info(cart_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str cart_id: Define a cart id after its creation (required)
        :return: CartResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cart_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cart_find_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cart_id' is set
        if ('cart_id' not in params) or (params['cart_id'] is None):
            raise ValueError("Missing the required parameter `cart_id` when calling `cart_find_details`")


        collection_formats = {}

        resource_path = '/order/carts/{cartId}'.replace('{format}', 'json')
        path_params = {}
        if 'cart_id' in params:
            path_params['cartId'] = params['cart_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CartResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def cart_save(self, cart_id, **kwargs):
        """
        Make purchase - Create the 'transaction' object. A transaction is reservation which has been payed.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cart_save(cart_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str cart_id: Define a cart id after its creation (required)
        :param UserCart body: a user Id (mandatory)
        :return: SaveCartResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cart_save_with_http_info(cart_id, **kwargs)
        else:
            (data) = self.cart_save_with_http_info(cart_id, **kwargs)
            return data

    def cart_save_with_http_info(self, cart_id, **kwargs):
        """
        Make purchase - Create the 'transaction' object. A transaction is reservation which has been payed.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cart_save_with_http_info(cart_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str cart_id: Define a cart id after its creation (required)
        :param UserCart body: a user Id (mandatory)
        :return: SaveCartResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cart_id', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cart_save" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cart_id' is set
        if ('cart_id' not in params) or (params['cart_id'] is None):
            raise ValueError("Missing the required parameter `cart_id` when calling `cart_save`")


        collection_formats = {}

        resource_path = '/order/transactions/carts/{cartId}/createFromCart'.replace('{format}', 'json')
        path_params = {}
        if 'cart_id' in params:
            path_params['cartId'] = params['cart_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SaveCartResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def cart_set_holder(self, cart_id, entry_id, body, **kwargs):
        """
        update information of the entry holder (firstName...)
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cart_set_holder(cart_id, entry_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str cart_id: Define a cart id (required)
        :param str entry_id: Define a entry id (required)
        :param Holder body: Information of the entry holder (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cart_set_holder_with_http_info(cart_id, entry_id, body, **kwargs)
        else:
            (data) = self.cart_set_holder_with_http_info(cart_id, entry_id, body, **kwargs)
            return data

    def cart_set_holder_with_http_info(self, cart_id, entry_id, body, **kwargs):
        """
        update information of the entry holder (firstName...)
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cart_set_holder_with_http_info(cart_id, entry_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str cart_id: Define a cart id (required)
        :param str entry_id: Define a entry id (required)
        :param Holder body: Information of the entry holder (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cart_id', 'entry_id', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cart_set_holder" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cart_id' is set
        if ('cart_id' not in params) or (params['cart_id'] is None):
            raise ValueError("Missing the required parameter `cart_id` when calling `cart_set_holder`")
        # verify the required parameter 'entry_id' is set
        if ('entry_id' not in params) or (params['entry_id'] is None):
            raise ValueError("Missing the required parameter `entry_id` when calling `cart_set_holder`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `cart_set_holder`")


        collection_formats = {}

        resource_path = '/order/carts/{cartId}/entries/{entryId}/holder'.replace('{format}', 'json')
        path_params = {}
        if 'cart_id' in params:
            path_params['cartId'] = params['cart_id']
        if 'entry_id' in params:
            path_params['entryId'] = params['entry_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def cart_update_holder_entry(self, ticket_id, body, **kwargs):
        """
        Update holder of a ticket. For example, rename the holder for a transaction ticket. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cart_update_holder_entry(ticket_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str ticket_id: An ticket id must be provided (required)
        :param UpdateHolderEntryInfos body: This model is used to update holder of a ticket (firstName|lastname). The 'op' property only accepts 'add' (add or replace a value property) and 'remove' values. Do not supply value property if the operation is 'remove'. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cart_update_holder_entry_with_http_info(ticket_id, body, **kwargs)
        else:
            (data) = self.cart_update_holder_entry_with_http_info(ticket_id, body, **kwargs)
            return data

    def cart_update_holder_entry_with_http_info(self, ticket_id, body, **kwargs):
        """
        Update holder of a ticket. For example, rename the holder for a transaction ticket. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cart_update_holder_entry_with_http_info(ticket_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str ticket_id: An ticket id must be provided (required)
        :param UpdateHolderEntryInfos body: This model is used to update holder of a ticket (firstName|lastname). The 'op' property only accepts 'add' (add or replace a value property) and 'remove' values. Do not supply value property if the operation is 'remove'. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ticket_id', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cart_update_holder_entry" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ticket_id' is set
        if ('ticket_id' not in params) or (params['ticket_id'] is None):
            raise ValueError("Missing the required parameter `ticket_id` when calling `cart_update_holder_entry`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `cart_update_holder_entry`")


        collection_formats = {}

        resource_path = '/order/transactions/tickets/{ticketId}/holder'.replace('{format}', 'json')
        path_params = {}
        if 'ticket_id' in params:
            path_params['ticketId'] = params['ticket_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'PATCH',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delivery_mode_find_by(self, cart_id, sales_channel_id, **kwargs):
        """
        get delivery mode for a cart and saleschannel
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delivery_mode_find_by(cart_id, sales_channel_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int cart_id: Define a cart id after its creation (required)
        :param int sales_channel_id: Define a salesChannel (required)
        :param int filters_structure_type_id: Define a structure type
        :return: DeliveryModeList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delivery_mode_find_by_with_http_info(cart_id, sales_channel_id, **kwargs)
        else:
            (data) = self.delivery_mode_find_by_with_http_info(cart_id, sales_channel_id, **kwargs)
            return data

    def delivery_mode_find_by_with_http_info(self, cart_id, sales_channel_id, **kwargs):
        """
        get delivery mode for a cart and saleschannel
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delivery_mode_find_by_with_http_info(cart_id, sales_channel_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int cart_id: Define a cart id after its creation (required)
        :param int sales_channel_id: Define a salesChannel (required)
        :param int filters_structure_type_id: Define a structure type
        :return: DeliveryModeList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cart_id', 'sales_channel_id', 'filters_structure_type_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delivery_mode_find_by" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cart_id' is set
        if ('cart_id' not in params) or (params['cart_id'] is None):
            raise ValueError("Missing the required parameter `cart_id` when calling `delivery_mode_find_by`")
        # verify the required parameter 'sales_channel_id' is set
        if ('sales_channel_id' not in params) or (params['sales_channel_id'] is None):
            raise ValueError("Missing the required parameter `sales_channel_id` when calling `delivery_mode_find_by`")


        collection_formats = {}

        resource_path = '/order/carts/{cartId}/salesChannels/{salesChannelId}/deliveryMode'.replace('{format}', 'json')
        path_params = {}
        if 'cart_id' in params:
            path_params['cartId'] = params['cart_id']
        if 'sales_channel_id' in params:
            path_params['salesChannelId'] = params['sales_channel_id']

        query_params = {}
        if 'filters_structure_type_id' in params:
            query_params['filters[structureTypeId]'] = params['filters_structure_type_id']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='DeliveryModeList',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def holder_fields_find(self, cart_id, **kwargs):
        """
        Get Holder fields for a entry
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.holder_fields_find(cart_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int cart_id: Define a cart id (required)
        :return: HolderFieldsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.holder_fields_find_with_http_info(cart_id, **kwargs)
        else:
            (data) = self.holder_fields_find_with_http_info(cart_id, **kwargs)
            return data

    def holder_fields_find_with_http_info(self, cart_id, **kwargs):
        """
        Get Holder fields for a entry
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.holder_fields_find_with_http_info(cart_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int cart_id: Define a cart id (required)
        :return: HolderFieldsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cart_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method holder_fields_find" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cart_id' is set
        if ('cart_id' not in params) or (params['cart_id'] is None):
            raise ValueError("Missing the required parameter `cart_id` when calling `holder_fields_find`")


        collection_formats = {}

        resource_path = '/order/carts/{cartId}/holderFields'.replace('{format}', 'json')
        path_params = {}
        if 'cart_id' in params:
            path_params['cartId'] = params['cart_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='HolderFieldsResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def order_booking_find_all(self, **kwargs):
        """
        Get bookings list
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.order_booking_find_all(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int limit: Maximum number of returned booking (page size)
        :param int offset: First offset to return (page position)
        :param list[int] filters_event_id: Define event identifier filters
        :param list[int] filters_user_id: Define user identifier filter
        :param list[int] filters_promoter_id: Define promoter identifier filters
        :param list[int] filters_sales_channel_id: Define promoter identifier filters
        :return: BookingListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.order_booking_find_all_with_http_info(**kwargs)
        else:
            (data) = self.order_booking_find_all_with_http_info(**kwargs)
            return data

    def order_booking_find_all_with_http_info(self, **kwargs):
        """
        Get bookings list
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.order_booking_find_all_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int limit: Maximum number of returned booking (page size)
        :param int offset: First offset to return (page position)
        :param list[int] filters_event_id: Define event identifier filters
        :param list[int] filters_user_id: Define user identifier filter
        :param list[int] filters_promoter_id: Define promoter identifier filters
        :param list[int] filters_sales_channel_id: Define promoter identifier filters
        :return: BookingListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'offset', 'filters_event_id', 'filters_user_id', 'filters_promoter_id', 'filters_sales_channel_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method order_booking_find_all" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        resource_path = '/order/bookings'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'filters_event_id' in params:
            query_params['filters[eventId][]'] = params['filters_event_id']
            collection_formats['filters[eventId][]'] = 'multi'
        if 'filters_user_id' in params:
            query_params['filters[userId][]'] = params['filters_user_id']
            collection_formats['filters[userId][]'] = 'multi'
        if 'filters_promoter_id' in params:
            query_params['filters[promoterId][]'] = params['filters_promoter_id']
            collection_formats['filters[promoterId][]'] = 'multi'
        if 'filters_sales_channel_id' in params:
            query_params['filters[salesChannelId][]'] = params['filters_sales_channel_id']
            collection_formats['filters[salesChannelId][]'] = 'multi'

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='BookingListResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def order_booking_ticket_find_all(self, booking_ticket_ids, **kwargs):
        """
        Get booking ticket list
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.order_booking_ticket_find_all(booking_ticket_ids, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str booking_ticket_ids: booking identifier list (required)
        :param list[int] filters_user_id: Define user identifier filter
        :param list[int] filters_promoter_id: Define promoter identifier filters
        :return: BookingTicketList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.order_booking_ticket_find_all_with_http_info(booking_ticket_ids, **kwargs)
        else:
            (data) = self.order_booking_ticket_find_all_with_http_info(booking_ticket_ids, **kwargs)
            return data

    def order_booking_ticket_find_all_with_http_info(self, booking_ticket_ids, **kwargs):
        """
        Get booking ticket list
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.order_booking_ticket_find_all_with_http_info(booking_ticket_ids, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str booking_ticket_ids: booking identifier list (required)
        :param list[int] filters_user_id: Define user identifier filter
        :param list[int] filters_promoter_id: Define promoter identifier filters
        :return: BookingTicketList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['booking_ticket_ids', 'filters_user_id', 'filters_promoter_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method order_booking_ticket_find_all" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'booking_ticket_ids' is set
        if ('booking_ticket_ids' not in params) or (params['booking_ticket_ids'] is None):
            raise ValueError("Missing the required parameter `booking_ticket_ids` when calling `order_booking_ticket_find_all`")


        collection_formats = {}

        resource_path = '/order/bookings/tickets/{bookingTicketIds}'.replace('{format}', 'json')
        path_params = {}
        if 'booking_ticket_ids' in params:
            path_params['bookingTicketIds'] = params['booking_ticket_ids']

        query_params = {}
        if 'filters_user_id' in params:
            query_params['filters[userId][]'] = params['filters_user_id']
            collection_formats['filters[userId][]'] = 'multi'
        if 'filters_promoter_id' in params:
            query_params['filters[promoterId][]'] = params['filters_promoter_id']
            collection_formats['filters[promoterId][]'] = 'multi'

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='BookingTicketList',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def order_entry_find_by_ids(self, entry_ids, **kwargs):
        """
        Get entry list
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.order_entry_find_by_ids(entry_ids, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str entry_ids: Define list of ticket identifier (required)
        :param list[int] filters_event_id: Define event identifier filters
        :param list[int] filters_user_id: Define user identifier filter
        :param list[int] filters_promoter_id: Define promoter identifier filters
        :param list[int] filters_transaction_id: Define transaction identifier filters
        :param list[int] filters_ticket_id: Define ticket identifier filters
        :param bool filters_deleted: Define deleted filters
        :return: TicketList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.order_entry_find_by_ids_with_http_info(entry_ids, **kwargs)
        else:
            (data) = self.order_entry_find_by_ids_with_http_info(entry_ids, **kwargs)
            return data

    def order_entry_find_by_ids_with_http_info(self, entry_ids, **kwargs):
        """
        Get entry list
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.order_entry_find_by_ids_with_http_info(entry_ids, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str entry_ids: Define list of ticket identifier (required)
        :param list[int] filters_event_id: Define event identifier filters
        :param list[int] filters_user_id: Define user identifier filter
        :param list[int] filters_promoter_id: Define promoter identifier filters
        :param list[int] filters_transaction_id: Define transaction identifier filters
        :param list[int] filters_ticket_id: Define ticket identifier filters
        :param bool filters_deleted: Define deleted filters
        :return: TicketList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['entry_ids', 'filters_event_id', 'filters_user_id', 'filters_promoter_id', 'filters_transaction_id', 'filters_ticket_id', 'filters_deleted']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method order_entry_find_by_ids" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'entry_ids' is set
        if ('entry_ids' not in params) or (params['entry_ids'] is None):
            raise ValueError("Missing the required parameter `entry_ids` when calling `order_entry_find_by_ids`")


        collection_formats = {}

        resource_path = '/order/transactions/tickets/entries/{entryIds}'.replace('{format}', 'json')
        path_params = {}
        if 'entry_ids' in params:
            path_params['entryIds'] = params['entry_ids']

        query_params = {}
        if 'filters_event_id' in params:
            query_params['filters[eventId][]'] = params['filters_event_id']
            collection_formats['filters[eventId][]'] = 'multi'
        if 'filters_user_id' in params:
            query_params['filters[userId][]'] = params['filters_user_id']
            collection_formats['filters[userId][]'] = 'multi'
        if 'filters_promoter_id' in params:
            query_params['filters[promoterId][]'] = params['filters_promoter_id']
            collection_formats['filters[promoterId][]'] = 'multi'
        if 'filters_transaction_id' in params:
            query_params['filters[transactionId][]'] = params['filters_transaction_id']
            collection_formats['filters[transactionId][]'] = 'multi'
        if 'filters_ticket_id' in params:
            query_params['filters[ticketId][]'] = params['filters_ticket_id']
            collection_formats['filters[ticketId][]'] = 'multi'
        if 'filters_deleted' in params:
            query_params['filters[deleted]'] = params['filters_deleted']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TicketList',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def order_ticket_find_by_ids(self, ticket_ids, **kwargs):
        """
        Get ticket list
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.order_ticket_find_by_ids(ticket_ids, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str ticket_ids: Define list of ticket identifier (required)
        :param list[int] filters_event_id: Define event identifier filters
        :param list[int] filters_user_id: Define user identifier filter
        :param list[int] filters_promoter_id: Define promoter identifier filters
        :param list[int] filters_transaction_id: Define transaction identifier filters
        :param bool filters_deleted: Define deleted filters
        :return: TicketList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.order_ticket_find_by_ids_with_http_info(ticket_ids, **kwargs)
        else:
            (data) = self.order_ticket_find_by_ids_with_http_info(ticket_ids, **kwargs)
            return data

    def order_ticket_find_by_ids_with_http_info(self, ticket_ids, **kwargs):
        """
        Get ticket list
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.order_ticket_find_by_ids_with_http_info(ticket_ids, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str ticket_ids: Define list of ticket identifier (required)
        :param list[int] filters_event_id: Define event identifier filters
        :param list[int] filters_user_id: Define user identifier filter
        :param list[int] filters_promoter_id: Define promoter identifier filters
        :param list[int] filters_transaction_id: Define transaction identifier filters
        :param bool filters_deleted: Define deleted filters
        :return: TicketList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ticket_ids', 'filters_event_id', 'filters_user_id', 'filters_promoter_id', 'filters_transaction_id', 'filters_deleted']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method order_ticket_find_by_ids" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ticket_ids' is set
        if ('ticket_ids' not in params) or (params['ticket_ids'] is None):
            raise ValueError("Missing the required parameter `ticket_ids` when calling `order_ticket_find_by_ids`")


        collection_formats = {}

        resource_path = '/order/transactions/tickets/{ticketIds}'.replace('{format}', 'json')
        path_params = {}
        if 'ticket_ids' in params:
            path_params['ticketIds'] = params['ticket_ids']

        query_params = {}
        if 'filters_event_id' in params:
            query_params['filters[eventId][]'] = params['filters_event_id']
            collection_formats['filters[eventId][]'] = 'multi'
        if 'filters_user_id' in params:
            query_params['filters[userId][]'] = params['filters_user_id']
            collection_formats['filters[userId][]'] = 'multi'
        if 'filters_promoter_id' in params:
            query_params['filters[promoterId][]'] = params['filters_promoter_id']
            collection_formats['filters[promoterId][]'] = 'multi'
        if 'filters_transaction_id' in params:
            query_params['filters[transactionId][]'] = params['filters_transaction_id']
            collection_formats['filters[transactionId][]'] = 'multi'
        if 'filters_deleted' in params:
            query_params['filters[deleted]'] = params['filters_deleted']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TicketList',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def order_transaction_find_all(self, **kwargs):
        """
        Get transaction list
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.order_transaction_find_all(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int limit: Maximum number of returned booking (page size)
        :param int offset: First offset to return (page position)
        :param list[int] filters_event_id: Define event identifier filters
        :param list[int] filters_user_id: Define user identifier filter
        :param list[int] filters_promoter_id: Define promoter identifier filters
        :return: TransactionList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.order_transaction_find_all_with_http_info(**kwargs)
        else:
            (data) = self.order_transaction_find_all_with_http_info(**kwargs)
            return data

    def order_transaction_find_all_with_http_info(self, **kwargs):
        """
        Get transaction list
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.order_transaction_find_all_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int limit: Maximum number of returned booking (page size)
        :param int offset: First offset to return (page position)
        :param list[int] filters_event_id: Define event identifier filters
        :param list[int] filters_user_id: Define user identifier filter
        :param list[int] filters_promoter_id: Define promoter identifier filters
        :return: TransactionList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'offset', 'filters_event_id', 'filters_user_id', 'filters_promoter_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method order_transaction_find_all" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        resource_path = '/order/transactions'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'filters_event_id' in params:
            query_params['filters[eventId][]'] = params['filters_event_id']
            collection_formats['filters[eventId][]'] = 'multi'
        if 'filters_user_id' in params:
            query_params['filters[userId][]'] = params['filters_user_id']
            collection_formats['filters[userId][]'] = 'multi'
        if 'filters_promoter_id' in params:
            query_params['filters[promoterId][]'] = params['filters_promoter_id']
            collection_formats['filters[promoterId][]'] = 'multi'

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TransactionList',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def order_transaction_find_tickets(self, transaction_id, **kwargs):
        """
        Get transaction details (JSON format)
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.order_transaction_find_tickets(transaction_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int transaction_id: A transaction id must be provided (required)
        :return: TransactionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.order_transaction_find_tickets_with_http_info(transaction_id, **kwargs)
        else:
            (data) = self.order_transaction_find_tickets_with_http_info(transaction_id, **kwargs)
            return data

    def order_transaction_find_tickets_with_http_info(self, transaction_id, **kwargs):
        """
        Get transaction details (JSON format)
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.order_transaction_find_tickets_with_http_info(transaction_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int transaction_id: A transaction id must be provided (required)
        :return: TransactionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['transaction_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method order_transaction_find_tickets" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'transaction_id' is set
        if ('transaction_id' not in params) or (params['transaction_id'] is None):
            raise ValueError("Missing the required parameter `transaction_id` when calling `order_transaction_find_tickets`")


        collection_formats = {}

        resource_path = '/order/transactions/{transactionId}/tickets'.replace('{format}', 'json')
        path_params = {}
        if 'transaction_id' in params:
            path_params['transactionId'] = params['transaction_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TransactionResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def transaction_delete(self, transaction_id, **kwargs):
        """
        Delete tickets from transaction
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.transaction_delete(transaction_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int transaction_id: A transaction id must be provided (required)
        :param TransactionTicketsUrlResponse barcodes: A barcode list must be provided
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.transaction_delete_with_http_info(transaction_id, **kwargs)
        else:
            (data) = self.transaction_delete_with_http_info(transaction_id, **kwargs)
            return data

    def transaction_delete_with_http_info(self, transaction_id, **kwargs):
        """
        Delete tickets from transaction
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.transaction_delete_with_http_info(transaction_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int transaction_id: A transaction id must be provided (required)
        :param TransactionTicketsUrlResponse barcodes: A barcode list must be provided
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['transaction_id', 'barcodes']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method transaction_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'transaction_id' is set
        if ('transaction_id' not in params) or (params['transaction_id'] is None):
            raise ValueError("Missing the required parameter `transaction_id` when calling `transaction_delete`")


        collection_formats = {}

        resource_path = '/order/transactions/{transactionId}'.replace('{format}', 'json')
        path_params = {}
        if 'transaction_id' in params:
            path_params['transactionId'] = params['transaction_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'barcodes' in params:
            body_params = params['barcodes']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
