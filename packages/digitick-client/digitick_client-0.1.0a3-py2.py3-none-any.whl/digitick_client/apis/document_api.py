# coding: utf-8

"""
    Digitick REST API

    The Digitick REST API is a set of methods giving access to catalog, user and cart management.

    OpenAPI spec version: v1.0
    Contact: contact@digitick.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class DocumentApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def document_transaction_find_tickets(self, transaction_id, ticket_format_id, **kwargs):
        """
        Get PDF ticket URL list
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.document_transaction_find_tickets(transaction_id, ticket_format_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int transaction_id: A transaction id must be provided (required)
        :param int ticket_format_id: Id of ticket format (required)
        :param bool as_single_file: If set to true, returns the tickets in a single file. Else, returns each ticket in a separated file
        :param bool as_url: If set to true, ticket urls are returned base64 encoded (only works if \"asSingleFile\" is false)
        :return: TransactionTicketsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.document_transaction_find_tickets_with_http_info(transaction_id, ticket_format_id, **kwargs)
        else:
            (data) = self.document_transaction_find_tickets_with_http_info(transaction_id, ticket_format_id, **kwargs)
            return data

    def document_transaction_find_tickets_with_http_info(self, transaction_id, ticket_format_id, **kwargs):
        """
        Get PDF ticket URL list
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.document_transaction_find_tickets_with_http_info(transaction_id, ticket_format_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int transaction_id: A transaction id must be provided (required)
        :param int ticket_format_id: Id of ticket format (required)
        :param bool as_single_file: If set to true, returns the tickets in a single file. Else, returns each ticket in a separated file
        :param bool as_url: If set to true, ticket urls are returned base64 encoded (only works if \"asSingleFile\" is false)
        :return: TransactionTicketsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['transaction_id', 'ticket_format_id', 'as_single_file', 'as_url']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method document_transaction_find_tickets" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'transaction_id' is set
        if ('transaction_id' not in params) or (params['transaction_id'] is None):
            raise ValueError("Missing the required parameter `transaction_id` when calling `document_transaction_find_tickets`")
        # verify the required parameter 'ticket_format_id' is set
        if ('ticket_format_id' not in params) or (params['ticket_format_id'] is None):
            raise ValueError("Missing the required parameter `ticket_format_id` when calling `document_transaction_find_tickets`")


        collection_formats = {}

        resource_path = '/document/transactions/{transactionId}/tickets'.replace('{format}', 'json')
        path_params = {}
        if 'transaction_id' in params:
            path_params['transactionId'] = params['transaction_id']

        query_params = {}
        if 'ticket_format_id' in params:
            query_params['ticketFormatId'] = params['ticket_format_id']
        if 'as_single_file' in params:
            query_params['asSingleFile'] = params['as_single_file']
        if 'as_url' in params:
            query_params['asUrl'] = params['as_url']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TransactionTicketsResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def ticket_format_find_all(self, **kwargs):
        """
        Get all ticket formats IDs (E-ticket, M-ticket, Thermal etc)
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.ticket_format_find_all(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: FormatsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.ticket_format_find_all_with_http_info(**kwargs)
        else:
            (data) = self.ticket_format_find_all_with_http_info(**kwargs)
            return data

    def ticket_format_find_all_with_http_info(self, **kwargs):
        """
        Get all ticket formats IDs (E-ticket, M-ticket, Thermal etc)
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.ticket_format_find_all_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: FormatsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ticket_format_find_all" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        resource_path = '/document/tickets/formats'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='FormatsResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
