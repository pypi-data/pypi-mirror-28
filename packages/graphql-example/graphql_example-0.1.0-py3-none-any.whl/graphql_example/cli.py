"""
Usage:  [OPTIONS] COMMAND [ARGS]...

  A cli for graphql-example.

Options:
  --help  Show this message and exit.

Commands:
  runserver  Run the server.
"""
from pathlib import Path
import subprocess as sp
import re
import os

import pkg_resources

import click

import nbformat
import nbconvert


def overwrite_module_from_notebook():
    """Overwrite graphql_example.py from same-named notebook"""

    nbfilename = pkg_resources.resource_filename('graphql_example',
                                                 'graphql_example.ipynb')

    notebook = nbformat.read(nbfilename, as_version=4)

    exporter = nbconvert.PythonExporter()

    body, *_ = exporter.from_notebook_node(notebook)

    module_filename = pkg_resources.resource_filename('graphql_example',
                                                      'graphql_example.py')

    with open(module_filename, 'w') as main_module:
        main_module.write(body)


overwrite_module_from_notebook()


@click.group()
def main():
    """A cli for graphql-example."""
    pass


@main.command()
@click.option('--port', default=8080)
@click.option('--host', default='localhost')
def runserver(host, port):
    """Run the server."""
    print("starting server")

    try:
        sp.run(('touch', 'log.json'))
        server = sp.Popen(f'python -m '
                          f'aiohttp.web '
                          f'graphql_example.graphql_example:app_factory '
                          f'-H {host} '
                          f'-P {port}', shell=True)

        print('server started')
        sp.run('tail -f log.json | eliot-tree', shell=True)
    finally:
        server.terminate()


def transform_module_text(matchobj):
    """Return the text from the module with the docstring generated by click prepended to it."""
    with click.Context(main) as ctx:
        docstring = os.linesep.join(['"""', ctx.get_help(), '"""'])

    return docstring + os.linesep + ''.join(matchobj.groups()[1:])


# replace this module's docstring with the one generated from top-level cli entrypoint
transformed_module_text = re.sub(
    re.compile(r'(.*?)(from|import)(.*)', re.DOTALL | re.MULTILINE),
    transform_module_text,
    Path(__file__).read_text())
with Path(__file__).open('w') as this_module:
    this_module.write(transformed_module_text)

if __name__ == "__main__":
    main()
