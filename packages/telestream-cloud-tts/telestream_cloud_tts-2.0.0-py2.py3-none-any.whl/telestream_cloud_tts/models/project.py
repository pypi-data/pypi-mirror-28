# coding: utf-8

"""
    Tts API

    Description  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: cloudsupport@telestream.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Project(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'description': 'str',
        'status': 'str',
        'language': 'str',
        'sample_rate': 'int',
        'profanity_filter': 'bool',
        'generate_proxy': 'bool',
        'custom_words': 'str',
        'created_at': 'str',
        'updated_at': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'status': 'status',
        'language': 'language',
        'sample_rate': 'sample_rate',
        'profanity_filter': 'profanity_filter',
        'generate_proxy': 'generate_proxy',
        'custom_words': 'custom_words',
        'created_at': 'created_at',
        'updated_at': 'updated_at'
    }

    def __init__(self, id=None, name=None, description=None, status=None, language=None, sample_rate=None, profanity_filter=None, generate_proxy=None, custom_words=None, created_at=None, updated_at=None):  # noqa: E501
        """Project - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._description = None
        self._status = None
        self._language = None
        self._sample_rate = None
        self._profanity_filter = None
        self._generate_proxy = None
        self._custom_words = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if status is not None:
            self.status = status
        if language is not None:
            self.language = language
        if sample_rate is not None:
            self.sample_rate = sample_rate
        if profanity_filter is not None:
            self.profanity_filter = profanity_filter
        if generate_proxy is not None:
            self.generate_proxy = generate_proxy
        if custom_words is not None:
            self.custom_words = custom_words
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def id(self):
        """Gets the id of this Project.  # noqa: E501

        The ID of the Project.  # noqa: E501

        :return: The id of this Project.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Project.

        The ID of the Project.  # noqa: E501

        :param id: The id of this Project.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Project.  # noqa: E501

        The name of the Project.  # noqa: E501

        :return: The name of this Project.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Project.

        The name of the Project.  # noqa: E501

        :param name: The name of this Project.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this Project.  # noqa: E501

        The description of the Project.  # noqa: E501

        :return: The description of this Project.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Project.

        The description of the Project.  # noqa: E501

        :param description: The description of this Project.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def status(self):
        """Gets the status of this Project.  # noqa: E501

        Determines a stage of training.  # noqa: E501

        :return: The status of this Project.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Project.

        Determines a stage of training.  # noqa: E501

        :param status: The status of this Project.  # noqa: E501
        :type: str
        """
        allowed_values = ["available", "modified", "training", "failed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def language(self):
        """Gets the language of this Project.  # noqa: E501

        The language code of model.  # noqa: E501

        :return: The language of this Project.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this Project.

        The language code of model.  # noqa: E501

        :param language: The language of this Project.  # noqa: E501
        :type: str
        """

        self._language = language

    @property
    def sample_rate(self):
        """Gets the sample_rate of this Project.  # noqa: E501

        The sample rate of model.  # noqa: E501

        :return: The sample_rate of this Project.  # noqa: E501
        :rtype: int
        """
        return self._sample_rate

    @sample_rate.setter
    def sample_rate(self, sample_rate):
        """Sets the sample_rate of this Project.

        The sample rate of model.  # noqa: E501

        :param sample_rate: The sample_rate of this Project.  # noqa: E501
        :type: int
        """

        self._sample_rate = sample_rate

    @property
    def profanity_filter(self):
        """Gets the profanity_filter of this Project.  # noqa: E501

        If true, the service replaces profanity from output with asterisks.  # noqa: E501

        :return: The profanity_filter of this Project.  # noqa: E501
        :rtype: bool
        """
        return self._profanity_filter

    @profanity_filter.setter
    def profanity_filter(self, profanity_filter):
        """Sets the profanity_filter of this Project.

        If true, the service replaces profanity from output with asterisks.  # noqa: E501

        :param profanity_filter: The profanity_filter of this Project.  # noqa: E501
        :type: bool
        """

        self._profanity_filter = profanity_filter

    @property
    def generate_proxy(self):
        """Gets the generate_proxy of this Project.  # noqa: E501

        Indicates whether video preview should be generated.  # noqa: E501

        :return: The generate_proxy of this Project.  # noqa: E501
        :rtype: bool
        """
        return self._generate_proxy

    @generate_proxy.setter
    def generate_proxy(self, generate_proxy):
        """Sets the generate_proxy of this Project.

        Indicates whether video preview should be generated.  # noqa: E501

        :param generate_proxy: The generate_proxy of this Project.  # noqa: E501
        :type: bool
        """

        self._generate_proxy = generate_proxy

    @property
    def custom_words(self):
        """Gets the custom_words of this Project.  # noqa: E501

        Words used for model training, separated by space.  # noqa: E501

        :return: The custom_words of this Project.  # noqa: E501
        :rtype: str
        """
        return self._custom_words

    @custom_words.setter
    def custom_words(self, custom_words):
        """Sets the custom_words of this Project.

        Words used for model training, separated by space.  # noqa: E501

        :param custom_words: The custom_words of this Project.  # noqa: E501
        :type: str
        """

        self._custom_words = custom_words

    @property
    def created_at(self):
        """Gets the created_at of this Project.  # noqa: E501

        A date and time when the project was created  # noqa: E501

        :return: The created_at of this Project.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Project.

        A date and time when the project was created  # noqa: E501

        :param created_at: The created_at of this Project.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Project.  # noqa: E501

        A date and time when the project was updated  # noqa: E501

        :return: The updated_at of this Project.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Project.

        A date and time when the project was updated  # noqa: E501

        :param updated_at: The updated_at of this Project.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Project):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
