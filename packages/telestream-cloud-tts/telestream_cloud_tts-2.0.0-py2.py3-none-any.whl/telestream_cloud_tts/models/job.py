# coding: utf-8

"""
    Tts API

    Description  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: cloudsupport@telestream.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Job(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'original_filename': 'str',
        'project_id': 'str',
        'source_url': 'str',
        'status': 'str',
        'error': 'str',
        'progress': 'int',
        'confidence': 'int',
        'duration': 'int',
        'bitrate': 'int',
        'sample_rate': 'int',
        'format': 'str',
        'file_size': 'str',
        'created_at': 'str',
        'updated_at': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'original_filename': 'original_filename',
        'project_id': 'project_id',
        'source_url': 'source_url',
        'status': 'status',
        'error': 'error',
        'progress': 'progress',
        'confidence': 'confidence',
        'duration': 'duration',
        'bitrate': 'bitrate',
        'sample_rate': 'sample_rate',
        'format': 'format',
        'file_size': 'file_size',
        'created_at': 'created_at',
        'updated_at': 'updated_at'
    }

    def __init__(self, id=None, name=None, original_filename=None, project_id=None, source_url=None, status=None, error=None, progress=None, confidence=None, duration=None, bitrate=None, sample_rate=None, format=None, file_size=None, created_at=None, updated_at=None):  # noqa: E501
        """Job - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._original_filename = None
        self._project_id = None
        self._source_url = None
        self._status = None
        self._error = None
        self._progress = None
        self._confidence = None
        self._duration = None
        self._bitrate = None
        self._sample_rate = None
        self._format = None
        self._file_size = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if original_filename is not None:
            self.original_filename = original_filename
        if project_id is not None:
            self.project_id = project_id
        if source_url is not None:
            self.source_url = source_url
        if status is not None:
            self.status = status
        if error is not None:
            self.error = error
        if progress is not None:
            self.progress = progress
        if confidence is not None:
            self.confidence = confidence
        if duration is not None:
            self.duration = duration
        if bitrate is not None:
            self.bitrate = bitrate
        if sample_rate is not None:
            self.sample_rate = sample_rate
        if format is not None:
            self.format = format
        if file_size is not None:
            self.file_size = file_size
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def id(self):
        """Gets the id of this Job.  # noqa: E501

        The ID of the job.  # noqa: E501

        :return: The id of this Job.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Job.

        The ID of the job.  # noqa: E501

        :param id: The id of this Job.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Job.  # noqa: E501

        The name of the job.  # noqa: E501

        :return: The name of this Job.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Job.

        The name of the job.  # noqa: E501

        :param name: The name of this Job.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def original_filename(self):
        """Gets the original_filename of this Job.  # noqa: E501

        The name of the input file  # noqa: E501

        :return: The original_filename of this Job.  # noqa: E501
        :rtype: str
        """
        return self._original_filename

    @original_filename.setter
    def original_filename(self, original_filename):
        """Sets the original_filename of this Job.

        The name of the input file  # noqa: E501

        :param original_filename: The original_filename of this Job.  # noqa: E501
        :type: str
        """

        self._original_filename = original_filename

    @property
    def project_id(self):
        """Gets the project_id of this Job.  # noqa: E501

        The ID of the project.  # noqa: E501

        :return: The project_id of this Job.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this Job.

        The ID of the project.  # noqa: E501

        :param project_id: The project_id of this Job.  # noqa: E501
        :type: str
        """

        self._project_id = project_id

    @property
    def source_url(self):
        """Gets the source_url of this Job.  # noqa: E501

        The URL of source file.  # noqa: E501

        :return: The source_url of this Job.  # noqa: E501
        :rtype: str
        """
        return self._source_url

    @source_url.setter
    def source_url(self, source_url):
        """Sets the source_url of this Job.

        The URL of source file.  # noqa: E501

        :param source_url: The source_url of this Job.  # noqa: E501
        :type: str
        """

        self._source_url = source_url

    @property
    def status(self):
        """Gets the status of this Job.  # noqa: E501

        Determines the state of transcription job.  # noqa: E501

        :return: The status of this Job.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Job.

        Determines the state of transcription job.  # noqa: E501

        :param status: The status of this Job.  # noqa: E501
        :type: str
        """
        allowed_values = ["pending", "preparing", "processing", "success", "error"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def error(self):
        """Gets the error of this Job.  # noqa: E501

        If the status of the job is 'error', returns the state of job.  # noqa: E501

        :return: The error of this Job.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this Job.

        If the status of the job is 'error', returns the state of job.  # noqa: E501

        :param error: The error of this Job.  # noqa: E501
        :type: str
        """

        self._error = error

    @property
    def progress(self):
        """Gets the progress of this Job.  # noqa: E501

        A percentage that indicates the progress of the job.  # noqa: E501

        :return: The progress of this Job.  # noqa: E501
        :rtype: int
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this Job.

        A percentage that indicates the progress of the job.  # noqa: E501

        :param progress: The progress of this Job.  # noqa: E501
        :type: int
        """

        self._progress = progress

    @property
    def confidence(self):
        """Gets the confidence of this Job.  # noqa: E501

        The confidence score of the job in the range of 0 to 100.  # noqa: E501

        :return: The confidence of this Job.  # noqa: E501
        :rtype: int
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this Job.

        The confidence score of the job in the range of 0 to 100.  # noqa: E501

        :param confidence: The confidence of this Job.  # noqa: E501
        :type: int
        """

        self._confidence = confidence

    @property
    def duration(self):
        """Gets the duration of this Job.  # noqa: E501

        The duration of the input audio in milliseconds.  # noqa: E501

        :return: The duration of this Job.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this Job.

        The duration of the input audio in milliseconds.  # noqa: E501

        :param duration: The duration of this Job.  # noqa: E501
        :type: int
        """

        self._duration = duration

    @property
    def bitrate(self):
        """Gets the bitrate of this Job.  # noqa: E501

        The bitrate of the input audio.  # noqa: E501

        :return: The bitrate of this Job.  # noqa: E501
        :rtype: int
        """
        return self._bitrate

    @bitrate.setter
    def bitrate(self, bitrate):
        """Sets the bitrate of this Job.

        The bitrate of the input audio.  # noqa: E501

        :param bitrate: The bitrate of this Job.  # noqa: E501
        :type: int
        """

        self._bitrate = bitrate

    @property
    def sample_rate(self):
        """Gets the sample_rate of this Job.  # noqa: E501

        The sample rate of the input audio.  # noqa: E501

        :return: The sample_rate of this Job.  # noqa: E501
        :rtype: int
        """
        return self._sample_rate

    @sample_rate.setter
    def sample_rate(self, sample_rate):
        """Sets the sample_rate of this Job.

        The sample rate of the input audio.  # noqa: E501

        :param sample_rate: The sample_rate of this Job.  # noqa: E501
        :type: int
        """

        self._sample_rate = sample_rate

    @property
    def format(self):
        """Gets the format of this Job.  # noqa: E501

        The format of the input audio.  # noqa: E501

        :return: The format of this Job.  # noqa: E501
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this Job.

        The format of the input audio.  # noqa: E501

        :param format: The format of this Job.  # noqa: E501
        :type: str
        """

        self._format = format

    @property
    def file_size(self):
        """Gets the file_size of this Job.  # noqa: E501

        The file size of the input file.  # noqa: E501

        :return: The file_size of this Job.  # noqa: E501
        :rtype: str
        """
        return self._file_size

    @file_size.setter
    def file_size(self, file_size):
        """Sets the file_size of this Job.

        The file size of the input file.  # noqa: E501

        :param file_size: The file_size of this Job.  # noqa: E501
        :type: str
        """

        self._file_size = file_size

    @property
    def created_at(self):
        """Gets the created_at of this Job.  # noqa: E501

        A date and time when the job was created  # noqa: E501

        :return: The created_at of this Job.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Job.

        A date and time when the job was created  # noqa: E501

        :param created_at: The created_at of this Job.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Job.  # noqa: E501

        A date and time when the job was updated  # noqa: E501

        :return: The updated_at of this Job.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Job.

        A date and time when the job was updated  # noqa: E501

        :param updated_at: The updated_at of this Job.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Job):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
