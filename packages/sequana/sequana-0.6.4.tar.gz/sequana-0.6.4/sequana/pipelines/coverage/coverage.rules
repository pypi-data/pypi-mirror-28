import os

from sequana import logger as _log
from sequana import GenomeCov, sequana_data
from sequana.modules_report.coverage import CoverageModule, ChromosomeCoverageModule
from sequana import snaketools as sm

configfile: "config.yaml"

manager = sm.PipelineManager("coverage", config,  fastq=False)


# Sanity check for the input file
if len(manager.samples) == 0:
    raise Exception("no input file found")
elif len(manager.samples) == 1:
    pass
elif len(manager.samples) > 1:
    raise Exception(("Found several input files. Expected only one. Found:\n "
        "{}".format("\n".join(manager.samples.values()))))

# Do we need to convert the input file from BAM to BED ?
# Depending on the answer, the pipeline will be different
inputfilename = list(manager.samples.values())[0]
if inputfilename.endswith(".bam"):
    __bamfile__ = inputfilename
    __bedfile__ = inputfilename.replace(".bam", ".bed")
    shell("samtools depth -aa {} > {}".format(__bamfile__, __bedfile__))
elif inputfilename.endswith(".bed"):
    __bedfile__ = inputfilename
else:
    raise IOError("Input file must be a BAM or BED file")


# Some final and intermediate file patterns
__multiqc__output = "multiqc_report.html"
summary_files_pattern = "coverage_reports/{sample}/sequana_summary_coverage.json"
rois_pattern = "coverage_reports/{sample}/rois.csv"


def scan_genome(infile):
    # Read input file to get the list of chromosomes
    genome = GenomeCov(infile,
                genbank_file=config['coverage']['genbank_file'],
                chunksize=config["coverage"]["chunksize"],
                low_threshold=config["coverage"]["low_threshold"],
                high_threshold=config["coverage"]["high_threshold"],
                ldtr=config["coverage"]["double_threshold"],
                hdtr=config['coverage']["double_threshold"],
                quiet_progress=True)

    #################################################### GC content
    reffile = config["coverage"]["reference_file"]
    # if length of the fasta > 100 million bases, we do not compute the GC
    if reffile:
        if os.path.getsize(reffile) <= 100000000:
            genome.compute_gc_content(reffile)
        else:
            _log.warning("do not compute GC content (file is larger than 100 million bases).")
    return genome


sm.message("scanning input file. May take time depending on the input file")
genome = scan_genome(__bedfile__)


# The pipeline itself, we need the multiqc as final result:
rule pipeline:
    input: __multiqc__output


# the multiqc rule that requires the JSON as input.
rule multiqc:
    input: expand(summary_files_pattern, sample=genome.chrom_names),
    output: __multiqc__output
    params:
        config=sequana_data("multiqc_config.yaml", "../multiqc")
    shell: "multiqc . -m sequana_coverage  -f -c {params.config}"


# The main coverage factory
rule coverage:
    input: __bedfile__
    output:
        summary_files_pattern,
        rois_pattern,
    params:
        window=config['coverage']["window"],
        circular=config['coverage']['circular'],
        mixture_models=config['coverage']['mixture_models'],
    run:
        sample = output[0].split("/")[1]
        chrom_index = genome.chrom_names.index(sample)
        chromosome = genome.chr_list[chrom_index]

        if params.window > len(chromosome.df) / 5:
            NW = int(len(chromosome.df) / 5)
            if NW % 2 == 0:
                NW += 1
        else:
            NW = params.window

        # then, we run the analysis (median, zscore, rois)
        results = chromosome.run(NW, params.mixture_models, circular=params.circular)
        ROIs = results.get_rois()
        summary = results.get_summary()

        # and save the results
        summary.to_json(output[0])
        ROIs.df.to_csv(output[1])

        # Finally HTML reports
        from sequana.utils import config as sequana_config
        sequana_config.output_dir = "." #config['coverage']['output_directory']
        datatable = CoverageModule.init_roi_datatable(ROIs)
        ChromosomeCoverageModule(chromosome, datatable,
                options={"W": NW,
                         "ROIs": ROIs,
                         "k": params.mixture_models,
                         "circular": params.circular})


onsuccess:
    print("DONE. Open multiqc_report.html")

