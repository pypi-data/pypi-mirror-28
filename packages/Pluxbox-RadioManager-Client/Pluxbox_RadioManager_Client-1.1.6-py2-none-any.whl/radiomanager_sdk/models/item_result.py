# coding: utf-8

"""
    RadioManager

    RadioManager

    OpenAPI spec version: 2.0
    Contact: support@pluxbox.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ItemResult(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'updated_at': 'datetime',
        'created_at': 'datetime',
        'deleted_at': 'datetime',
        'data_modified': 'int',
        'order': 'int',
        'templateblock_id': 'int',
        'templateitem_id': 'int',
        'external_station_id': 'int',
        'model_type_id': 'int',
        'block_id': 'int',
        'external_id': 'str',
        'field_values': 'object',
        'title': 'str',
        'duration': 'int',
        'start': 'datetime',
        'status': 'str',
        '_import': 'int',
        'campaign_id': 'int',
        'recommended': 'bool',
        'station_draft_id': 'int',
        'program_draft_id': 'int',
        'user_draft_id': 'int',
        'static_start': 'bool',
        'details': 'str',
        'block': 'ItemRelationsBlock',
        'broadcast': 'BlockRelationsBroadcast',
        'program': 'ItemRelationsProgram',
        'contacts': 'ItemRelationsContacts',
        'tags': 'ItemRelationsTags',
        'campaign': 'ItemRelationsCampaign',
        'model_type': 'BroadcastRelationsModelType'
    }

    attribute_map = {
        'id': 'id',
        'updated_at': 'updated_at',
        'created_at': 'created_at',
        'deleted_at': 'deleted_at',
        'data_modified': 'data_modified',
        'order': 'order',
        'templateblock_id': 'templateblock_id',
        'templateitem_id': 'templateitem_id',
        'external_station_id': '_external_station_id',
        'model_type_id': 'model_type_id',
        'block_id': 'block_id',
        'external_id': 'external_id',
        'field_values': 'field_values',
        'title': 'title',
        'duration': 'duration',
        'start': 'start',
        'status': 'status',
        '_import': 'import',
        'campaign_id': 'campaign_id',
        'recommended': 'recommended',
        'station_draft_id': 'station_draft_id',
        'program_draft_id': 'program_draft_id',
        'user_draft_id': 'user_draft_id',
        'static_start': 'static_start',
        'details': 'details',
        'block': 'block',
        'broadcast': 'broadcast',
        'program': 'program',
        'contacts': 'contacts',
        'tags': 'tags',
        'campaign': 'campaign',
        'model_type': 'model_type'
    }

    def __init__(self, id=None, updated_at=None, created_at=None, deleted_at=None, data_modified=None, order=None, templateblock_id=None, templateitem_id=None, external_station_id=None, model_type_id=None, block_id=None, external_id=None, field_values=None, title=None, duration=None, start=None, status=None, _import=None, campaign_id=None, recommended=None, station_draft_id=None, program_draft_id=None, user_draft_id=None, static_start=None, details=None, block=None, broadcast=None, program=None, contacts=None, tags=None, campaign=None, model_type=None):
        """
        ItemResult - a model defined in Swagger
        """

        self._id = None
        self._updated_at = None
        self._created_at = None
        self._deleted_at = None
        self._data_modified = None
        self._order = None
        self._templateblock_id = None
        self._templateitem_id = None
        self._external_station_id = None
        self._model_type_id = None
        self._block_id = None
        self._external_id = None
        self._field_values = None
        self._title = None
        self._duration = None
        self._start = None
        self._status = None
        self.__import = None
        self._campaign_id = None
        self._recommended = None
        self._station_draft_id = None
        self._program_draft_id = None
        self._user_draft_id = None
        self._static_start = None
        self._details = None
        self._block = None
        self._broadcast = None
        self._program = None
        self._contacts = None
        self._tags = None
        self._campaign = None
        self._model_type = None

        if id is not None:
          self.id = id
        if updated_at is not None:
          self.updated_at = updated_at
        if created_at is not None:
          self.created_at = created_at
        if deleted_at is not None:
          self.deleted_at = deleted_at
        if data_modified is not None:
          self.data_modified = data_modified
        if order is not None:
          self.order = order
        if templateblock_id is not None:
          self.templateblock_id = templateblock_id
        if templateitem_id is not None:
          self.templateitem_id = templateitem_id
        if external_station_id is not None:
          self.external_station_id = external_station_id
        self.model_type_id = model_type_id
        if block_id is not None:
          self.block_id = block_id
        if external_id is not None:
          self.external_id = external_id
        if field_values is not None:
          self.field_values = field_values
        if title is not None:
          self.title = title
        if duration is not None:
          self.duration = duration
        if start is not None:
          self.start = start
        if status is not None:
          self.status = status
        if _import is not None:
          self._import = _import
        if campaign_id is not None:
          self.campaign_id = campaign_id
        if recommended is not None:
          self.recommended = recommended
        if station_draft_id is not None:
          self.station_draft_id = station_draft_id
        if program_draft_id is not None:
          self.program_draft_id = program_draft_id
        if user_draft_id is not None:
          self.user_draft_id = user_draft_id
        if static_start is not None:
          self.static_start = static_start
        if details is not None:
          self.details = details
        if block is not None:
          self.block = block
        if broadcast is not None:
          self.broadcast = broadcast
        if program is not None:
          self.program = program
        if contacts is not None:
          self.contacts = contacts
        if tags is not None:
          self.tags = tags
        if campaign is not None:
          self.campaign = campaign
        if model_type is not None:
          self.model_type = model_type

    @property
    def id(self):
        """
        Gets the id of this ItemResult.

        :return: The id of this ItemResult.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ItemResult.

        :param id: The id of this ItemResult.
        :type: int
        """

        self._id = id

    @property
    def updated_at(self):
        """
        Gets the updated_at of this ItemResult.

        :return: The updated_at of this ItemResult.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this ItemResult.

        :param updated_at: The updated_at of this ItemResult.
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def created_at(self):
        """
        Gets the created_at of this ItemResult.

        :return: The created_at of this ItemResult.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this ItemResult.

        :param created_at: The created_at of this ItemResult.
        :type: datetime
        """

        self._created_at = created_at

    @property
    def deleted_at(self):
        """
        Gets the deleted_at of this ItemResult.

        :return: The deleted_at of this ItemResult.
        :rtype: datetime
        """
        return self._deleted_at

    @deleted_at.setter
    def deleted_at(self, deleted_at):
        """
        Sets the deleted_at of this ItemResult.

        :param deleted_at: The deleted_at of this ItemResult.
        :type: datetime
        """

        self._deleted_at = deleted_at

    @property
    def data_modified(self):
        """
        Gets the data_modified of this ItemResult.

        :return: The data_modified of this ItemResult.
        :rtype: int
        """
        return self._data_modified

    @data_modified.setter
    def data_modified(self, data_modified):
        """
        Sets the data_modified of this ItemResult.

        :param data_modified: The data_modified of this ItemResult.
        :type: int
        """

        self._data_modified = data_modified

    @property
    def order(self):
        """
        Gets the order of this ItemResult.

        :return: The order of this ItemResult.
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """
        Sets the order of this ItemResult.

        :param order: The order of this ItemResult.
        :type: int
        """

        self._order = order

    @property
    def templateblock_id(self):
        """
        Gets the templateblock_id of this ItemResult.

        :return: The templateblock_id of this ItemResult.
        :rtype: int
        """
        return self._templateblock_id

    @templateblock_id.setter
    def templateblock_id(self, templateblock_id):
        """
        Sets the templateblock_id of this ItemResult.

        :param templateblock_id: The templateblock_id of this ItemResult.
        :type: int
        """

        self._templateblock_id = templateblock_id

    @property
    def templateitem_id(self):
        """
        Gets the templateitem_id of this ItemResult.

        :return: The templateitem_id of this ItemResult.
        :rtype: int
        """
        return self._templateitem_id

    @templateitem_id.setter
    def templateitem_id(self, templateitem_id):
        """
        Sets the templateitem_id of this ItemResult.

        :param templateitem_id: The templateitem_id of this ItemResult.
        :type: int
        """

        self._templateitem_id = templateitem_id

    @property
    def external_station_id(self):
        """
        Gets the external_station_id of this ItemResult.

        :return: The external_station_id of this ItemResult.
        :rtype: int
        """
        return self._external_station_id

    @external_station_id.setter
    def external_station_id(self, external_station_id):
        """
        Sets the external_station_id of this ItemResult.

        :param external_station_id: The external_station_id of this ItemResult.
        :type: int
        """

        self._external_station_id = external_station_id

    @property
    def model_type_id(self):
        """
        Gets the model_type_id of this ItemResult.

        :return: The model_type_id of this ItemResult.
        :rtype: int
        """
        return self._model_type_id

    @model_type_id.setter
    def model_type_id(self, model_type_id):
        """
        Sets the model_type_id of this ItemResult.

        :param model_type_id: The model_type_id of this ItemResult.
        :type: int
        """
        if model_type_id is None:
            raise ValueError("Invalid value for `model_type_id`, must not be `None`")

        self._model_type_id = model_type_id

    @property
    def block_id(self):
        """
        Gets the block_id of this ItemResult.

        :return: The block_id of this ItemResult.
        :rtype: int
        """
        return self._block_id

    @block_id.setter
    def block_id(self, block_id):
        """
        Sets the block_id of this ItemResult.

        :param block_id: The block_id of this ItemResult.
        :type: int
        """

        self._block_id = block_id

    @property
    def external_id(self):
        """
        Gets the external_id of this ItemResult.

        :return: The external_id of this ItemResult.
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """
        Sets the external_id of this ItemResult.

        :param external_id: The external_id of this ItemResult.
        :type: str
        """

        self._external_id = external_id

    @property
    def field_values(self):
        """
        Gets the field_values of this ItemResult.

        :return: The field_values of this ItemResult.
        :rtype: object
        """
        return self._field_values

    @field_values.setter
    def field_values(self, field_values):
        """
        Sets the field_values of this ItemResult.

        :param field_values: The field_values of this ItemResult.
        :type: object
        """

        self._field_values = field_values

    @property
    def title(self):
        """
        Gets the title of this ItemResult.

        :return: The title of this ItemResult.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """
        Sets the title of this ItemResult.

        :param title: The title of this ItemResult.
        :type: str
        """

        self._title = title

    @property
    def duration(self):
        """
        Gets the duration of this ItemResult.

        :return: The duration of this ItemResult.
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """
        Sets the duration of this ItemResult.

        :param duration: The duration of this ItemResult.
        :type: int
        """

        self._duration = duration

    @property
    def start(self):
        """
        Gets the start of this ItemResult.

        :return: The start of this ItemResult.
        :rtype: datetime
        """
        return self._start

    @start.setter
    def start(self, start):
        """
        Sets the start of this ItemResult.

        :param start: The start of this ItemResult.
        :type: datetime
        """

        self._start = start

    @property
    def status(self):
        """
        Gets the status of this ItemResult.

        :return: The status of this ItemResult.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this ItemResult.

        :param status: The status of this ItemResult.
        :type: str
        """
        allowed_values = ["scheduled", "playing", "played"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def _import(self):
        """
        Gets the _import of this ItemResult.

        :return: The _import of this ItemResult.
        :rtype: int
        """
        return self.__import

    @_import.setter
    def _import(self, _import):
        """
        Sets the _import of this ItemResult.

        :param _import: The _import of this ItemResult.
        :type: int
        """

        self.__import = _import

    @property
    def campaign_id(self):
        """
        Gets the campaign_id of this ItemResult.

        :return: The campaign_id of this ItemResult.
        :rtype: int
        """
        return self._campaign_id

    @campaign_id.setter
    def campaign_id(self, campaign_id):
        """
        Sets the campaign_id of this ItemResult.

        :param campaign_id: The campaign_id of this ItemResult.
        :type: int
        """

        self._campaign_id = campaign_id

    @property
    def recommended(self):
        """
        Gets the recommended of this ItemResult.

        :return: The recommended of this ItemResult.
        :rtype: bool
        """
        return self._recommended

    @recommended.setter
    def recommended(self, recommended):
        """
        Sets the recommended of this ItemResult.

        :param recommended: The recommended of this ItemResult.
        :type: bool
        """

        self._recommended = recommended

    @property
    def station_draft_id(self):
        """
        Gets the station_draft_id of this ItemResult.

        :return: The station_draft_id of this ItemResult.
        :rtype: int
        """
        return self._station_draft_id

    @station_draft_id.setter
    def station_draft_id(self, station_draft_id):
        """
        Sets the station_draft_id of this ItemResult.

        :param station_draft_id: The station_draft_id of this ItemResult.
        :type: int
        """

        self._station_draft_id = station_draft_id

    @property
    def program_draft_id(self):
        """
        Gets the program_draft_id of this ItemResult.

        :return: The program_draft_id of this ItemResult.
        :rtype: int
        """
        return self._program_draft_id

    @program_draft_id.setter
    def program_draft_id(self, program_draft_id):
        """
        Sets the program_draft_id of this ItemResult.

        :param program_draft_id: The program_draft_id of this ItemResult.
        :type: int
        """

        self._program_draft_id = program_draft_id

    @property
    def user_draft_id(self):
        """
        Gets the user_draft_id of this ItemResult.

        :return: The user_draft_id of this ItemResult.
        :rtype: int
        """
        return self._user_draft_id

    @user_draft_id.setter
    def user_draft_id(self, user_draft_id):
        """
        Sets the user_draft_id of this ItemResult.

        :param user_draft_id: The user_draft_id of this ItemResult.
        :type: int
        """

        self._user_draft_id = user_draft_id

    @property
    def static_start(self):
        """
        Gets the static_start of this ItemResult.

        :return: The static_start of this ItemResult.
        :rtype: bool
        """
        return self._static_start

    @static_start.setter
    def static_start(self, static_start):
        """
        Sets the static_start of this ItemResult.

        :param static_start: The static_start of this ItemResult.
        :type: bool
        """

        self._static_start = static_start

    @property
    def details(self):
        """
        Gets the details of this ItemResult.

        :return: The details of this ItemResult.
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """
        Sets the details of this ItemResult.

        :param details: The details of this ItemResult.
        :type: str
        """

        self._details = details

    @property
    def block(self):
        """
        Gets the block of this ItemResult.

        :return: The block of this ItemResult.
        :rtype: ItemRelationsBlock
        """
        return self._block

    @block.setter
    def block(self, block):
        """
        Sets the block of this ItemResult.

        :param block: The block of this ItemResult.
        :type: ItemRelationsBlock
        """

        self._block = block

    @property
    def broadcast(self):
        """
        Gets the broadcast of this ItemResult.

        :return: The broadcast of this ItemResult.
        :rtype: BlockRelationsBroadcast
        """
        return self._broadcast

    @broadcast.setter
    def broadcast(self, broadcast):
        """
        Sets the broadcast of this ItemResult.

        :param broadcast: The broadcast of this ItemResult.
        :type: BlockRelationsBroadcast
        """

        self._broadcast = broadcast

    @property
    def program(self):
        """
        Gets the program of this ItemResult.

        :return: The program of this ItemResult.
        :rtype: ItemRelationsProgram
        """
        return self._program

    @program.setter
    def program(self, program):
        """
        Sets the program of this ItemResult.

        :param program: The program of this ItemResult.
        :type: ItemRelationsProgram
        """

        self._program = program

    @property
    def contacts(self):
        """
        Gets the contacts of this ItemResult.

        :return: The contacts of this ItemResult.
        :rtype: ItemRelationsContacts
        """
        return self._contacts

    @contacts.setter
    def contacts(self, contacts):
        """
        Sets the contacts of this ItemResult.

        :param contacts: The contacts of this ItemResult.
        :type: ItemRelationsContacts
        """

        self._contacts = contacts

    @property
    def tags(self):
        """
        Gets the tags of this ItemResult.

        :return: The tags of this ItemResult.
        :rtype: ItemRelationsTags
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this ItemResult.

        :param tags: The tags of this ItemResult.
        :type: ItemRelationsTags
        """

        self._tags = tags

    @property
    def campaign(self):
        """
        Gets the campaign of this ItemResult.

        :return: The campaign of this ItemResult.
        :rtype: ItemRelationsCampaign
        """
        return self._campaign

    @campaign.setter
    def campaign(self, campaign):
        """
        Sets the campaign of this ItemResult.

        :param campaign: The campaign of this ItemResult.
        :type: ItemRelationsCampaign
        """

        self._campaign = campaign

    @property
    def model_type(self):
        """
        Gets the model_type of this ItemResult.

        :return: The model_type of this ItemResult.
        :rtype: BroadcastRelationsModelType
        """
        return self._model_type

    @model_type.setter
    def model_type(self, model_type):
        """
        Sets the model_type of this ItemResult.

        :param model_type: The model_type of this ItemResult.
        :type: BroadcastRelationsModelType
        """

        self._model_type = model_type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ItemResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
