# coding: utf-8

"""
    RadioManager

    RadioManager

    OpenAPI spec version: 2.0
    Contact: support@pluxbox.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class UserResultSettings(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'show_side_bar': 'bool',
        'show_social_bar': 'bool',
        'show_checkbox_column': 'bool',
        'show_time_column': 'bool',
        'show_speech_time': 'bool',
        'zoom_factor': 'int'
    }

    attribute_map = {
        'show_side_bar': 'showSideBar',
        'show_social_bar': 'showSocialBar',
        'show_checkbox_column': 'showCheckboxColumn',
        'show_time_column': 'showTimeColumn',
        'show_speech_time': 'showSpeechTime',
        'zoom_factor': 'zoomFactor'
    }

    def __init__(self, show_side_bar=None, show_social_bar=None, show_checkbox_column=None, show_time_column=None, show_speech_time=None, zoom_factor=None):
        """
        UserResultSettings - a model defined in Swagger
        """

        self._show_side_bar = None
        self._show_social_bar = None
        self._show_checkbox_column = None
        self._show_time_column = None
        self._show_speech_time = None
        self._zoom_factor = None

        if show_side_bar is not None:
          self.show_side_bar = show_side_bar
        if show_social_bar is not None:
          self.show_social_bar = show_social_bar
        if show_checkbox_column is not None:
          self.show_checkbox_column = show_checkbox_column
        if show_time_column is not None:
          self.show_time_column = show_time_column
        if show_speech_time is not None:
          self.show_speech_time = show_speech_time
        if zoom_factor is not None:
          self.zoom_factor = zoom_factor

    @property
    def show_side_bar(self):
        """
        Gets the show_side_bar of this UserResultSettings.

        :return: The show_side_bar of this UserResultSettings.
        :rtype: bool
        """
        return self._show_side_bar

    @show_side_bar.setter
    def show_side_bar(self, show_side_bar):
        """
        Sets the show_side_bar of this UserResultSettings.

        :param show_side_bar: The show_side_bar of this UserResultSettings.
        :type: bool
        """

        self._show_side_bar = show_side_bar

    @property
    def show_social_bar(self):
        """
        Gets the show_social_bar of this UserResultSettings.

        :return: The show_social_bar of this UserResultSettings.
        :rtype: bool
        """
        return self._show_social_bar

    @show_social_bar.setter
    def show_social_bar(self, show_social_bar):
        """
        Sets the show_social_bar of this UserResultSettings.

        :param show_social_bar: The show_social_bar of this UserResultSettings.
        :type: bool
        """

        self._show_social_bar = show_social_bar

    @property
    def show_checkbox_column(self):
        """
        Gets the show_checkbox_column of this UserResultSettings.

        :return: The show_checkbox_column of this UserResultSettings.
        :rtype: bool
        """
        return self._show_checkbox_column

    @show_checkbox_column.setter
    def show_checkbox_column(self, show_checkbox_column):
        """
        Sets the show_checkbox_column of this UserResultSettings.

        :param show_checkbox_column: The show_checkbox_column of this UserResultSettings.
        :type: bool
        """

        self._show_checkbox_column = show_checkbox_column

    @property
    def show_time_column(self):
        """
        Gets the show_time_column of this UserResultSettings.

        :return: The show_time_column of this UserResultSettings.
        :rtype: bool
        """
        return self._show_time_column

    @show_time_column.setter
    def show_time_column(self, show_time_column):
        """
        Sets the show_time_column of this UserResultSettings.

        :param show_time_column: The show_time_column of this UserResultSettings.
        :type: bool
        """

        self._show_time_column = show_time_column

    @property
    def show_speech_time(self):
        """
        Gets the show_speech_time of this UserResultSettings.

        :return: The show_speech_time of this UserResultSettings.
        :rtype: bool
        """
        return self._show_speech_time

    @show_speech_time.setter
    def show_speech_time(self, show_speech_time):
        """
        Sets the show_speech_time of this UserResultSettings.

        :param show_speech_time: The show_speech_time of this UserResultSettings.
        :type: bool
        """

        self._show_speech_time = show_speech_time

    @property
    def zoom_factor(self):
        """
        Gets the zoom_factor of this UserResultSettings.

        :return: The zoom_factor of this UserResultSettings.
        :rtype: int
        """
        return self._zoom_factor

    @zoom_factor.setter
    def zoom_factor(self, zoom_factor):
        """
        Sets the zoom_factor of this UserResultSettings.

        :param zoom_factor: The zoom_factor of this UserResultSettings.
        :type: int
        """

        self._zoom_factor = zoom_factor

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, UserResultSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
