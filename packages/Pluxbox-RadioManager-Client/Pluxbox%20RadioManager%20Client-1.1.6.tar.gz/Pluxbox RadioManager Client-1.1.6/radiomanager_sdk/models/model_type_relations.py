# coding: utf-8

"""
    RadioManager

    RadioManager

    OpenAPI spec version: 2.0
    Contact: support@pluxbox.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ModelTypeRelations(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'campaigns': 'ModelTypeRelationsCampaigns',
        'broadcasts': 'ModelTypeRelationsBroadcasts',
        'programs': 'ModelTypeRelationsPrograms',
        'contacts': 'ModelTypeRelationsContacts',
        'presenters': 'ModelTypeRelationsPresenters',
        'items': 'ModelTypeRelationsItems'
    }

    attribute_map = {
        'campaigns': 'campaigns',
        'broadcasts': 'broadcasts',
        'programs': 'programs',
        'contacts': 'contacts',
        'presenters': 'presenters',
        'items': 'items'
    }

    def __init__(self, campaigns=None, broadcasts=None, programs=None, contacts=None, presenters=None, items=None):
        """
        ModelTypeRelations - a model defined in Swagger
        """

        self._campaigns = None
        self._broadcasts = None
        self._programs = None
        self._contacts = None
        self._presenters = None
        self._items = None

        if campaigns is not None:
          self.campaigns = campaigns
        if broadcasts is not None:
          self.broadcasts = broadcasts
        if programs is not None:
          self.programs = programs
        if contacts is not None:
          self.contacts = contacts
        if presenters is not None:
          self.presenters = presenters
        if items is not None:
          self.items = items

    @property
    def campaigns(self):
        """
        Gets the campaigns of this ModelTypeRelations.

        :return: The campaigns of this ModelTypeRelations.
        :rtype: ModelTypeRelationsCampaigns
        """
        return self._campaigns

    @campaigns.setter
    def campaigns(self, campaigns):
        """
        Sets the campaigns of this ModelTypeRelations.

        :param campaigns: The campaigns of this ModelTypeRelations.
        :type: ModelTypeRelationsCampaigns
        """

        self._campaigns = campaigns

    @property
    def broadcasts(self):
        """
        Gets the broadcasts of this ModelTypeRelations.

        :return: The broadcasts of this ModelTypeRelations.
        :rtype: ModelTypeRelationsBroadcasts
        """
        return self._broadcasts

    @broadcasts.setter
    def broadcasts(self, broadcasts):
        """
        Sets the broadcasts of this ModelTypeRelations.

        :param broadcasts: The broadcasts of this ModelTypeRelations.
        :type: ModelTypeRelationsBroadcasts
        """

        self._broadcasts = broadcasts

    @property
    def programs(self):
        """
        Gets the programs of this ModelTypeRelations.

        :return: The programs of this ModelTypeRelations.
        :rtype: ModelTypeRelationsPrograms
        """
        return self._programs

    @programs.setter
    def programs(self, programs):
        """
        Sets the programs of this ModelTypeRelations.

        :param programs: The programs of this ModelTypeRelations.
        :type: ModelTypeRelationsPrograms
        """

        self._programs = programs

    @property
    def contacts(self):
        """
        Gets the contacts of this ModelTypeRelations.

        :return: The contacts of this ModelTypeRelations.
        :rtype: ModelTypeRelationsContacts
        """
        return self._contacts

    @contacts.setter
    def contacts(self, contacts):
        """
        Sets the contacts of this ModelTypeRelations.

        :param contacts: The contacts of this ModelTypeRelations.
        :type: ModelTypeRelationsContacts
        """

        self._contacts = contacts

    @property
    def presenters(self):
        """
        Gets the presenters of this ModelTypeRelations.

        :return: The presenters of this ModelTypeRelations.
        :rtype: ModelTypeRelationsPresenters
        """
        return self._presenters

    @presenters.setter
    def presenters(self, presenters):
        """
        Sets the presenters of this ModelTypeRelations.

        :param presenters: The presenters of this ModelTypeRelations.
        :type: ModelTypeRelationsPresenters
        """

        self._presenters = presenters

    @property
    def items(self):
        """
        Gets the items of this ModelTypeRelations.

        :return: The items of this ModelTypeRelations.
        :rtype: ModelTypeRelationsItems
        """
        return self._items

    @items.setter
    def items(self, items):
        """
        Sets the items of this ModelTypeRelations.

        :param items: The items of this ModelTypeRelations.
        :type: ModelTypeRelationsItems
        """

        self._items = items

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ModelTypeRelations):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
