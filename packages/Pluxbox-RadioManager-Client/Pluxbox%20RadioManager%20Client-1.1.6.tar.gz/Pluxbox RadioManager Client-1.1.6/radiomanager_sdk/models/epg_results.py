# coding: utf-8

"""
    RadioManager

    RadioManager

    OpenAPI spec version: 2.0
    Contact: support@pluxbox.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class EPGResults(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'days': 'list[BroadcastEPGDay]',
        'next_page_url': 'str',
        'prev_page_url': 'str'
    }

    attribute_map = {
        'days': 'days',
        'next_page_url': 'next_page_url',
        'prev_page_url': 'prev_page_url'
    }

    def __init__(self, days=None, next_page_url=None, prev_page_url=None):
        """
        EPGResults - a model defined in Swagger
        """

        self._days = None
        self._next_page_url = None
        self._prev_page_url = None

        self.days = days
        self.next_page_url = next_page_url
        self.prev_page_url = prev_page_url

    @property
    def days(self):
        """
        Gets the days of this EPGResults.

        :return: The days of this EPGResults.
        :rtype: list[BroadcastEPGDay]
        """
        return self._days

    @days.setter
    def days(self, days):
        """
        Sets the days of this EPGResults.

        :param days: The days of this EPGResults.
        :type: list[BroadcastEPGDay]
        """
        if days is None:
            raise ValueError("Invalid value for `days`, must not be `None`")

        self._days = days

    @property
    def next_page_url(self):
        """
        Gets the next_page_url of this EPGResults.

        :return: The next_page_url of this EPGResults.
        :rtype: str
        """
        return self._next_page_url

    @next_page_url.setter
    def next_page_url(self, next_page_url):
        """
        Sets the next_page_url of this EPGResults.

        :param next_page_url: The next_page_url of this EPGResults.
        :type: str
        """
        if next_page_url is None:
            raise ValueError("Invalid value for `next_page_url`, must not be `None`")

        self._next_page_url = next_page_url

    @property
    def prev_page_url(self):
        """
        Gets the prev_page_url of this EPGResults.

        :return: The prev_page_url of this EPGResults.
        :rtype: str
        """
        return self._prev_page_url

    @prev_page_url.setter
    def prev_page_url(self, prev_page_url):
        """
        Sets the prev_page_url of this EPGResults.

        :param prev_page_url: The prev_page_url of this EPGResults.
        :type: str
        """
        if prev_page_url is None:
            raise ValueError("Invalid value for `prev_page_url`, must not be `None`")

        self._prev_page_url = prev_page_url

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, EPGResults):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
