Metadata-Version: 2.0
Name: pythononwheels
Version: 0.81b0
Summary: The simple, quick and easy generative web framework for python
Home-page: http://www.pythononwheels.org
Author: khz
Author-email: khz@tzi.org
License: MIT
Description-Content-Type: UNKNOWN
Keywords: framework web development
Platform: UNKNOWN
Classifier: Development Status :: 4 - Beta
Classifier: Environment :: Web Environment
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Topic :: Internet :: WWW/HTTP
Classifier: Topic :: Internet :: WWW/HTTP :: Dynamic Content
Classifier: Topic :: Software Development :: Libraries :: Application Frameworks
Classifier: Topic :: Software Development :: Libraries :: Python Modules 
Requires-Dist: tornado

.. figure:: http://www.pythononwheels.org/static/images/pow_logo_300.png
   :alt: Pow logo

   Pow logo

This is the new pow 2017. And it's really good.
===============================================

(ok I might be biased ;)

But it's by far the best PoW (concept and implementation) ever! (Ever,ever, ever!!)

I call it *SQUEEZY* => for Simple, Quick and Easy.

Principle
---------

    Designed for simplicity, happiness and Quick results!

As simple to use as possible. Everything you always need on board.
Batteries included! (tornado Webserver, SQLite DB, NoSQL DBs: tinyDB,
ElasticSearch, MongoDB following next) Non intrusive! You can always
escape and go RAW.

Strong Foundation:
------------------

-  python 3.x
-  tornado webserver
-  sqlalchemy ORM onboard (sqlite, mysql, postgres, oralce, ms-sql ...)
-  DB migrations generated for you (based on alembic)
-  cerberus schemas and validation on board
-  template engine (tornado templates)
-  tinyDB and ElasticSearch on board... more to come (next: mongoDB)
-  authentication with Twitter, Google on board

Super easy, quick to start and all the basics on board:
-------------------------------------------------------

-  super easy relations with decorators @relations.has\_many("comments")
-  super easy REST routing with decorators @app.add\_restful\_routes(),
-  routing decorator @app.add\_route(route)
-  db migrations autogenerated using alembic in the back
-  validation on board with cerberus schemas
-  use the same schema descrition for all model types (sql, nosql,
   elastic..)
-  generate\_models script
-  generate\_migrations script
-  update\_db script
-  generate\_handlers
-  generate\_app
-  automatic scaffolding views (work in progress)

Code examples
-------------

Routes:
~~~~~~~

::

    # this will call the myget method on HTTP GET calls and will hand over the re-group as the 1st parameter.
    @app.add_route("/index/([0-9]+)*", dispatch={"get" : "myget"})
    class IndexdHandler(BaseHandler):
        def myget(self, index=None):
            print("  index:" + str(index))
            self.render("index.tmpl")

Relations: (SQL Models)
~~~~~~~~~~~~~~~~~~~~~~~

::

    @relation.has_many("comments")
    class Post(Base):
        # a blog Post
        schema = {
            'text': {'type': 'string'},
            'name': {'type': 'string', 'maxlength' : 35},
            'last': {'type': 'number'}
        }

Check: `The PythonOnWheels Homepage <http://www.pythononwheels.org>`__
----------------------------------------------------------------------


