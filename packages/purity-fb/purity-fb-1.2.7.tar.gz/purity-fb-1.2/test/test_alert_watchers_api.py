# coding: utf-8

"""
    FlashBlade Management API

    The management APIs of FlashBlade.

    OpenAPI spec version: 1.2

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import unittest

from environment import HOST, API_TOKEN
from purity_fb import *
from utils import *

WATCHER_NAME = 'alert_watcher_{}@example.com'

class TestAlertsApi(unittest.TestCase):
    """ AlertsApi unit tests """

    def setUp(self):
        self.purity_fb = PurityFb(HOST)
        self.purity_fb.disable_verify_ssl()
        res = self.purity_fb.login(API_TOKEN)
        self.assertTrue(res == 200)
        self.alert_watchers = self.purity_fb.alert_watchers
        self.cleanUp()
        for i in range(10):
            self.alert_watchers.create_alert_watchers(names=[WATCHER_NAME.format(i)])

    def tearDown(self):
        self.cleanUp()
        self.purity_fb.logout()

    def cleanUp(self):
        filter = 'name=\"' + WATCHER_NAME.format('*') + '\"'
        res = self.alert_watchers.list_alert_watchers(filter=filter)
        for watcher in res.items:
            self.alert_watchers.delete_alert_watchers(names=[watcher.name])

    def test_list_basic(self):
        print('LIST all alert watchers\n')
        res = self.alert_watchers.list_alert_watchers(limit=5)
        if DEBUG:
            print_list(res.items)
        check_is_list_of(res.items, AlertWatcher)
        names = [WATCHER_NAME.format(0), WATCHER_NAME.format(1)]
        print('\nLIST alert watchers by names {}'.format(names))
        res = self.alert_watchers.list_alert_watchers(names=names)
        if DEBUG:
            print_list(res.items)
        filter_str = 'name = \'' + WATCHER_NAME.format('*') + '\''
        print('\nLIST alert watchers by filter {}\n'.format(filter_str))
        res = self.alert_watchers.list_alert_watchers(filter=filter_str)
        if DEBUG:
            print_list(res.items)
        check_is_list_of(res.items, AlertWatcher)

    def test_filter(self):
        # ----------- test FILTER ------------
        print('\nLIST alert watcher by filter\n')
        filter_str = 'name = \'' + WATCHER_NAME.format('*') + '\''
        list_by_filter(self.alert_watchers.list_alert_watchers, filter_str, AlertWatcher)
        filter_str = 'name = \'' + WATCHER_NAME.format('*') + '\' and not(enabled)'
        list_by_filter(self.alert_watchers.list_alert_watchers, filter_str, AlertWatcher)

    def test_sort(self):
        # ------ test SORT ----
        print('\nLIST alert watcher and sort\n')
        list_and_sort(self.alert_watchers.list_alert_watchers, 'name', AlertWatcher)
        list_and_sort(self.alert_watchers.list_alert_watchers, 'name-', AlertWatcher)
        list_and_sort(self.alert_watchers.list_alert_watchers, 'enabled', AlertWatcher)
        list_and_sort(self.alert_watchers.list_alert_watchers, 'enabled-', AlertWatcher)

    def test_start(self):
        # ------ test START ----
        print('\nLIST alert watcher by start\n')
        list_by_start(self.alert_watchers.list_alert_watchers, 1, AlertWatcher)
        list_by_start(self.alert_watchers.list_alert_watchers, 2, AlertWatcher)

    def test_limit_and_token(self):
        # ------ test LIMIT ----
        print('\nLIST alert watcher by limit\n')
        list_by_limit(self.alert_watchers.list_alert_watchers, 0, AlertWatcher)
        list_by_limit(self.alert_watchers.list_alert_watchers, 1, AlertWatcher)
        list_by_limit(self.alert_watchers.list_alert_watchers, 2, AlertWatcher)
        res = list_by_limit(self.alert_watchers.list_alert_watchers, 5, AlertWatcher)
        token = res.pagination_info.continuation_token
        list_by_token(self.alert_watchers.list_alert_watchers, token, AlertWatcher)

    def test_combined(self):
        print('\nLIST alert watcher by combined parameters\n')
        print('\nLIST by start, limit, filter\n')
        res = self.alert_watchers.list_alert_watchers(
            start=1, limit=3, filter='enabled')
        if DEBUG:
            print_list(res.items)
        check_is_list_of(res.items, AlertWatcher)

    def test_update(self):
        print('\nUPDATE alert watcher\n')
        name = WATCHER_NAME.format(0)
        watcher_settings = AlertWatcher(enabled=True)
        res = self.alert_watchers.update_alert_watchers(names=[name], watcher_settings=watcher_settings)
        check_is_list_of(res.items, AlertWatcher)
        updated_watcher = res.items[0]
        self.assertTrue(updated_watcher.name == name)
        self.assertTrue(updated_watcher.enabled)
        watcher_settings = AlertWatcher(enabled=False)
        res = self.alert_watchers.update_alert_watchers(names=[name], watcher_settings=watcher_settings)
        check_is_list_of(res.items, AlertWatcher)
        updated_watcher = res.items[0]
        self.assertTrue(updated_watcher.name == name)
        self.assertFalse(updated_watcher.enabled)

if __name__ == '__main__':
    unittest.main()
