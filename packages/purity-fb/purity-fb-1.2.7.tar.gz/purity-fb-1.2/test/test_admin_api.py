# coding: utf-8

"""
    FlashBlade Management API

    The management APIs of FlashBlade.

    OpenAPI spec version: beta

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import unittest

from environment import HOST, API_TOKEN
from purity_fb import *
from utils import *

class TestAdminsApi(unittest.TestCase):
    """ AdminsApi unit test stubs """

    def setUp(self):
        purity_fb = PurityFb(HOST)
        purity_fb.disable_verify_ssl()
        res = purity_fb.login(API_TOKEN)
        self.assertTrue(res == 200)
        self.admins = purity_fb.admins

    def tearDown(self):
        pass

    def test_list(self):
        """
        Test case for list
        """
        res = self.admins.list_admins()
        self.assertTrue(len(res.items) >= 1)
        check_is_list_of(res.items, Admin)

    def test_update(self):
        """
        Test case for update
        """
        myAdmin = Admin()
        myAdmin.old_password = "pureuser"
        myAdmin.password = "fakepass"
        res = self.admins.update_admins(myAdmin, names=['pureuser'])
        self.assertTrue(len(res.items) >= 1)
        check_is_list_of(res.items, Admin)

        myAdmin.old_password = myAdmin.password
        myAdmin.password = "pureuser"
        res = self.admins.update_admins(myAdmin, names=['pureuser'])
        self.assertTrue(len(res.items) >= 1)
        check_is_list_of(res.items, Admin)

    # This test has been disabled until we have more users than pureuser and ir. Without
    #  additional users, this test messes up the token needed for other tests
    # def test_create_and_delete(self):
    #     """
    #     Test case for create
    #     """
    #     myAdmin = Admin()
    #     myAdmin.create_api_token = True
    #     res = self.admins.update_admins(myAdmin, names=["pureuser"])
    #     self.assertTrue(len(res.items) == 1)
    #     check_is_list_of(res.items, Admin)
    #
    #     res = self.admins.list_admins(names=["pureuser"])
    #     self.assertTrue(len(res.items) == 1)
    #     check_is_list_of(res.items, Admin)
    #
    #     myAdmin = Admin()
    #     myAdmin.delete_api_token = True
    #     self.admins.update_admins(myAdmin, names=["pureuser"])
    #
    #     res = self.admins.list_admins(names=["pureuser"])
    #     if (len(res.items) > 0):
    #         self.assertTrue(len(res.items) == 1)
    #         self.assertTrue(res.items[0].api_token == None)
    #     else:
    #         self.assertTrue(len(res.items) == 0)
    #     check_is_list_of(res.items, Admin)

if __name__ == '__main__':
    unittest.main()
