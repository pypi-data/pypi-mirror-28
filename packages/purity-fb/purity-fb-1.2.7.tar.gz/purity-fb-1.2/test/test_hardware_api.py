# coding: utf-8

"""
    FlashBlade Management API

    The management APIs of FlashBlade.

    OpenAPI spec version: beta

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import unittest

from environment import HOST, API_TOKEN
from purity_fb import *
from utils import *

class TestHardwareApi(unittest.TestCase):
    """ HardwareApi unit test stubs """

    def setUp(self):
        purity_fb = PurityFb(HOST)
        purity_fb.disable_verify_ssl()
        res = purity_fb.login(API_TOKEN)
        self.assertTrue(res == 200)
        self.hardware = purity_fb.hardware

    def tearDown(self):
        pass

    def test_identify(self):
        """
        Test case for identify
        """
        res = self.hardware.list_hardware()
        self.assertTrue(len(res.items) > 0)

        name = res.items[0].name

        for identify_enabled in (True, False):
            params = Hardware(identify_enabled=identify_enabled)
            res = self.hardware.update_hardware(names=[name], hardware=params)
            self.assertEquals(1, len(res.items))
            check_is_list_of(res.items, Hardware)
            self.assertEquals(name, res.items[0].name)
            self.assertEquals(identify_enabled, res.items[0].identify_enabled)

    def test_list(self):
        """
        Test case for list
        """
        res = self.hardware.list_hardware()
        self.assertTrue(len(res.items) > 0)
        check_is_list_of(res.items, Hardware)

        names = [res.items[0].name, res.items[-1].name]
        res = self.hardware.list_hardware(names=names)
        self.assertEquals(len(names), len(res.items))
        check_is_list_of(res.items, Hardware)
        self.assertEquals(set(names), set(x.name for x in res.items))

    def test_list_and_sort(self):
        res = list_and_sort(self.hardware.list_hardware, 'slot', Hardware)
        slots = [x.slot for x in res.items]
        self.assertEquals(sorted(slots), slots)

    def test_list_by_filter(self):
        res = list_by_filter(self.hardware.list_hardware, 'type="ch"', Hardware)
        for hw in res.items:
            self.assertEquals('ch', hw.type)

    def test_list_by_limit(self):
        res = list_by_limit(self.hardware.list_hardware, 2, Hardware)
        self.assertEquals(2, len(res.items))

    def test_list_by_token(self):
        res = list_by_limit(self.hardware.list_hardware, 1, Hardware)
        token = res.pagination_info.continuation_token
        res = list_by_token(self.hardware.list_hardware, token, Hardware)
        self.assertTrue(len(res.items) > 0)

if __name__ == '__main__':
    unittest.main()
