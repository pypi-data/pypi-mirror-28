jenkins:
  Persistence:
    enabled: true
    mounts:
      - mountPath: /usr/local/share/ca-certificates
        name: ldap-cert-config
      - mountPath: /tmp
        name: init-script-config
    volumes:
      - name: ldap-cert-config
        configMap:
          name: ldap-cert-config
      - name: init-script-config
        configMap:
          name: init-script-config
  Master:
    ServiceType: ClusterIP
    ServicePort: 80
    Ingress:
      Annotations:
        kubernetes.io/ingress.class: internal
    JavaOpts: >
      -Dhudson.slaves.NodeProvisioner.MARGIN=50
      -Dhudson.slaves.NodeProvisioner.MARGIN0=0.85
    InstallPlugins:
      - credentials-binding:1.14
      - git:3.7.0
      - gogs-webhook:1.0.10
      - kubernetes:1.1.3
      - ldap:1.18
      - matrix-auth:2.2
      - pipeline-utility-steps:1.5.1
      - script-security:1.40
      - timestamper:1.8.9
      - workflow-aggregator:2.5
      - workflow-job:2.17
    InitScriptSettings: {}
#      envVars:
#      - name: "gitUrl"
#        value: "https://git.project.test.com"
    InitScripts:
      00-certs: |
        def certFile = new File("/etc/ssl/certs/name.pem")
        if (!certFile.exists()) {
          println "/usr/sbin/update-ca-certificates".execute().text
          jenkins.model.Jenkins.instance.restart()
        }
      01-logging: |
        import java.util.logging.Level
        import java.util.logging.Logger
        import java.util.logging.FileHandler
        import java.util.logging.SimpleFormatter
        import java.util.logging.LogManager
        import jenkins.model.Jenkins

        Logger.getLogger("hudson.security").setLevel(Level.ALL)
        Logger.getLogger("jenkins.security").setLevel(Level.ALL)

        // Log into a file
        def HudsonSecurityLogger = LogManager.getLogManager().getLogger("hudson.security")
        def logsDir = new File(Jenkins.instance.rootDir, "logs")
        if(!logsDir.exists()){logsDir.mkdirs()}
        FileHandler handler = new FileHandler(logsDir.absolutePath+"/hudson.security-%g.log", 1024 * 1024, 10, true);
        handler.setFormatter(new SimpleFormatter());
        HudsonSecurityLogger.addHandler(handler)

      04-matrixauth: |
        import jenkins.model.*
        def instance = Jenkins.getInstance()

        import hudson.security.*
        def realm = new HudsonPrivateSecurityRealm(false)
        instance.setSecurityRealm(realm)

        def strategy = new hudson.security.GlobalMatrixAuthorizationStrategy()
        strategy.add(Jenkins.READ, 'authenticated')
        strategy.add(Jenkins.ADMINISTER, 'vf_admin_S')
        instance.setAuthorizationStrategy(strategy)

        instance.save()

      05-disableOldJNLPProtocols: |
        import jenkins.model.Jenkins

        Jenkins jenkins = Jenkins.getInstance()

        // Disable remoting
        jenkins.getDescriptor("jenkins.CLI").get().setEnabled(false)

        // Disable old Non-Encrypted protocols
        HashSet<String> newProtocols = new HashSet<>(jenkins.getAgentProtocols());

        newProtocols.removeAll(Arrays.asList("JNLP3-connect", "JNLP2-connect", "JNLP-connect", "CLI-connect"));

        jenkins.setAgentProtocols(newProtocols);
        jenkins.save()
      10-envVars: |
        import jenkins.model.*
        import groovy.json.*

        def configFile = new File("/tmp/init-script-config.json")
        if (configFile.exists()) {
            def configText = configFile.getText()
            def configJson = new JsonSlurper().parseText(configText)

            if (configJson.envVars) {
                def instance = Jenkins.getInstance()
                def globalNodeProperties = instance.getGlobalNodeProperties()
                def envVarsNodePropertyList = globalNodeProperties.getAll(hudson.slaves.EnvironmentVariablesNodeProperty.class)

                def newEnvVarsNodeProperty = null
                def envVars = null

                if (envVarsNodePropertyList == null || envVarsNodePropertyList.size() == 0) {
                    newEnvVarsNodeProperty = new hudson.slaves.EnvironmentVariablesNodeProperty();
                    globalNodeProperties.add(newEnvVarsNodeProperty)
                    envVars = newEnvVarsNodeProperty.getEnvVars()
                } else {
                    envVars = envVarsNodePropertyList.get(0).getEnvVars()
                }

                configJson.envVars.each {
                    envVars.put(it.name, it.value)
                }

                instance.save()
            }
        }

      20-creds: |
        import com.cloudbees.plugins.credentials.impl.*;
        import com.cloudbees.plugins.credentials.*;
        import com.cloudbees.plugins.credentials.domains.*;

        Credentials credentials = (Credentials) new UsernamePasswordCredentialsImpl(CredentialsScope.GLOBAL, "git-credentials", "", "user", "password")
        SystemCredentialsProvider.getInstance().getStore().addCredentials(Domain.global(), credentials)

        credentials = (Credentials) new UsernamePasswordCredentialsImpl(CredentialsScope.GLOBAL, "docker-credentials", "", "user", "password")
        SystemCredentialsProvider.getInstance().getStore().addCredentials(Domain.global(), credentials)

      30-ldap: |
        import jenkins.*
        import hudson.*
        import com.cloudbees.plugins.credentials.*
        import com.cloudbees.plugins.credentials.common.*
        import com.cloudbees.plugins.credentials.domains.*
        import com.cloudbees.jenkins.plugins.sshcredentials.impl.*
        import hudson.plugins.sshslaves.*;
        import hudson.model.*
        import jenkins.model.*
        import hudson.security.*
        import hudson.util.Secret
        import jenkins.security.plugins.ldap.*

        def instance = Jenkins.getInstance()

        // CONFIGURE GLOBAL SECURITY
        def hudsonRealm = new HudsonPrivateSecurityRealm(false)
        String server = 'ldaps://'
        String rootDN = ''
        String userSearchBase = 'o=access'
        String userSearch = '(&(uid={0})(objectClass=inetOrgPerson))'
        String groupSearchBase = 'ou=groups,o=access'
        String groupSearchFilter = '(&(cn={0})(objectClass=groupOfUniqueNames))'
        LDAPGroupMembershipStrategy groupMembershipStrategy = new FromUserRecordLDAPGroupMembershipStrategy('groupMembership')
        String managerDN = 'cn=awsJenkins,ou=robotics,o=access'
        Secret managerPasswordSecret = Secret.fromString('password')
        boolean inhibitInferRootDN = false
        boolean disableMailAddressResolver = false
        LDAPSecurityRealm.CacheConfiguration cache = null
        LDAPSecurityRealm.EnvironmentProperty[] environmentProperties = null
        String displayNameAttributeName = 'displayName'
        String mailAddressAttributeName = 'mail'
        jenkins.model.IdStrategy userIdStrategy = jenkins.model.IdStrategy.CASE_INSENSITIVE
        jenkins.model.IdStrategy groupIdStrategy = jenkins.model.IdStrategy.CASE_INSENSITIVE

        SecurityRealm ldap_realm = new LDAPSecurityRealm(server, rootDN, userSearchBase, userSearch, groupSearchBase, groupSearchFilter, groupMembershipStrategy, managerDN, managerPasswordSecret, inhibitInferRootDN, disableMailAddressResolver, cache, environmentProperties, displayNameAttributeName, mailAddressAttributeName, userIdStrategy, groupIdStrategy)
        instance.setSecurityRealm(ldap_realm)
        instance.save()

      40-pipelineLibraries: |
        import jenkins.model.Jenkins
        import org.jenkinsci.plugins.workflow.libs.SCMSourceRetriever;
        import org.jenkinsci.plugins.workflow.libs.LibraryConfiguration;
        import jenkins.plugins.git.GitSCMSource;

        def globalLibsDesc = Jenkins.getInstance().getDescriptor("org.jenkinsci.plugins.workflow.libs.GlobalLibraries")
        def gitSource = new GitSCMSource("https://git.project.test-tools.com/devops/project-pipeline-library")

        gitSource.setCredentialsId("git-credentials")
        SCMSourceRetriever retriever = new SCMSourceRetriever(gitSource)
        LibraryConfiguration pipeline = new LibraryConfiguration("project-pipeline-library", retriever)

        pipeline.setDefaultVersion("0.1.0")
        pipeline.setImplicit(false)

        globalLibsDesc.get().setLibraries([pipeline])
