# coding: utf-8

"""
RepositoryApi.py
Copyright 2016 SmartBear Software

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re
import json
# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class RepositoryApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def ml_assets_experiment_creation(self, _return_http_data_only, models_input, callback=None, **kwargs):
        """
        Creates the first version of the experiment with the given metadata in the repository.
        Creates the first version of the experiment with the given metadata in the repository. Metadata is immutable. The pipeline, model_definition can be created here

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.ml_assets_experiment_creation(models_input, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param MlAssetsCreateExperimentInput models_input: Input for experiment (required)
        :return
         :return_http_data_only: MlAssetsCreateExperimentOutput
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.ml_assets_experiment_creation_with_http_info(models_input, **kwargs)
        else:
            (data) = self.ml_assets_experiment_creation_with_http_info(models_input, **kwargs)
            return data

    def ml_assets_experiment_creation_with_http_info(self, models_input, **kwargs):
        """
        Creates the first version of the experiment with the given metadata in the repository.
        Creates the first version of the experiment with the given metadata in the repository. Metadata is immutable. The pipeline, model_definition can be created here

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.ml_assets_experiment_creation_with_http_info(models_input, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param MlAssetsCreateExperimentInput models_input: Input for experiment (required)
        :return: MlAssetsCreateExperimentOutput
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['models_input']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ml_assets_experiment_creation" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'models_input' is set
        if ('models_input' not in params) or (params['models_input'] is None):
            raise ValueError("Missing the required parameter `models_input` when calling `ml_assets_experiment_creation`")

        resource_path = '/v3/ml_assets/training_definitions'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'models_input' in params:
            body_params = params['models_input']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['MLToken']


        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='MlAssetsCreateExperimentOutput',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def ml_assets_model_creation(self, models_input, **kwargs):
        """
        Creates the first version of the model with the given metadata in the repository.
        Creates the first version of the model with the given metadata in the repository.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.ml_assets_model_creation(models_input, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param MlAssetsCreateModelInput models_input: Input For models (required)
        :return: MlAssetsCreateModelOutput
                 If the method is called asynchronously,
                 returns the request thread.
        """

        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.ml_assets_model_creation_with_http_info(models_input, **kwargs)
        else:
            (data) = self.ml_assets_model_creation_with_http_info(models_input, **kwargs)
            return data


    def ml_assets_model_creation_with_http_info(self, models_input, **kwargs):
        """
        Creates the first version of the model with the given metadata in the repository.
        Creates the first version of the model with the given metadata in the repository.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.ml_assets_model_creation_with_http_info(model_input, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param MlAssetsCreateModelInput models_input: Input For models (required)
        :return: MlAssetsCreateModelOutput
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['models_input']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ml_assets_model_creation" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'models_input' is set
        if ('models_input' not in params) or (params['models_input'] is None):
            raise ValueError("Missing the required parameter `models_input` when calling `ml_assets_model_creation`")

        resource_path = '/v3/ml_assets/models'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'models_input' in params:
            body_params = params['models_input']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['MLToken']
        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='MlAssetsCreateModelOutput',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def repository_experiment_version_creation(self, experiment_id, models_input, **kwargs):
        """
        Creates the next version of the experiment with the given metadata in the repository.
        Creates the next version of the experiment with the given metadata in the repository. Metadata is immutable

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.repository_experiment_version_creation(experiment_id, models_input, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str experiment_id: ID of the experiment (required)
        :param MlAssetsCreateExperimentInput models_input: Input For experiment (required)
        :return: MlAssetsCreateExperimentOutput
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.repository_experiment_version_creation_with_http_info(experiment_id,models_input, **kwargs)
        else:
            (data) = self.repository_experiment_version_creation_with_http_info(experiment_id,models_input, **kwargs)
            return data

    def repository_experiment_version_creation_with_http_info(self, experiment_id, models_input, **kwargs):
        """
        Creates the next version of the experiment with the given metadata in the repository.
        Creates the next version of the experiment with the given metadata in the repository. Metadata is immutable

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.repository_experiment_version_creation_with_http_info(experiment_id, models_input, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str experiment_id: ID of the experiment (required)
        :param MlAssetsCreateExperimentInput models_input: Input For experiment (required)
        :return: MlAssetsCreateExperimentOutput
        """

        all_params = ['experiment_id', 'models_input']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method repository_experiment_version_creation" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'experiment_id' is set
        if ('experiment_id' not in params) or (params['experiment_id'] is None):
            raise ValueError("Missing the required parameter `experiment_id` when calling `repository_experiment_version_creation`")
        # verify the required parameter 'models_input' is set
        if ('models_input' not in params) or (params['models_input'] is None):
            raise ValueError("Missing the required parameter `models_input` when calling `repository_experiment_version_creation`")

        resource_path = '/v3/ml_assets/training_definitions/{experimentId}'.replace('{format}', 'json')
        path_params = {}
        if 'experiment_id' in params:
            path_params['experimentId'] = params['experiment_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'models_input' in params:
            body_params = params['models_input']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['MLToken']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='MlAssetsCreateExperimentOutput',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def repository_get_experiment_content(self, experiment_id, **kwargs):
        """
        Get the content of the last version of the experiment
        Get the content of the last version of the experiment

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.repository_get_experiment_content(experiment_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str experiment_id: ID of the ex (required)
        :param str accept: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.repository_get_experiment_content_with_http_info(experiment_id, **kwargs)
        else:
            (data) = self.repository_get_experiment_content_with_http_info(experiment_id, **kwargs)
            return data

    def repository_get_experiment_content_with_http_info(self, experiment_id, **kwargs):
        """
        Get the content of the last version of the experiment
        Get the content of the last version of the experiment

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.repository_get_experiment_content_with_http_info(experiment_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str experiment_id: ID of the ex (required)
        :param str accept: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['experiment_id', 'accept']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method repository_get_experiment_content" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'experiment_id' is set
        if ('experiment_id' not in params) or (params['experiment_id'] is None):
            raise ValueError("Missing the required parameter `experiment_id` when calling `repository_get_experiment_content`")

        resource_path = '/v3/ml_assets/training_definitions/{experimentId}/content'.replace('{format}', 'json')
        path_params = {}
        if 'experiment_id' in params:
            path_params['experimentId'] = params['experiment_id']

        query_params = {}

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/gzip'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['MLToken']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def repository_get_experiment_version(self, experiment_id, version_id, **kwargs):
        """
        Get metadata of the given experiment version
        Get metadata of the given experiment version

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.repository_get_experiment_version(experiment_id, version_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str experiment_id: ID of the experiment (required)
        :param str version_id: ID of the version (required)
        :return: MlAssetsCreateExperimentOutput
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.repository_get_experiment_version_with_http_info(experiment_id, version_id, **kwargs)
        else:
            (data) = self.repository_get_experiment_version_with_http_info(experiment_id, version_id, **kwargs)
            return data

    def repository_get_experiment_version_with_http_info(self, experiment_id, version_id, **kwargs):
        """
        Get metadata of the given experiment version
        Get metadata of the given experiment version

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.repository_get_experiment_version_with_http_info(experiment_id, version_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str experiment_id: ID of the experiment (required)
        :param str version_id: ID of the version (required)
        :return: MlAssetsCreateExperimentOutput
                 If the method is called asynchronously,
                 returns the request thread.
        """
        all_params = ['experiment_id', 'version_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method repository_get_experiment_version" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'experiment_id' is set
        if ('experiment_id' not in params) or (params['experiment_id'] is None):
            raise ValueError("Missing the required parameter `experiment_id` when calling `repository_get_experiment_version`")
        # verify the required parameter 'version_id' is set
        if ('version_id' not in params) or (params['version_id'] is None):
            raise ValueError("Missing the required parameter `version_id` when calling `repository_get_experiment_version`")

        resource_path = '/v3/ml_assets/training_definitions/{experimentId}/versions/{versionId}'.replace('{format}', 'json')
        path_params = {}
        if 'experiment_id' in params:
            path_params['experimentId'] = params['experiment_id']
        if 'version_id' in params:
            path_params['versionId'] = params['version_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['MLToken']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='MlAssetsCreateExperimentOutput',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def repository_get_experiment_version_content(self, experiment_id, version_id, **kwargs):
        """
        Download given experiment version content
        Download given experiment version content

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.repository_get_experiment_version_content(experiment_id, version_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str experiment_id: ID of the experiment (required)
        :param str version_id: ID of the version (required)
        :param str accept: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.repository_get_experiment_version_content_with_http_info(experiment_id, version_id, **kwargs)
        else:
            (data) = self.repository_get_experiment_version_content_with_http_info(experiment_id, version_id, **kwargs)
            return data

    def repository_get_experiment_version_content_with_http_info(self, experiment_id, version_id, **kwargs):
        """
        Download given experiment version content
        Download given experiment version content

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.repository_get_experiment_version_content_with_http_info(experiment_id, version_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str experiment_id: ID of the experiment (required)
        :param str version_id: ID of the version (required)
        :param str accept: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        all_params = ['experiment_id', 'version_id', 'accept']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method repository_get_experiment_version_content" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'experiment_id' is set
        if ('experiment_id' not in params) or (params['experiment_id'] is None):
            raise ValueError("Missing the required parameter `experiment_id` when calling `repository_get_experiment_version_content`")
        # verify the required parameter 'version_id' is set
        if ('version_id' not in params) or (params['version_id'] is None):
            raise ValueError("Missing the required parameter `version_id` when calling `repository_get_experiment_version_content`")

        resource_path = '/v3/ml_assets/training_definitions/{experimentId}/versions/{versionId}/content'.replace('{format}', 'json')
        path_params = {}
        if 'experiment_id' in params:
            path_params['experimentId'] = params['experiment_id']
        if 'version_id' in params:
            path_params['versionId'] = params['version_id']

        query_params = {}

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/gzip'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['MLToken']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                             _return_http_data_only=params.get('_return_http_data_only'))

    def repository_get_model_version(self, artifact_id, version_id, **kwargs):
        """
        Get metadata of the given model version
        Get metadata of the given model version

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.repository_get_model_version(artifact_id, version_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str artifact_id: ID of the model (required)
        :param str version_id: ID of the version (required)
        :return: MlAssetsCreateModelOutput
                 If the method is called asynchronously,
                 returns the request thread.
        """ 
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.repository_get_model_version_with_http_info(artifact_id, version_id, **kwargs)
        else:
            (data) = self.repository_get_model_version_with_http_info(artifact_id, version_id, **kwargs)
            return data

    def repository_get_model_version_with_http_info(self, artifact_id, version_id, **kwargs):
        """
        Get metadata of the given model version
        Get metadata of the given model version

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.repository_get_model_version_with_http_info(artifact_id, version_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str artifact_id: ID of the model (required)
        :param str version_id: ID of the version (required)
        :return: MlAssetsCreateModelOutput
                 If the method is called asynchronously,
                 returns the request thread.
        """ 

        all_params = ['artifact_id', 'version_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method repository_get_model_version" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'artifact_id' is set
        if ('artifact_id' not in params) or (params['artifact_id'] is None):
            raise ValueError("Missing the required parameter `artifact_id` when calling `repository_get_model_version`")
        # verify the required parameter 'version_id' is set
        if ('version_id' not in params) or (params['version_id'] is None):
            raise ValueError("Missing the required parameter `version_id` when calling `repository_get_model_version`")

        resource_path = '/v3/ml_assets/models/{artifactId}/versions/{versionId}'.replace('{format}', 'json')
        path_params = {}
        if 'artifact_id' in params:
            path_params['artifactId'] = params['artifact_id']
        if 'version_id' in params:
            path_params['versionId'] = params['version_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['MLToken']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='MlAssetsCreateModelOutput',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                             _return_http_data_only=params.get('_return_http_data_only'))

    def repository_get_model_version_content(self, artifact_id, version_id, **kwargs):
        """
        Download given model version content
        Download given model version content

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.repository_get_model_version_content(artifact_id, version_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str artifact_id: ID of the model (required)
        :param str version_id: ID of the version (required)
        :param str accept: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.repository_get_model_version_content_with_http_info(artifact_id, version_id, **kwargs)
        else:
            (data) = self.repository_get_model_version_content_with_http_info(artifact_id, version_id, **kwargs)
            return data


    def repository_get_model_version_content_with_http_info(self, artifact_id, version_id, **kwargs):
        """
        Download given model version content
        Download given model version content

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.repository_get_model_version_content_with_http_info(artifact_id, version_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str artifact_id: ID of the model (required)
        :param str version_id: ID of the version (required)
        :param str accept: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['artifact_id', 'version_id', 'accept']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method repository_get_model_version_content" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'artifact_id' is set
        if ('artifact_id' not in params) or (params['artifact_id'] is None):
            raise ValueError("Missing the required parameter `artifact_id` when calling `repository_get_model_version_content`")
        # verify the required parameter 'version_id' is set
        if ('version_id' not in params) or (params['version_id'] is None):
            raise ValueError("Missing the required parameter `version_id` when calling `repository_get_model_version_content`")

        resource_path = '/v3/ml_assets/models/{artifactId}/versions/{versionId}/content'.replace('{format}', 'json')
        path_params = {}
        if 'artifact_id' in params:
            path_params['artifactId'] = params['artifact_id']
        if 'version_id' in params:
            path_params['versionId'] = params['version_id']

        query_params = {}

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/gzip'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['MLToken']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                             _return_http_data_only=params.get('_return_http_data_only'))

    def repository_list_experiment_versions(self, experiment_id, **kwargs):
        """
        Lists metadata for all versions of the given experiment
        Lists metadata for all versions of the given experiment

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.repository_list_experiment_versions(experiment_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str experiment_id: ID of the experiment (required)
        :return: MlAssetsCreateExperimentOutputArray
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.repository_list_experiment_versions_with_http_info(experiment_id, **kwargs)
        else:
            (data) = self.repository_list_experiment_versions_with_http_info(experiment_id, **kwargs)
            return data

    def repository_list_experiment_versions_with_http_info(self, experiment_id, **kwargs):
        """
        Lists metadata for all versions of the given experiment
        Lists metadata for all versions of the given experiment

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.repository_list_experiment_versions_with_http_info(experiment_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str experiment_id: ID of the experiment (required)
        :return: MlAssetsCreateExperimentOutputArray
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['experiment_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method repository_list_experiment_versions" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'experiment_id' is set
        if ('experiment_id' not in params) or (params['experiment_id'] is None):
            raise ValueError("Missing the required parameter `experiment_id` when calling `repository_list_experiment_versions`")

        resource_path = '/v3/ml_assets/training_definitions/{experimentId}/versions'.replace('{format}', 'json')
        path_params = {}
        if 'experiment_id' in params:
            path_params['experimentId'] = params['experiment_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['MLToken']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='MlAssetsCreateExperimentOutputArray',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def repository_list_experiments(self, **kwargs):
        """
        Lists metadata of all latest versions for all experiments
        Lists metadata of all latest versions for all experiments

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.repository_list_experiments(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: MlAssetsCreateExperimentOutputArray
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.repository_list_experiments_with_http_info(**kwargs)
        else:
            (data) = self.repository_list_experiments_with_http_info(**kwargs)
            return data

    def repository_list_experiments_with_http_info(self, **kwargs):
        """
        Lists metadata of all latest versions for all experiments
        Lists metadata of all latest versions for all experiments

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.repository_list_experiments_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: MlAssetsCreateExperimentOutputArray
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method repository_list_experiments" % key
                )
            params[key] = val
        del params['kwargs']
        resource_path = '/v3/ml_assets/training_definitions'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['MLToken']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='MlAssetsCreateExperimentOutputArray',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def repository_list_model_versions(self, artifact_id, **kwargs):
        """
        Lists metadata for all versions of the given model
        Lists metadata for all versions of the given model

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.repository_list_model_versions(artifact_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str artifact_id: ID of the model (required)
        :return: MlAssetsCreateModelOutputArray
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.repository_list_model_versions_with_http_info(artifact_id, **kwargs)
        else:
            (data) = self.repository_list_model_versions_with_http_info(artifact_id, **kwargs)
            return data

    def repository_list_model_versions_with_http_info(self, artifact_id, **kwargs):
        """
        Lists metadata for all versions of the given model
        Lists metadata for all versions of the given model

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.repository_list_model_versions_with_http_info(artifact_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str artifact_id: ID of the model (required)
        :return: MlAssetsCreateModelOutputArray
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['artifact_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method repository_list_model_versions" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'artifact_id' is set
        if ('artifact_id' not in params) or (params['artifact_id'] is None):
            raise ValueError("Missing the required parameter `artifact_id` when calling `repository_list_model_versions`")

        resource_path = '/v3/ml_assets/models/{artifactId}/versions'.replace('{format}', 'json')
        path_params = {}
        if 'artifact_id' in params:
            path_params['artifactId'] = params['artifact_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['MLToken']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='MlAssetsCreateModelOutputArray',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def repository_list_models(self, **kwargs):
        """
        Lists metadata of all latest versions for all models
        Lists metadata of all latest versions for all models

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.repository_list_models(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: MlAssetsCreateModelOutputArray
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.repository_list_models_with_http_info(**kwargs)
        else:
            (data) = self.repository_list_models_with_http_info(**kwargs)
            return data

    def repository_list_models_with_http_info(self, **kwargs):
        """
        Lists metadata of all latest versions for all models
        Lists metadata of all latest versions for all models

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.repository_list_models_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: MlAssetsCreateModelOutputArray
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method repository_list_models" % key
                )
            params[key] = val
        del params['kwargs']
        resource_path = '/v3/ml_assets/models'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['MLToken']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='MlAssetsCreateModelOutputArray',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def repository_model_version_creation(self, artifact_id, models_input, **kwargs):
        """
        Creates the next version of the model with the given metadata in the repository.
        Creates the next version of the model with the given metadata in the repository. Metadata is immutable.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.repository_model_version_creation(artifact_id, models_input, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str artifact_id: ID of the model (required)
        :param MlAssetsCreateModelInput models_input: Input For models (required)
        :return: MlAssetsCreateModelOutput
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.repository_model_version_creation_with_http_info(artifact_id, models_input, **kwargs)
        else:
            (data) = self.repository_model_version_creation_with_http_info(artifact_id, models_input, **kwargs)
            return data

    def repository_model_version_creation_with_http_info(self, artifact_id, models_input, **kwargs):
        """
        Creates the next version of the model with the given metadata in the repository.
        Creates the next version of the model with the given metadata in the repository. Metadata is immutable.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.repository_model_version_creation_with_http_info(artifact_id, models_input, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str artifact_id: ID of the model (required)
        :param MlAssetsCreateModelInput models_input: Input For models (required)
        :return: MlAssetsCreateModelOutput
                 If the method is called asynchronously,
                 returns the request thread.
        """
        all_params = ['artifact_id', 'models_input']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method repository_model_version_creation" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'artifact_id' is set
        if ('artifact_id' not in params) or (params['artifact_id'] is None):
            raise ValueError("Missing the required parameter `artifact_id` when calling `repository_model_version_creation`")
        # verify the required parameter 'models_input' is set
        if ('models_input' not in params) or (params['models_input'] is None):
            raise ValueError("Missing the required parameter `models_input` when calling `repository_model_version_creation`")

        resource_path = '/v3/ml_assets/models/{artifactId}'.replace('{format}', 'json')
        path_params = {}
        if 'artifact_id' in params:
            path_params['artifactId'] = params['artifact_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'models_input' in params:
            body_params = params['models_input']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['MLToken']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='MlAssetsCreateModelOutput',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def repository_upload_experiment_version_content(self, experiment_id, version_id, compressed_data, **kwargs):
        """
        Upload content for specific experiment version
        Upload content for specific experiment version

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.repository_upload_experiment_version_content(experiment_id, version_id, compressed_data, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str experiment_id: ID of the experiment (required)
        :param str version_id: ID of the version (required)
        :param ByteArray compressed_data: Input for experiment content (required)
        :param str content_type: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.repository_upload_experiment_version_content_with_http_info(experiment_id, version_id, compressed_data, **kwargs)
        else:
            (data) = self.repository_upload_experiment_version_content_with_http_info(experiment_id, version_id, compressed_data, **kwargs)
            return data

    def repository_upload_experiment_version_content_with_http_info(self, experiment_id, version_id, compressed_data, **kwargs):
        """
        Upload content for specific experiment version
        Upload content for specific experiment version

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.repository_upload_experiment_version_content_with_http_info(experiment_id, version_id, compressed_data, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str experiment_id: ID of the experiment (required)
        :param str version_id: ID of the version (required)
        :param ByteArray compressed_data: Input for experiment content (required)
        :param str content_type: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        all_params = ['experiment_id', 'version_id', 'compressed_data', 'content_type']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method repository_upload_experiment_version_content" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'experiment_id' is set
        if ('experiment_id' not in params) or (params['experiment_id'] is None):
            raise ValueError("Missing the required parameter `experiment_id` when calling `repository_upload_experiment_version_content`")
        # verify the required parameter 'version_id' is set
        if ('version_id' not in params) or (params['version_id'] is None):
            raise ValueError("Missing the required parameter `version_id` when calling `repository_upload_experiment_version_content`")
        # verify the required parameter 'compressed_data' is set
        if ('compressed_data' not in params) or (params['compressed_data'] is None):
            raise ValueError("Missing the required parameter `compressed_data` when calling `repository_upload_experiment_version_content`")

        resource_path = '/v3/ml_assets/training_definitions/{experimentId}/versions/{versionId}/content'.replace('{format}', 'json')
        path_params = {}
        if 'experiment_id' in params:
            path_params['experimentId'] = params['experiment_id']
        if 'version_id' in params:
            path_params['versionId'] = params['version_id']

        query_params = {}

        header_params = {}
        if 'content_type' in params:
            header_params['Content-Type'] = params['content_type']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'compressed_data' in params:
            body_params = params['compressed_data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/gzip'])

        # Authentication setting
        auth_settings = ['MLToken']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def repository_upload_version_content(self, artifact_id, version_id, compressed_data, **kwargs):
        """
        Upload content for specific model version
        Upload content for specific model version

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.repository_upload_version_content(artifact_id, version_id, compressed_data, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str artifact_id: ID of the model (required)
        :param str version_id: ID of the version (required)
        :param ByteArray compressed_data: Input for model content (required)
        :param str content_type: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.repository_upload_version_content_with_http_info(artifact_id, version_id, compressed_data, **kwargs)
        else:
            (data) = self.repository_upload_version_content_with_http_info(artifact_id, version_id, compressed_data, **kwargs)
            return data

    def repository_upload_version_content_with_http_info(self, artifact_id, version_id, compressed_data, **kwargs):
        """
        Upload content for specific model version
        Upload content for specific model version

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.repository_upload_version_content_with_http_info(artifact_id, version_id, compressed_data, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str artifact_id: ID of the model (required)
        :param str version_id: ID of the version (required)
        :param ByteArray compressed_data: Input for model content (required)
        :param str content_type: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['artifact_id', 'version_id', 'compressed_data', 'content_type']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method repository_upload_version_content" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'artifact_id' is set
        if ('artifact_id' not in params) or (params['artifact_id'] is None):
            raise ValueError("Missing the required parameter `artifact_id` when calling `repository_upload_version_content`")
        # verify the required parameter 'version_id' is set
        if ('version_id' not in params) or (params['version_id'] is None):
            raise ValueError("Missing the required parameter `version_id` when calling `repository_upload_version_content`")
        # verify the required parameter 'compressed_data' is set
        if ('compressed_data' not in params) or (params['compressed_data'] is None):
            raise ValueError("Missing the required parameter `compressed_data` when calling `repository_upload_version_content`")

        resource_path = '/v3/ml_assets/models/{artifactId}/versions/{versionId}/content'.replace('{format}', 'json')
        path_params = {}
        if 'artifact_id' in params:
            path_params['artifactId'] = params['artifact_id']
        if 'version_id' in params:
            path_params['versionId'] = params['version_id']

        query_params = {}

        header_params = {}
        if 'content_type' in params:
            header_params['Content-Type'] = params['content_type']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'compressed_data' in params:
            body_params = params['compressed_data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/gzip'])

        # Authentication setting
        auth_settings = ['MLToken']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def v3_ml_assets_experiments_experiment_id_delete(self, experiment_id, **kwargs):
        """
        Deletes experiment from repository
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v3_ml_assets_experiments_experiment_id_delete(experiment_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str experiment_id: ID of the experiment (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.v3_ml_assets_experiments_experiment_id_delete_with_http_info(experiment_id, **kwargs)
        else:
            (data) = self.v3_ml_assets_experiments_experiment_id_delete_with_http_info(experiment_id, **kwargs)
            return data 

    def v3_ml_assets_experiments_experiment_id_delete_with_http_info(self, experiment_id, **kwargs):
        """
        Deletes experiment from repository
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v3_ml_assets_experiments_experiment_id_delete_with_http_info(experiment_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str experiment_id: ID of the experiment (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['experiment_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_ml_assets_experiments_experiment_id_delete" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'experiment_id' is set
        if ('experiment_id' not in params) or (params['experiment_id'] is None):
            raise ValueError("Missing the required parameter `experiment_id` when calling `v3_ml_assets_experiments_experiment_id_delete`")

        resource_path = '/v3/ml_assets/training_definitions/{experimentId}'.replace('{format}', 'json')
        path_params = {}
        if 'experiment_id' in params:
            path_params['experimentId'] = params['experiment_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['MLToken']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def v3_ml_assets_experiments_experiment_id_get(self, experiment_id, **kwargs):
        """
        Get the information about metadata of the last version of the experiment
        Get the information about metadata of the last version of the experiment

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v3_ml_assets_experiments_experiment_id_get(experiment_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str experiment_id: ID of the experiment (required)
        :return: MlAssetsCreateExperimentOutput
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.v3_ml_assets_experiments_experiment_id_get_with_http_info(experiment_id, **kwargs)
        else:
            (data) = self.v3_ml_assets_experiments_experiment_id_get_with_http_info(experiment_id, **kwargs)
            return data

    def v3_ml_assets_experiments_experiment_id_get_with_http_info(self, experiment_id, **kwargs):
        """
        Get the information about metadata of the last version of the experiment
        Get the information about metadata of the last version of the experiment

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v3_ml_assets_experiments_experiment_id_get_with_http_info(experiment_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str experiment_id: ID of the experiment (required)
        :return: MlAssetsCreateExperimentOutput
                 If the method is called asynchronously,
                 returns the request thread.
        """
        all_params = ['experiment_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_ml_assets_experiments_experiment_id_get" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'experiment_id' is set
        if ('experiment_id' not in params) or (params['experiment_id'] is None):
            raise ValueError("Missing the required parameter `experiment_id` when calling `v3_ml_assets_experiments_experiment_id_get`")

        resource_path = '/v3/ml_assets/training_definitions/{experimentId}'.replace('{format}', 'json')
        path_params = {}
        if 'experiment_id' in params:
            path_params['experimentId'] = params['experiment_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['MLToken']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='MlAssetsCreateExperimentOutput',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def v3_ml_assets_models_artifact_id_content_get(self, artifact_id, **kwargs):
        """
        Get the content of the last version of the model
        Get the content of the last version of the model

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v3_ml_assets_models_artifact_id_content_get(artifact_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str artifact_id: ID of the model (required)
        :param str accept: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.v3_ml_assets_models_artifact_id_content_get_with_http_info(artifact_id, **kwargs)
        else:
            (data) = self.v3_ml_assets_models_artifact_id_content_get_with_http_info(artifact_id, **kwargs)
            return data

    def v3_ml_assets_models_artifact_id_content_get_with_http_info(self, artifact_id, **kwargs):
        """
        Get the content of the last version of the model
        Get the content of the last version of the model

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v3_ml_assets_models_artifact_id_content_get_with_http_info(artifact_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str artifact_id: ID of the model (required)
        :param str accept: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['artifact_id', 'accept']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_ml_assets_models_artifact_id_content_get" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'artifact_id' is set
        if ('artifact_id' not in params) or (params['artifact_id'] is None):
            raise ValueError("Missing the required parameter `artifact_id` when calling `v3_ml_assets_models_artifact_id_content_get`")

        resource_path = '/v3/ml_assets/models/{artifactId}/content'.replace('{format}', 'json')
        path_params = {}
        if 'artifact_id' in params:
            path_params['artifactId'] = params['artifact_id']

        query_params = {}

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/gzip'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['MLToken']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def v3_ml_assets_models_artifact_id_delete(self, artifact_id, **kwargs):
        """
        Deletes model from repository
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v3_ml_assets_models_artifact_id_delete(artifact_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str artifact_id: ID of the model (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.v3_ml_assets_models_artifact_id_delete_with_http_info(artifact_id, **kwargs)
        else:
            (data) = self.v3_ml_assets_models_artifact_id_delete_with_http_info(artifact_id, **kwargs)
            return data

    def v3_ml_assets_models_artifact_id_delete_with_http_info(self, artifact_id, **kwargs):
        """
        Deletes model from repository
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v3_ml_assets_models_artifact_id_delete_with_http_info(artifact_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str artifact_id: ID of the model (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['artifact_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_ml_assets_models_artifact_id_delete" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'artifact_id' is set
        if ('artifact_id' not in params) or (params['artifact_id'] is None):
            raise ValueError("Missing the required parameter `artifact_id` when calling `v3_ml_assets_models_artifact_id_delete`")

        resource_path = '/v3/ml_assets/models/{artifactId}'.replace('{format}', 'json')
        path_params = {}
        if 'artifact_id' in params:
            path_params['artifactId'] = params['artifact_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['MLToken']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def v3_ml_assets_models_artifact_id_get(self, artifact_id, **kwargs):
        """
        Get the information about metadata of the last version of the model
        Get the information about metadata of the last version of the model

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v3_ml_assets_models_artifact_id_get(artifact_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str artifact_id: ID of the model (required)
        :return: MlAssetsCreateModelOutput
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.v3_ml_assets_models_artifact_id_get_with_http_info(artifact_id, **kwargs)
        else:
            (data) = self.v3_ml_assets_models_artifact_id_get_with_http_info(artifact_id, **kwargs)
            return data

    def v3_ml_assets_models_artifact_id_get_with_http_info(self, artifact_id, **kwargs):
        """
        Get the information about metadata of the last version of the model
        Get the information about metadata of the last version of the model

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v3_ml_assets_models_artifact_id_get_with_http_info(artifact_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str artifact_id: ID of the model (required)
        :return: MlAssetsCreateModelOutput
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['artifact_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_ml_assets_models_artifact_id_get" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'artifact_id' is set
        if ('artifact_id' not in params) or (params['artifact_id'] is None):
            raise ValueError("Missing the required parameter `artifact_id` when calling `v3_ml_assets_models_artifact_id_get`")

        resource_path = '/v3/ml_assets/models/{artifactId}'.replace('{format}', 'json')
        path_params = {}
        if 'artifact_id' in params:
            path_params['artifactId'] = params['artifact_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['MLToken']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='MlAssetsCreateModelOutput',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
